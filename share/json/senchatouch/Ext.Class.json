{"autodetected":{},"short_doc":"Handles class creation throughout the framework. ...","aliases":{},"aside":[{"type":"guide","tagname":"aside","name":"class_system"},{"type":"video","tagname":"aside","name":"class-system"}],"files":[{"linenr":5,"filename":"/Users/yshibukawa/personal/senchatouch/touch-2.3.0/src/core/class/Class.js"}],"tagname":"class","members":[{"autodetected":{},"type":"String[]","short_doc":"List of short aliases for class names. ...","default":null,"owner":"Ext.Class","tagname":"cfg","files":[{"linenr":1136,"filename":"/Users/yshibukawa/personal/senchatouch/touch-2.3.0/src/core/class/ClassManager.js"}],"name":"alias","properties":null,"doc":"<p>List of short aliases for class names.  Most useful for defining xtypes for widgets:</p>\n\n<pre><code><a href=\"#!/api/Ext-method-define\" rel=\"Ext-method-define\" class=\"docClass\">Ext.define</a>('MyApp.CoolPanel', {\n    extend: 'Ext.panel.Panel',\n    alias: ['widget.coolpanel'],\n\n    config: {\n        html : 'Yeah!'\n    }\n});\n\n// Using <a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>\n<a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('widget.coolpanel');\n\n// Using the shorthand for widgets and in xtypes\n<a href=\"#!/api/Ext-method-widget\" rel=\"Ext-method-widget\" class=\"docClass\">Ext.widget</a>('panel', {\n    items: [\n        {xtype: 'coolpanel', html: 'Foo'},\n        {xtype: 'coolpanel', html: 'Bar'}\n    ]\n});\n</code></pre>\n\n<p>For <a href=\"#!/api/Ext.Component\" rel=\"Ext.Component\" class=\"docClass\">Ext.Component</a>, you can also use the <a href=\"#!/api/Ext.Component-cfg-xtype\" rel=\"Ext.Component-cfg-xtype\" class=\"docClass\">Ext.Component.xtype</a> property.</p>\n","id":"cfg-alias","html_type":"String[]"},{"autodetected":{},"type":"String/String[]","short_doc":"Defines alternate names for this class. ...","default":null,"owner":"Ext.Class","tagname":"cfg","files":[{"linenr":1223,"filename":"/Users/yshibukawa/personal/senchatouch/touch-2.3.0/src/core/class/ClassManager.js"}],"name":"alternateClassName","properties":null,"doc":"<p>Defines alternate names for this class.  For example:</p>\n\n<pre class='inline-example '><code><a href=\"#!/api/Ext-method-define\" rel=\"Ext-method-define\" class=\"docClass\">Ext.define</a>('Developer', {\n    alternateClassName: ['Coder', 'Hacker'],\n    code: function(msg) {\n        alert('Typing... ' + msg);\n    }\n});\n\nvar joe = <a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('Developer');\njoe.code('stackoverflow');\n\nvar rms = <a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('Hacker');\nrms.code('hack hack');\n</code></pre>\n","id":"cfg-alternateClassName","html_type":"String/String[]"},{"autodetected":{},"type":"Object","short_doc":"List of configuration options with their default values. ...","default":null,"owner":"Ext.Class","tagname":"cfg","files":[{"linenr":642,"filename":"/Users/yshibukawa/personal/senchatouch/touch-2.3.0/src/core/class/Class.js"}],"name":"config","properties":null,"doc":"<p>List of configuration options with their default values.</p>\n\n<p><strong>Note:</strong> You need to make sure <a href=\"#!/api/Ext.Base-method-initConfig\" rel=\"Ext.Base-method-initConfig\" class=\"docClass\">Ext.Base.initConfig</a> is called from your constructor if you are defining\nyour own class or singleton, unless you are extending a Component. Otherwise the generated getter and setter\nmethods will not be initialized.</p>\n\n<p>Each config item will have its own setter and getter method automatically generated inside the class prototype\nduring class creation time, if the class does not have those methods explicitly defined.</p>\n\n<p>As an example, let's convert the name property of a Person class to be a config item, then add extra age and\ngender items.</p>\n\n<pre><code><a href=\"#!/api/Ext-method-define\" rel=\"Ext-method-define\" class=\"docClass\">Ext.define</a>('My.sample.Person', {\n    config: {\n        name: 'Mr. Unknown',\n        age: 0,\n        gender: 'Male'\n    },\n\n    constructor: function(config) {\n        this.initConfig(config);\n\n        return this;\n    }\n\n    // ...\n});\n</code></pre>\n\n<p>Within the class, this.name still has the default value of \"Mr. Unknown\". However, it's now publicly accessible\nwithout sacrificing encapsulation, via setter and getter methods.</p>\n\n<pre><code>var jacky = new Person({\n    name: \"Jacky\",\n    age: 35\n});\n\nalert(jacky.getAge());      // alerts 35\nalert(jacky.getGender());   // alerts \"Male\"\n\njacky.walk(10);             // alerts \"Jacky is walking 10 steps\"\n\njacky.setName(\"Mr. Nguyen\");\nalert(jacky.getName());     // alerts \"Mr. Nguyen\"\n\njacky.walk(10);             // alerts \"Mr. Nguyen is walking 10 steps\"\n</code></pre>\n\n<p>Notice that we changed the class constructor to invoke this.initConfig() and pass in the provided config object.\nTwo key things happened:</p>\n\n<ul>\n<li>The provided config object when the class is instantiated is recursively merged with the default config object.</li>\n<li>All corresponding setter methods are called with the merged values.</li>\n</ul>\n\n\n<p>Beside storing the given values, throughout the frameworks, setters generally have two key responsibilities:</p>\n\n<ul>\n<li>Filtering / validation / transformation of the given value before it's actually stored within the instance.</li>\n<li>Notification (such as firing events) / post-processing after the value has been set, or changed from a\nprevious value.</li>\n</ul>\n\n\n<p>By standardize this common pattern, the default generated setters provide two extra template methods that you\ncan put your own custom logics into, i.e: an \"applyFoo\" and \"updateFoo\" method for a \"foo\" config item, which are\nexecuted before and after the value is actually set, respectively. Back to the example class, let's validate that\nage must be a valid positive number, and fire an 'agechange' if the value is modified.</p>\n\n<pre><code><a href=\"#!/api/Ext-method-define\" rel=\"Ext-method-define\" class=\"docClass\">Ext.define</a>('My.sample.Person', {\n    config: {\n        // ...\n    },\n\n    constructor: {\n        // ...\n    },\n\n    applyAge: function(age) {\n        if (typeof age !== 'number' || age &lt; 0) {\n            console.warn(\"Invalid age, must be a positive number\");\n            return;\n        }\n\n        return age;\n    },\n\n    updateAge: function(newAge, oldAge) {\n        // age has changed from \"oldAge\" to \"newAge\"\n        this.fireEvent('agechange', this, newAge, oldAge);\n    }\n\n    // ...\n});\n\nvar jacky = new Person({\n    name: \"Jacky\",\n    age: 'invalid'\n});\n\nalert(jacky.getAge());      // alerts 0\n\nalert(jacky.setAge(-100));  // alerts 0\nalert(jacky.getAge());      // alerts 0\n\nalert(jacky.setAge(35));    // alerts 0\nalert(jacky.getAge());      // alerts 35\n</code></pre>\n\n<p>In other words, when leveraging the config feature, you mostly never need to define setter and getter methods\nexplicitly. Instead, \"apply<em>\" and \"update</em>\" methods should be implemented where necessary. Your code will be\nconsistent throughout and only contain the minimal logic that you actually care about.</p>\n\n<p>When it comes to inheritance, the default config of the parent class is automatically, recursively merged with\nthe child's default config. The same applies for mixins.</p>\n","id":"cfg-config","html_type":"Object"},{"autodetected":{},"type":"String","short_doc":"The parent class that this class extends. ...","default":null,"owner":"Ext.Class","tagname":"cfg","files":[{"linenr":412,"filename":"/Users/yshibukawa/personal/senchatouch/touch-2.3.0/src/core/class/Class.js"}],"name":"extend","properties":null,"doc":"<p>The parent class that this class extends. For example:</p>\n\n<pre class='inline-example '><code><a href=\"#!/api/Ext-method-define\" rel=\"Ext-method-define\" class=\"docClass\">Ext.define</a>('Person', {\n    say: function(text) {\n        alert(text);\n    }\n});\n\n<a href=\"#!/api/Ext-method-define\" rel=\"Ext-method-define\" class=\"docClass\">Ext.define</a>('Developer', {\n    extend: 'Person',\n    say: function(text) {\n        this.callParent([\"print \" + text]);\n    }\n});\n\nvar person1 = <a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>(\"Person\");\nperson1.say(\"Bill\");\n\nvar developer1 = <a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>(\"Developer\");\ndeveloper1.say(\"Ted\");\n</code></pre>\n","id":"cfg-extend","html_type":"String"},{"autodetected":{},"type":"Object","short_doc":"List of inheritable static methods for this class. ...","default":null,"owner":"Ext.Class","tagname":"cfg","files":[{"linenr":489,"filename":"/Users/yshibukawa/personal/senchatouch/touch-2.3.0/src/core/class/Class.js"}],"name":"inheritableStatics","properties":null,"doc":"<p>List of inheritable static methods for this class.\nOtherwise just like <a href=\"#!/api/Ext.Class-cfg-statics\" rel=\"Ext.Class-cfg-statics\" class=\"docClass\">statics</a> but subclasses inherit these methods.</p>\n","id":"cfg-inheritableStatics","html_type":"Object"},{"autodetected":{},"type":"Object","short_doc":"List of classes to mix into this class. ...","default":null,"owner":"Ext.Class","tagname":"cfg","files":[{"linenr":793,"filename":"/Users/yshibukawa/personal/senchatouch/touch-2.3.0/src/core/class/Class.js"}],"name":"mixins","properties":null,"doc":"<p>List of classes to mix into this class. For example:</p>\n\n<pre><code><a href=\"#!/api/Ext-method-define\" rel=\"Ext-method-define\" class=\"docClass\">Ext.define</a>('CanSing', {\n     sing: function() {\n         alert(\"I'm on the highway to hell...\");\n     }\n});\n\n<a href=\"#!/api/Ext-method-define\" rel=\"Ext-method-define\" class=\"docClass\">Ext.define</a>('Musician', {\n     extend: 'Person',\n\n     mixins: {\n         canSing: 'CanSing'\n     }\n});\n</code></pre>\n","id":"cfg-mixins","html_type":"Object"},{"autodetected":{},"type":"Object","short_doc":"Allows for setting default config values on specific platforms or themes\n\nExt.define('MyComponent', {\n     config: {\n...","default":null,"owner":"Ext.Class","tagname":"cfg","files":[{"linenr":502,"filename":"/Users/yshibukawa/personal/senchatouch/touch-2.3.0/src/core/class/Class.js"}],"name":"platformConfig","properties":null,"doc":"<p>Allows for setting default config values on specific platforms or themes</p>\n\n<pre><code><a href=\"#!/api/Ext-method-define\" rel=\"Ext-method-define\" class=\"docClass\">Ext.define</a>('MyComponent', {\n     config: {\n         top: 0\n     },\n\n     platformConfig: [{\n         platform: ['ie10'],\n         theme: ['Windows'],\n         top: null,\n         bottom: 0\n     }]\n});\n</code></pre>\n","id":"cfg-platformConfig","html_type":"Object"},{"autodetected":{},"type":"Boolean","short_doc":"When set to true, the class will be instantiated as singleton. ...","default":null,"owner":"Ext.Class","tagname":"cfg","files":[{"linenr":1202,"filename":"/Users/yshibukawa/personal/senchatouch/touch-2.3.0/src/core/class/ClassManager.js"}],"name":"singleton","properties":null,"doc":"<p>When set to true, the class will be instantiated as singleton.  For example:</p>\n\n<pre><code><a href=\"#!/api/Ext-method-define\" rel=\"Ext-method-define\" class=\"docClass\">Ext.define</a>('Logger', {\n    singleton: true,\n    log: function(msg) {\n        console.log(msg);\n    }\n});\n\nLogger.log('Hello');\n</code></pre>\n","id":"cfg-singleton","html_type":"Boolean"},{"autodetected":{},"type":"Object","short_doc":"List of static methods for this class. ...","default":null,"owner":"Ext.Class","tagname":"cfg","files":[{"linenr":462,"filename":"/Users/yshibukawa/personal/senchatouch/touch-2.3.0/src/core/class/Class.js"}],"name":"statics","properties":null,"doc":"<p>List of static methods for this class. For example:</p>\n\n<pre><code><a href=\"#!/api/Ext-method-define\" rel=\"Ext-method-define\" class=\"docClass\">Ext.define</a>('Computer', {\n     statics: {\n         factory: function(brand) {\n             // 'this' in static methods refer to the class itself\n             return new this(brand);\n         }\n     },\n\n     constructor: function() {\n         // ...\n     }\n});\n\nvar dellComputer = Computer.factory('Dell');\n</code></pre>\n","id":"cfg-statics","html_type":"Object"},{"autodetected":{},"type":"String[]","short_doc":"List of optional classes to load together with this class. ...","default":null,"owner":"Ext.Class","tagname":"cfg","files":[{"linenr":1264,"filename":"/Users/yshibukawa/personal/senchatouch/touch-2.3.0/src/core/class/Loader.js"}],"name":"uses","properties":null,"doc":"<p>List of optional classes to load together with this class. These aren't necessarily loaded before\nthis class is created, but are guaranteed to be available before <a href=\"#!/api/Ext-method-onReady\" rel=\"Ext-method-onReady\" class=\"docClass\">Ext.onReady</a> listeners are\ninvoked</p>\n","id":"cfg-uses","html_type":"String[]"},{"autodetected":{"type":true,"default":true,"inheritable":true,"readonly":true,"inheritdoc":true,"linenr":true},"type":"Object","short_doc":" ...","default":"{}","owner":"Ext.Class","inheritable":null,"readonly":null,"tagname":"property","files":[{"linenr":304,"filename":"/Users/yshibukawa/personal/senchatouch/touch-2.3.0/src/core/class/Class.js"}],"private":true,"static":true,"name":"configNameCache","doc":"\n","inheritdoc":null,"id":"static-property-configNameCache","html_type":"Object","linenr":null},{"autodetected":{"type":true,"default":true,"inheritable":true,"readonly":true,"inheritdoc":true,"linenr":true},"type":"Array","short_doc":" ...","default":"[]","owner":"Ext.Class","inheritable":null,"readonly":null,"tagname":"property","files":[{"linenr":225,"filename":"/Users/yshibukawa/personal/senchatouch/touch-2.3.0/src/core/class/Class.js"}],"private":true,"static":true,"name":"defaultPreprocessors","doc":"\n","inheritdoc":null,"id":"static-property-defaultPreprocessors","html_type":"Array","linenr":null},{"autodetected":{"type":true,"default":true,"inheritable":true,"readonly":true,"inheritdoc":true,"linenr":true},"type":"Object","short_doc":" ...","default":"{}","owner":"Ext.Class","inheritable":null,"readonly":null,"tagname":"property","files":[{"linenr":151,"filename":"/Users/yshibukawa/personal/senchatouch/touch-2.3.0/src/core/class/Class.js"}],"private":true,"static":true,"name":"preprocessors","doc":"\n","inheritdoc":null,"id":"static-property-preprocessors","html_type":"Object","linenr":null},{"autodetected":{},"short_doc":"Creates a new anonymous class. ...","owner":"Ext.Class","params":[{"type":"Object","tagname":"params","doc":"<p>An object represent the properties of this class.</p>\n","name":"data","html_type":"Object"},{"type":"Function","tagname":"params","doc":"<p>The callback function to be executed when this class is fully created.\nNote that the creation process can be asynchronous depending on the pre-processors used.</p>\n","name":"onCreated","optional":true,"html_type":"Function"}],"tagname":"method","files":[{"linenr":36,"filename":"/Users/yshibukawa/personal/senchatouch/touch-2.3.0/src/core/class/Class.js"}],"return":{"type":"Ext.Base","properties":null,"doc":"<p>The newly created class</p>\n","name":"return","html_type":"<a href=\"#!/api/Ext.Base\" rel=\"Ext.Base\" class=\"docClass\">Ext.Base</a>"},"name":"constructor","doc":"<p>Creates a new anonymous class.</p>\n","id":"method-constructor"},{"autodetected":{"method_calls":true,"inheritable":true,"params":true,"chainable":true,"inheritdoc":true,"linenr":true,"fires":true},"short_doc":" ...","method_calls":null,"owner":"Ext.Class","inheritable":null,"params":[{"type":"Object","name":"Class","html_type":"Object"}],"tagname":"method","files":[{"linenr":75,"filename":"/Users/yshibukawa/personal/senchatouch/touch-2.3.0/src/core/class/Class.js"}],"private":true,"static":true,"name":"create","doc":"\n","chainable":false,"inheritdoc":null,"id":"static-method-create","fires":null,"linenr":null},{"autodetected":{"method_calls":true,"inheritable":true,"params":true,"chainable":true,"inheritdoc":true,"linenr":true,"fires":true},"short_doc":" ...","method_calls":null,"owner":"Ext.Class","inheritable":null,"params":[{"type":"Object","name":"nameMap","html_type":"Object"}],"tagname":"method","files":[{"linenr":399,"filename":"/Users/yshibukawa/personal/senchatouch/touch-2.3.0/src/core/class/Class.js"}],"private":true,"static":true,"name":"generateGetter","doc":"\n","chainable":false,"inheritdoc":null,"id":"static-method-generateGetter","fires":null,"linenr":null},{"autodetected":{"method_calls":true,"inheritable":true,"params":true,"chainable":true,"inheritdoc":true,"linenr":true,"fires":true},"short_doc":" ...","method_calls":null,"owner":"Ext.Class","inheritable":null,"params":[{"type":"Object","name":"nameMap","html_type":"Object"}],"tagname":"method","files":[{"linenr":378,"filename":"/Users/yshibukawa/personal/senchatouch/touch-2.3.0/src/core/class/Class.js"}],"private":true,"static":true,"name":"generateInitGetter","doc":"\n","chainable":false,"inheritdoc":null,"id":"static-method-generateInitGetter","fires":null,"linenr":null},{"autodetected":{"method_calls":true,"inheritable":true,"params":true,"chainable":true,"inheritdoc":true,"linenr":true,"fires":true},"short_doc":" ...","method_calls":null,"owner":"Ext.Class","inheritable":null,"params":[{"type":"Object","name":"nameMap","html_type":"Object"}],"tagname":"method","files":[{"linenr":339,"filename":"/Users/yshibukawa/personal/senchatouch/touch-2.3.0/src/core/class/Class.js"}],"private":true,"static":true,"name":"generateSetter","doc":"\n","chainable":false,"inheritdoc":null,"id":"static-method-generateSetter","fires":null,"linenr":null},{"autodetected":{"method_calls":true,"inheritable":true,"params":true,"chainable":true,"inheritdoc":true,"linenr":true,"fires":true},"short_doc":" ...","method_calls":null,"owner":"Ext.Class","inheritable":null,"params":[{"type":"Object","name":"name","html_type":"Object"}],"tagname":"method","files":[{"linenr":310,"filename":"/Users/yshibukawa/personal/senchatouch/touch-2.3.0/src/core/class/Class.js"}],"private":true,"static":true,"name":"getConfigNameMap","doc":"\n","chainable":false,"inheritdoc":null,"id":"static-method-getConfigNameMap","fires":null,"linenr":null},{"autodetected":{"method_calls":true,"inheritable":true,"params":true,"chainable":true,"inheritdoc":true,"linenr":true,"fires":true},"short_doc":"Retrieve the array stack of default pre-processors. ...","method_calls":null,"owner":"Ext.Class","inheritable":null,"params":[],"tagname":"method","files":[{"linenr":231,"filename":"/Users/yshibukawa/personal/senchatouch/touch-2.3.0/src/core/class/Class.js"}],"return":{"type":"Function","properties":null,"doc":"<p>defaultPreprocessors</p>\n","name":"return","html_type":"Function"},"private":true,"static":true,"name":"getDefaultPreprocessors","doc":"<p>Retrieve the array stack of default pre-processors.</p>\n","chainable":false,"inheritdoc":null,"id":"static-method-getDefaultPreprocessors","fires":null,"linenr":null},{"autodetected":{"method_calls":true,"inheritable":true,"chainable":true,"inheritdoc":true,"linenr":true,"fires":true},"short_doc":"Retrieve a pre-processor callback function by its name, which has been registered before. ...","method_calls":null,"owner":"Ext.Class","inheritable":null,"params":[{"type":"String","tagname":"params","doc":"\n","name":"name","html_type":"String"}],"tagname":"method","files":[{"linenr":205,"filename":"/Users/yshibukawa/personal/senchatouch/touch-2.3.0/src/core/class/Class.js"}],"return":{"type":"Function","properties":null,"doc":"<p>preprocessor</p>\n","name":"return","html_type":"Function"},"private":true,"static":true,"name":"getPreprocessor","doc":"<p>Retrieve a pre-processor callback function by its name, which has been registered before.</p>\n","chainable":false,"inheritdoc":null,"id":"static-method-getPreprocessor","fires":null,"linenr":null},{"autodetected":{"method_calls":true,"inheritable":true,"params":true,"chainable":true,"inheritdoc":true,"linenr":true,"fires":true},"short_doc":" ...","method_calls":null,"owner":"Ext.Class","inheritable":null,"params":[],"tagname":"method","files":[{"linenr":217,"filename":"/Users/yshibukawa/personal/senchatouch/touch-2.3.0/src/core/class/Class.js"}],"private":true,"static":true,"name":"getPreprocessors","doc":"\n","chainable":false,"inheritdoc":null,"id":"static-method-getPreprocessors","fires":null,"linenr":null},{"autodetected":{"method_calls":true,"inheritable":true,"params":true,"chainable":true,"inheritdoc":true,"linenr":true,"fires":true},"short_doc":" ...","method_calls":null,"owner":"Ext.Class","inheritable":null,"params":[{"type":"Object","name":"Class","html_type":"Object"},{"type":"Object","name":"data","html_type":"Object"},{"type":"Object","name":"hooks","html_type":"Object"}],"tagname":"method","files":[{"linenr":65,"filename":"/Users/yshibukawa/personal/senchatouch/touch-2.3.0/src/core/class/Class.js"}],"private":true,"static":true,"name":"onBeforeCreated","doc":"\n","chainable":false,"inheritdoc":null,"id":"static-method-onBeforeCreated","fires":null,"linenr":null},{"autodetected":{"method_calls":true,"inheritable":true,"params":true,"chainable":true,"inheritdoc":true,"linenr":true,"fires":true},"short_doc":" ...","method_calls":null,"owner":"Ext.Class","inheritable":null,"params":[{"type":"Object","name":"Class","html_type":"Object"},{"type":"Object","name":"data","html_type":"Object"},{"type":"Object","name":"onCreated","html_type":"Object"}],"tagname":"method","files":[{"linenr":96,"filename":"/Users/yshibukawa/personal/senchatouch/touch-2.3.0/src/core/class/Class.js"}],"private":true,"static":true,"name":"process","doc":"\n","chainable":false,"inheritdoc":null,"id":"static-method-process","fires":null,"linenr":null},{"autodetected":{"method_calls":true,"inheritable":true,"chainable":true,"inheritdoc":true,"linenr":true,"fires":true},"short_doc":"Register a new pre-processor to be used during the class creation process. ...","method_calls":["setDefaultPreprocessorPosition"],"owner":"Ext.Class","inheritable":null,"params":[{"type":"String","tagname":"params","doc":"<p>The pre-processor's name.</p>\n","name":"name","html_type":"String"},{"type":"Function","tagname":"params","properties":[{"type":"Function","tagname":"params","doc":"<p>The created class.</p>\n","name":"cls","html_type":"Function"},{"type":"Object","tagname":"params","doc":"<p>The set of properties passed in <a href=\"#!/api/Ext.Class\" rel=\"Ext.Class\" class=\"docClass\">Ext.Class</a> constructor.</p>\n","name":"data","html_type":"Object"},{"type":"Function","tagname":"params","doc":"<p>The callback function that <strong>must</strong> to be executed when this\npre-processor finishes, regardless of whether the processing is synchronous or\nasynchronous.</p>\n","name":"fn","html_type":"Function"}],"doc":"<p>The callback function to be executed. Typical format:</p>\n\n<pre><code>function(cls, data, fn) {\n    // Your code here\n\n    // Execute this when the processing is finished.\n    // Asynchronous processing is perfectly OK\n    if (fn) {\n        fn.call(this, cls, data);\n    }\n});\n</code></pre>\n","name":"fn","html_type":"Function"},{"type":"String[]","tagname":"params","doc":"\n","name":"properties","optional":true,"html_type":"String[]"},{"type":"String","tagname":"params","doc":"\n","name":"position","optional":true,"html_type":"String"},{"type":"Object","tagname":"params","doc":"\n","name":"relativeTo","optional":true,"html_type":"Object"}],"tagname":"method","files":[{"linenr":157,"filename":"/Users/yshibukawa/personal/senchatouch/touch-2.3.0/src/core/class/Class.js"}],"return":{"type":"Ext.Class","properties":null,"doc":"<p>this</p>\n","name":"return","html_type":"<a href=\"#!/api/Ext.Class\" rel=\"Ext.Class\" class=\"docClass\">Ext.Class</a>"},"private":true,"static":true,"name":"registerPreprocessor","doc":"<p>Register a new pre-processor to be used during the class creation process.</p>\n","chainable":true,"inheritdoc":null,"id":"static-method-registerPreprocessor","fires":null,"linenr":null},{"autodetected":{"method_calls":true,"inheritable":true,"chainable":true,"inheritdoc":true,"linenr":true,"fires":true},"short_doc":"Insert this pre-processor at a specific position in the stack, optionally relative to\nany existing pre-processor. ...","method_calls":null,"owner":"Ext.Class","inheritable":null,"params":[{"type":"String","tagname":"params","doc":"<p>The pre-processor name. Note that it needs to be registered with\n<a href=\"#!/api/Ext.Class-static-method-registerPreprocessor\" rel=\"Ext.Class-static-method-registerPreprocessor\" class=\"docClass\">registerPreprocessor</a> before this.</p>\n","name":"name","html_type":"String"},{"type":"String","tagname":"params","doc":"<p>The insertion position. Four possible values are:\n'first', 'last', or: 'before', 'after' (relative to the name provided in the third argument).</p>\n","name":"offset","html_type":"String"},{"type":"String","tagname":"params","doc":"\n","name":"relativeName","html_type":"String"}],"tagname":"method","files":[{"linenr":255,"filename":"/Users/yshibukawa/personal/senchatouch/touch-2.3.0/src/core/class/Class.js"}],"return":{"type":"Ext.Class","properties":null,"doc":"<p>this</p>\n","name":"return","html_type":"<a href=\"#!/api/Ext.Class\" rel=\"Ext.Class\" class=\"docClass\">Ext.Class</a>"},"private":true,"static":true,"name":"setDefaultPreprocessorPosition","doc":"<p>Insert this pre-processor at a specific position in the stack, optionally relative to\nany existing pre-processor. For example:</p>\n\n<pre><code><a href=\"#!/api/Ext.Class-static-method-registerPreprocessor\" rel=\"Ext.Class-static-method-registerPreprocessor\" class=\"docClass\">Ext.Class.registerPreprocessor</a>('debug', function(cls, data, fn) {\n    // Your code here\n\n    if (fn) {\n        fn.call(this, cls, data);\n    }\n}).insertDefaultPreprocessor('debug', 'last');\n</code></pre>\n","chainable":true,"inheritdoc":null,"id":"static-method-setDefaultPreprocessorPosition","fires":null,"linenr":null},{"autodetected":{"method_calls":true,"inheritable":true,"chainable":true,"inheritdoc":true,"linenr":true,"fires":true},"short_doc":"Set the default array stack of default pre-processors. ...","method_calls":null,"owner":"Ext.Class","inheritable":null,"params":[{"type":"Array","tagname":"params","doc":"\n","name":"preprocessors","html_type":"Array"}],"tagname":"method","files":[{"linenr":241,"filename":"/Users/yshibukawa/personal/senchatouch/touch-2.3.0/src/core/class/Class.js"}],"return":{"type":"Ext.Class","properties":null,"doc":"<p>this</p>\n","name":"return","html_type":"<a href=\"#!/api/Ext.Class\" rel=\"Ext.Class\" class=\"docClass\">Ext.Class</a>"},"private":true,"static":true,"name":"setDefaultPreprocessors","doc":"<p>Set the default array stack of default pre-processors.</p>\n","chainable":true,"inheritdoc":null,"id":"static-method-setDefaultPreprocessors","fires":null,"linenr":null}],"author":[{"email":"jacky@sencha.com","tagname":"author","name":"Jacky Nguyen"}],"alternateClassNames":[],"doc":"<p>Handles class creation throughout the framework. This is a low level factory that is used by <a href=\"#!/api/Ext.ClassManager\" rel=\"Ext.ClassManager\" class=\"docClass\">Ext.ClassManager</a> and generally\nshould not be used directly. If you choose to use <a href=\"#!/api/Ext.Class\" rel=\"Ext.Class\" class=\"docClass\">Ext.Class</a> you will lose out on the namespace, aliasing and dependency loading\nfeatures made available by <a href=\"#!/api/Ext.ClassManager\" rel=\"Ext.ClassManager\" class=\"docClass\">Ext.ClassManager</a>. The only time you would use <a href=\"#!/api/Ext.Class\" rel=\"Ext.Class\" class=\"docClass\">Ext.Class</a> directly is to create an anonymous class.</p>\n\n<p>If you wish to create a class you should use <a href=\"#!/api/Ext-method-define\" rel=\"Ext-method-define\" class=\"docClass\">Ext.define</a> which aliases\n<a href=\"#!/api/Ext.ClassManager-method-create\" rel=\"Ext.ClassManager-method-create\" class=\"docClass\">Ext.ClassManager.create</a> to enable namespacing and dynamic dependency resolution.</p>\n\n<p><a href=\"#!/api/Ext.Class\" rel=\"Ext.Class\" class=\"docClass\">Ext.Class</a> is the factory and <strong>not</strong> the superclass of everything. For the base class that <strong>all</strong> Ext classes inherit\nfrom, see <a href=\"#!/api/Ext.Base\" rel=\"Ext.Base\" class=\"docClass\">Ext.Base</a>.</p>\n","name":"Ext.Class","id":"class-Ext.Class"}