{"autodetected":{},"short_doc":"The DomHelper class provides a layer of abstraction from DOM and transparently supports creating elements via DOM or\n...","aliases":{},"files":[{"linenr":5,"filename":"/Users/yshibukawa/personal/senchatouch/touch-2.3.0/src/dom/Helper.js"}],"tagname":"class","members":[{"autodetected":{"type":true,"default":true,"inheritable":true,"readonly":true,"tagname":"property","static":true,"private":true,"inheritdoc":true,"linenr":true},"type":"Object","short_doc":" ...","default":"{cls: 'class', htmlFor: 'for'}","owner":"Ext.DomHelper","inheritable":null,"readonly":null,"tagname":"property","files":[{"linenr":136,"filename":"/Users/yshibukawa/personal/senchatouch/touch-2.3.0/src/dom/Helper.js"}],"private":true,"static":null,"name":"attribXlat","doc":"\n","inheritdoc":null,"id":"property-attribXlat","html_type":"Object","linenr":136},{"autodetected":{"type":true,"default":true,"inheritable":true,"readonly":true,"tagname":"property","static":true,"private":true,"inheritdoc":true,"linenr":true},"type":"Object","short_doc":" ...","default":"{}","owner":"Ext.DomHelper","inheritable":null,"readonly":null,"tagname":"property","files":[{"linenr":138,"filename":"/Users/yshibukawa/personal/senchatouch/touch-2.3.0/src/dom/Helper.js"}],"private":true,"static":null,"name":"closeTags","doc":"\n","inheritdoc":null,"id":"property-closeTags","html_type":"Object","linenr":138},{"autodetected":{"type":true,"default":true,"inheritable":true,"readonly":true,"tagname":"property","static":true,"private":true,"inheritdoc":true,"linenr":true},"type":"RegExp","short_doc":" ...","default":"/tag|children|cn|html|tpl|tplData$/i","owner":"Ext.DomHelper","inheritable":null,"readonly":null,"tagname":"property","files":[{"linenr":133,"filename":"/Users/yshibukawa/personal/senchatouch/touch-2.3.0/src/dom/Helper.js"}],"private":true,"static":null,"name":"confRe","doc":"\n","inheritdoc":null,"id":"property-confRe","html_type":"RegExp","linenr":133},{"autodetected":{"type":true,"default":true,"inheritable":true,"readonly":true,"tagname":"property","static":true,"private":true,"inheritdoc":true,"linenr":true},"type":"Object","default":null,"owner":"Ext.DomHelper","inheritable":null,"readonly":null,"tagname":"property","files":[{"linenr":140,"filename":"/Users/yshibukawa/personal/senchatouch/touch-2.3.0/src/dom/Helper.js"}],"private":true,"static":null,"name":"decamelizeName","doc":"\n","inheritdoc":null,"id":"property-decamelizeName","html_type":"Object","linenr":140},{"autodetected":{"type":true,"default":true,"inheritable":true,"readonly":true,"tagname":"property","static":true,"private":true,"inheritdoc":true,"linenr":true},"type":"RegExp","short_doc":" ...","default":"/^(?:br|frame|hr|img|input|link|meta|range|spacer|wbr|area|param|col)$/i","owner":"Ext.DomHelper","inheritable":null,"readonly":null,"tagname":"property","files":[{"linenr":132,"filename":"/Users/yshibukawa/personal/senchatouch/touch-2.3.0/src/dom/Helper.js"}],"private":true,"static":null,"name":"emptyTags","doc":"\n","inheritdoc":null,"id":"property-emptyTags","html_type":"RegExp","linenr":132},{"autodetected":{"type":true,"default":true,"inheritable":true,"readonly":true,"tagname":"property","static":true,"private":true,"inheritdoc":true,"linenr":true},"type":"RegExp","short_doc":" ...","default":"/end/i","owner":"Ext.DomHelper","inheritable":null,"readonly":null,"tagname":"property","files":[{"linenr":134,"filename":"/Users/yshibukawa/personal/senchatouch/touch-2.3.0/src/dom/Helper.js"}],"private":true,"static":null,"name":"endRe","doc":"\n","inheritdoc":null,"id":"property-endRe","html_type":"RegExp","linenr":134},{"autodetected":{"method_calls":true,"inheritable":true,"static":true,"private":true,"chainable":true,"inheritdoc":true,"linenr":true,"fires":true},"short_doc":"Creates new DOM element(s) and appends them to el. ...","method_calls":["doInsert"],"owner":"Ext.DomHelper","inheritable":null,"params":[{"type":"String/HTMLElement/Ext.Element","tagname":"params","doc":"<p>The context element</p>\n","name":"el","html_type":"String/HTMLElement/<a href=\"#!/api/Ext.dom.Element\" rel=\"Ext.dom.Element\" class=\"docClass\">Ext.Element</a>"},{"type":"Object/String","tagname":"params","doc":"<p>The DOM object spec (and children) or raw HTML blob</p>\n","name":"o","html_type":"Object/String"},{"type":"Boolean","tagname":"params","doc":"<p>true to return a <a href=\"#!/api/Ext.dom.Element\" rel=\"Ext.dom.Element\" class=\"docClass\">Ext.Element</a></p>\n","name":"returnElement","optional":true,"html_type":"Boolean"}],"tagname":"method","files":[{"linenr":406,"filename":"/Users/yshibukawa/personal/senchatouch/touch-2.3.0/src/dom/Helper.js"}],"return":{"type":"HTMLElement/Ext.Element","properties":null,"doc":"<p>The new node</p>\n","name":"return","html_type":"HTMLElement/<a href=\"#!/api/Ext.dom.Element\" rel=\"Ext.dom.Element\" class=\"docClass\">Ext.Element</a>"},"private":null,"static":null,"name":"append","doc":"<p>Creates new DOM element(s) and appends them to el.</p>\n","chainable":false,"inheritdoc":null,"id":"method-append","fires":[],"linenr":null},{"autodetected":{"method_calls":true,"inheritable":true,"static":true,"private":true,"chainable":true,"inheritdoc":true,"linenr":true,"fires":true},"short_doc":"Applies a style specification to an element. ...","method_calls":null,"owner":"Ext.DomHelper","inheritable":null,"params":[{"type":"String/HTMLElement","tagname":"params","doc":"<p>The element to apply styles to</p>\n","name":"el","html_type":"String/HTMLElement"},{"type":"String/Object/Function","tagname":"params","doc":"<p>A style specification string e.g. 'width:100px', or object in the form {width:'100px'}, or\na function which returns such a specification.</p>\n","name":"styles","html_type":"String/Object/Function"}],"tagname":"method","files":[{"linenr":265,"filename":"/Users/yshibukawa/personal/senchatouch/touch-2.3.0/src/dom/Helper.js"}],"private":null,"static":null,"name":"applyStyles","doc":"<p>Applies a style specification to an element.</p>\n","chainable":false,"inheritdoc":null,"id":"method-applyStyles","fires":null,"linenr":null},{"autodetected":{"method_calls":true,"inheritable":true,"params":true,"static":true,"chainable":true,"inheritdoc":true,"linenr":true,"fires":true},"short_doc":"Fix for browsers which no longer support createContextualFragment ...","method_calls":null,"owner":"Ext.DomHelper","inheritable":null,"params":[{"type":"Object","name":"html","html_type":"Object"}],"tagname":"method","files":[{"linenr":275,"filename":"/Users/yshibukawa/personal/senchatouch/touch-2.3.0/src/dom/Helper.js"}],"private":true,"static":null,"name":"createContextualFragment","doc":"<p>Fix for browsers which no longer support createContextualFragment</p>\n","chainable":false,"inheritdoc":null,"id":"method-createContextualFragment","fires":null,"linenr":null},{"autodetected":{"method_calls":true,"inheritable":true,"static":true,"private":true,"chainable":true,"inheritdoc":true,"linenr":true,"fires":true},"short_doc":"Creates a new Ext.Template from the DOM object spec. ...","method_calls":["markup"],"owner":"Ext.DomHelper","inheritable":null,"params":[{"type":"Object","tagname":"params","doc":"<p>The DOM object spec (and children)</p>\n","name":"o","html_type":"Object"}],"tagname":"method","files":[{"linenr":435,"filename":"/Users/yshibukawa/personal/senchatouch/touch-2.3.0/src/dom/Helper.js"}],"return":{"type":"Ext.Template","properties":null,"doc":"<p>The new template</p>\n","name":"return","html_type":"<a href=\"#!/api/Ext.Template\" rel=\"Ext.Template\" class=\"docClass\">Ext.Template</a>"},"private":null,"static":null,"name":"createTemplate","doc":"<p>Creates a new <a href=\"#!/api/Ext.Template\" rel=\"Ext.Template\" class=\"docClass\">Ext.Template</a> from the DOM object spec.</p>\n","chainable":false,"inheritdoc":null,"id":"method-createTemplate","fires":[],"linenr":null},{"autodetected":{"method_calls":true,"inheritable":true,"params":true,"tagname":"method","static":true,"private":true,"chainable":true,"inheritdoc":true,"linenr":true,"fires":true},"short_doc":" ...","method_calls":["insertHtml","markup"],"owner":"Ext.DomHelper","inheritable":null,"params":[{"type":"Object","name":"el","html_type":"Object"},{"type":"Object","name":"o","html_type":"Object"},{"type":"Object","name":"returnElement","html_type":"Object"},{"type":"Object","name":"pos","html_type":"Object"}],"tagname":"method","files":[{"linenr":430,"filename":"/Users/yshibukawa/personal/senchatouch/touch-2.3.0/src/dom/Helper.js"}],"private":true,"static":null,"name":"doInsert","doc":"\n","chainable":false,"inheritdoc":null,"id":"method-doInsert","fires":[],"linenr":430},{"autodetected":{"method_calls":true,"inheritable":true,"params":true,"tagname":"method","static":true,"private":true,"chainable":true,"inheritdoc":true,"linenr":true,"fires":true},"short_doc":" ...","method_calls":["generateMarkup","generateStyles"],"owner":"Ext.DomHelper","inheritable":null,"params":[{"type":"Object","name":"spec","html_type":"Object"},{"type":"Object","name":"buffer","html_type":"Object"}],"tagname":"method","files":[{"linenr":153,"filename":"/Users/yshibukawa/personal/senchatouch/touch-2.3.0/src/dom/Helper.js"}],"private":true,"static":null,"name":"generateMarkup","doc":"\n","chainable":false,"inheritdoc":null,"id":"method-generateMarkup","fires":[],"linenr":153},{"autodetected":{"method_calls":true,"inheritable":true,"static":true,"private":true,"chainable":true,"inheritdoc":true,"linenr":true,"fires":true},"short_doc":"Converts the styles from the given object to text. ...","method_calls":["decamelizeName"],"owner":"Ext.DomHelper","inheritable":null,"params":[{"type":"Object","tagname":"params","doc":"<p>The object describing the styles.</p>\n","name":"styles","html_type":"Object"},{"type":"String[]","tagname":"params","doc":"<p>The output buffer.</p>\n","name":"buffer","optional":true,"html_type":"String[]"}],"tagname":"method","files":[{"linenr":209,"filename":"/Users/yshibukawa/personal/senchatouch/touch-2.3.0/src/dom/Helper.js"}],"return":{"type":"String/String[]","properties":null,"doc":"<p>If buffer is passed, it is returned. Otherwise the style\nstring is returned.</p>\n","name":"return","html_type":"String/String[]"},"private":null,"static":null,"name":"generateStyles","doc":"<p>Converts the styles from the given object to text. The styles are CSS style names\nwith their associated value.</p>\n\n<p>The basic form of this method returns a string:</p>\n\n<pre><code> var s = <a href=\"#!/api/Ext.DomHelper-method-generateStyles\" rel=\"Ext.DomHelper-method-generateStyles\" class=\"docClass\">Ext.DomHelper.generateStyles</a>({\n     backgroundColor: 'red'\n });\n\n // s = 'background-color:red;'\n</code></pre>\n\n<p>Alternatively, this method can append to an output array.</p>\n\n<pre><code> var buf = [];\n\n // ...\n\n <a href=\"#!/api/Ext.DomHelper-method-generateStyles\" rel=\"Ext.DomHelper-method-generateStyles\" class=\"docClass\">Ext.DomHelper.generateStyles</a>({\n     backgroundColor: 'red'\n }, buf);\n</code></pre>\n\n<p>In this case, the style text is pushed on to the array and the array is returned.</p>\n","chainable":false,"inheritdoc":null,"id":"method-generateStyles","fires":[],"linenr":null},{"autodetected":{"method_calls":true,"inheritable":true,"static":true,"private":true,"chainable":true,"inheritdoc":true,"linenr":true,"fires":true},"short_doc":"Creates new DOM element(s) and inserts them after el. ...","method_calls":["doInsert"],"owner":"Ext.DomHelper","inheritable":null,"params":[{"type":"String/HTMLElement/Ext.Element","tagname":"params","doc":"<p>The context element</p>\n","name":"el","html_type":"String/HTMLElement/<a href=\"#!/api/Ext.dom.Element\" rel=\"Ext.dom.Element\" class=\"docClass\">Ext.Element</a>"},{"type":"Object","tagname":"params","doc":"<p>The DOM object spec (and children)</p>\n","name":"o","html_type":"Object"},{"type":"Boolean","tagname":"params","doc":"<p>true to return a <a href=\"#!/api/Ext.dom.Element\" rel=\"Ext.dom.Element\" class=\"docClass\">Ext.Element</a></p>\n","name":"returnElement","optional":true,"html_type":"Boolean"}],"tagname":"method","files":[{"linenr":384,"filename":"/Users/yshibukawa/personal/senchatouch/touch-2.3.0/src/dom/Helper.js"}],"return":{"type":"HTMLElement/Ext.Element","properties":null,"doc":"<p>The new node</p>\n","name":"return","html_type":"HTMLElement/<a href=\"#!/api/Ext.dom.Element\" rel=\"Ext.dom.Element\" class=\"docClass\">Ext.Element</a>"},"private":null,"static":null,"name":"insertAfter","doc":"<p>Creates new DOM element(s) and inserts them after el.</p>\n","chainable":false,"inheritdoc":null,"id":"method-insertAfter","fires":[],"linenr":null},{"autodetected":{"method_calls":true,"inheritable":true,"static":true,"private":true,"chainable":true,"inheritdoc":true,"linenr":true,"fires":true},"short_doc":"Creates new DOM element(s) and inserts them before el. ...","method_calls":["doInsert"],"owner":"Ext.DomHelper","inheritable":null,"params":[{"type":"String/HTMLElement/Ext.Element","tagname":"params","doc":"<p>The context element</p>\n","name":"el","html_type":"String/HTMLElement/<a href=\"#!/api/Ext.dom.Element\" rel=\"Ext.dom.Element\" class=\"docClass\">Ext.Element</a>"},{"type":"Object/String","tagname":"params","doc":"<p>The DOM object spec (and children) or raw HTML blob</p>\n","name":"o","html_type":"Object/String"},{"type":"Boolean","tagname":"params","doc":"<p>true to return a <a href=\"#!/api/Ext.dom.Element\" rel=\"Ext.dom.Element\" class=\"docClass\">Ext.Element</a></p>\n","name":"returnElement","optional":true,"html_type":"Boolean"}],"tagname":"method","files":[{"linenr":373,"filename":"/Users/yshibukawa/personal/senchatouch/touch-2.3.0/src/dom/Helper.js"}],"return":{"type":"HTMLElement/Ext.Element","properties":null,"doc":"<p>The new node</p>\n","name":"return","html_type":"HTMLElement/<a href=\"#!/api/Ext.dom.Element\" rel=\"Ext.dom.Element\" class=\"docClass\">Ext.Element</a>"},"private":null,"static":null,"name":"insertBefore","doc":"<p>Creates new DOM element(s) and inserts them before el.</p>\n","chainable":false,"inheritdoc":null,"id":"method-insertBefore","fires":[],"linenr":null},{"autodetected":{"method_calls":true,"inheritable":true,"static":true,"private":true,"chainable":true,"inheritdoc":true,"linenr":true,"fires":true},"short_doc":"Creates new DOM element(s) and inserts them as the first child of el. ...","method_calls":["doInsert"],"owner":"Ext.DomHelper","inheritable":null,"params":[{"type":"String/HTMLElement/Ext.Element","tagname":"params","doc":"<p>The context element</p>\n","name":"el","html_type":"String/HTMLElement/<a href=\"#!/api/Ext.dom.Element\" rel=\"Ext.dom.Element\" class=\"docClass\">Ext.Element</a>"},{"type":"Object/String","tagname":"params","doc":"<p>The DOM object spec (and children) or raw HTML blob</p>\n","name":"o","html_type":"Object/String"},{"type":"Boolean","tagname":"params","doc":"<p>true to return a <a href=\"#!/api/Ext.dom.Element\" rel=\"Ext.dom.Element\" class=\"docClass\">Ext.Element</a></p>\n","name":"returnElement","optional":true,"html_type":"Boolean"}],"tagname":"method","files":[{"linenr":395,"filename":"/Users/yshibukawa/personal/senchatouch/touch-2.3.0/src/dom/Helper.js"}],"return":{"type":"HTMLElement/Ext.Element","properties":null,"doc":"<p>The new node</p>\n","name":"return","html_type":"HTMLElement/<a href=\"#!/api/Ext.dom.Element\" rel=\"Ext.dom.Element\" class=\"docClass\">Ext.Element</a>"},"private":null,"static":null,"name":"insertFirst","doc":"<p>Creates new DOM element(s) and inserts them as the first child of el.</p>\n","chainable":false,"inheritdoc":null,"id":"method-insertFirst","fires":[],"linenr":null},{"autodetected":{"method_calls":true,"inheritable":true,"static":true,"private":true,"chainable":true,"inheritdoc":true,"linenr":true,"fires":true},"short_doc":"Inserts an HTML fragment into the DOM. ...","method_calls":["createContextualFragment"],"owner":"Ext.DomHelper","inheritable":null,"params":[{"type":"String","tagname":"params","doc":"<p>Where to insert the html in relation to el - beforeBegin, afterBegin, beforeEnd, afterEnd.</p>\n\n<p>For example take the following HTML: <code>&lt;div&gt;Contents&lt;/div&gt;</code></p>\n\n<p>Using different <code>where</code> values inserts element to the following places:</p>\n\n<ul>\n<li>beforeBegin: <code>&lt;HERE&gt;&lt;div&gt;Contents&lt;/div&gt;</code></li>\n<li>afterBegin: <code>&lt;div&gt;&lt;HERE&gt;Contents&lt;/div&gt;</code></li>\n<li>beforeEnd: <code>&lt;div&gt;Contents&lt;HERE&gt;&lt;/div&gt;</code></li>\n<li>afterEnd: <code>&lt;div&gt;Contents&lt;/div&gt;&lt;HERE&gt;</code></li>\n</ul>\n\n","name":"where","html_type":"String"},{"type":"HTMLElement/TextNode","tagname":"params","doc":"<p>The context element</p>\n","name":"el","html_type":"HTMLElement/TextNode"},{"type":"String","tagname":"params","doc":"<p>The HTML fragment</p>\n","name":"html","html_type":"String"}],"tagname":"method","files":[{"linenr":296,"filename":"/Users/yshibukawa/personal/senchatouch/touch-2.3.0/src/dom/Helper.js"}],"return":{"type":"HTMLElement","properties":null,"doc":"<p>The new node</p>\n","name":"return","html_type":"HTMLElement"},"private":null,"static":null,"name":"insertHtml","doc":"<p>Inserts an HTML fragment into the DOM.</p>\n","chainable":false,"inheritdoc":null,"id":"method-insertHtml","fires":[],"linenr":null},{"autodetected":{"method_calls":true,"inheritable":true,"static":true,"private":true,"chainable":true,"inheritdoc":true,"linenr":true,"fires":true},"short_doc":"Returns the markup for the passed Element(s) config. ...","method_calls":["generateMarkup"],"owner":"Ext.DomHelper","inheritable":null,"params":[{"type":"Object","tagname":"params","doc":"<p>The DOM object spec (and children).</p>\n","name":"spec","html_type":"Object"}],"tagname":"method","files":[{"linenr":251,"filename":"/Users/yshibukawa/personal/senchatouch/touch-2.3.0/src/dom/Helper.js"}],"return":{"type":"String","properties":null,"doc":"\n","name":"return","html_type":"String"},"private":null,"static":null,"name":"markup","doc":"<p>Returns the markup for the passed Element(s) config.</p>\n","chainable":false,"inheritdoc":null,"id":"method-markup","fires":[],"linenr":null},{"autodetected":{"method_calls":true,"inheritable":true,"static":true,"private":true,"chainable":true,"inheritdoc":true,"linenr":true,"fires":true},"short_doc":"Creates new DOM element(s) and overwrites the contents of el with them. ...","method_calls":["markup"],"owner":"Ext.DomHelper","inheritable":null,"params":[{"type":"String/HTMLElement/Ext.Element","tagname":"params","doc":"<p>The context element</p>\n","name":"el","html_type":"String/HTMLElement/<a href=\"#!/api/Ext.dom.Element\" rel=\"Ext.dom.Element\" class=\"docClass\">Ext.Element</a>"},{"type":"Object/String","tagname":"params","doc":"<p>The DOM object spec (and children) or raw HTML blob</p>\n","name":"o","html_type":"Object/String"},{"type":"Boolean","tagname":"params","doc":"<p>true to return a <a href=\"#!/api/Ext.dom.Element\" rel=\"Ext.dom.Element\" class=\"docClass\">Ext.Element</a></p>\n","name":"returnElement","optional":true,"html_type":"Boolean"}],"tagname":"method","files":[{"linenr":417,"filename":"/Users/yshibukawa/personal/senchatouch/touch-2.3.0/src/dom/Helper.js"}],"return":{"type":"HTMLElement/Ext.Element","properties":null,"doc":"<p>The new node</p>\n","name":"return","html_type":"HTMLElement/<a href=\"#!/api/Ext.dom.Element\" rel=\"Ext.dom.Element\" class=\"docClass\">Ext.Element</a>"},"private":null,"static":null,"name":"overwrite","doc":"<p>Creates new DOM element(s) and overwrites the contents of el with them.</p>\n","chainable":false,"inheritdoc":null,"id":"method-overwrite","fires":[],"linenr":null}],"alternateClassNames":["Ext.dom.Helper"],"doc":"<p>The DomHelper class provides a layer of abstraction from DOM and transparently supports creating elements via DOM or\nusing HTML fragments. It also has the ability to create HTML fragment templates from your DOM building code.</p>\n\n<h2>DomHelper element specification object</h2>\n\n<p>A specification object is used when creating elements. Attributes of this object are assumed to be element\nattributes, except for 4 special attributes:</p>\n\n<ul>\n<li><strong>tag</strong>: The tag name of the element</li>\n<li><strong>children (or cn)</strong>: An array of the same kind of element definition objects to be created and appended. These\ncan be nested as deep as you want.</li>\n<li><strong>cls</strong>: The class attribute of the element. This will end up being either the \"class\" attribute on a HTML\nfragment or className for a DOM node, depending on whether DomHelper is using fragments or DOM.</li>\n<li><strong>html</strong>: The innerHTML for the element</li>\n</ul>\n\n\n<h2>Insertion methods</h2>\n\n<p>Commonly used insertion methods:</p>\n\n<ul>\n<li><a href=\"#!/api/Ext.DomHelper-method-append\" rel=\"Ext.DomHelper-method-append\" class=\"docClass\">append</a></li>\n<li><a href=\"#!/api/Ext.DomHelper-method-insertBefore\" rel=\"Ext.DomHelper-method-insertBefore\" class=\"docClass\">insertBefore</a></li>\n<li><a href=\"#!/api/Ext.DomHelper-method-insertAfter\" rel=\"Ext.DomHelper-method-insertAfter\" class=\"docClass\">insertAfter</a></li>\n<li><a href=\"#!/api/Ext.DomHelper-method-overwrite\" rel=\"Ext.DomHelper-method-overwrite\" class=\"docClass\">overwrite</a></li>\n<li><a href=\"#!/api/Ext.DomHelper-method-insertHtml\" rel=\"Ext.DomHelper-method-insertHtml\" class=\"docClass\">insertHtml</a></li>\n</ul>\n\n\n<h2>Example</h2>\n\n<p>This is an example, where an unordered list with 3 children items is appended to an existing element with id\n'my-div':</p>\n\n<pre><code>var dh = <a href=\"#!/api/Ext.DomHelper\" rel=\"Ext.DomHelper\" class=\"docClass\">Ext.DomHelper</a>; // create shorthand alias\n// specification object\nvar spec = {\n    id: 'my-ul',\n    tag: 'ul',\n    cls: 'my-list',\n    // append children after creating\n    children: [     // may also specify 'cn' instead of 'children'\n        {tag: 'li', id: 'item0', html: 'List Item 0'},\n        {tag: 'li', id: 'item1', html: 'List Item 1'},\n        {tag: 'li', id: 'item2', html: 'List Item 2'}\n    ]\n};\nvar list = dh.append(\n    'my-div', // the context element 'my-div' can either be the id or the actual node\n    spec      // the specification object\n);\n</code></pre>\n\n<p>Element creation specification parameters in this class may also be passed as an Array of specification objects.\nThis can be used to insert multiple sibling nodes into an existing container very efficiently. For example, to add\nmore list items to the example above:</p>\n\n<pre><code>dh.append('my-ul', [\n    {tag: 'li', id: 'item3', html: 'List Item 3'},\n    {tag: 'li', id: 'item4', html: 'List Item 4'}\n]);\n</code></pre>\n\n<h2>Templating</h2>\n\n<p>The real power is in the built-in templating. Instead of creating or appending any elements, createTemplate returns\na Template object which can be used over and over to insert new elements. Revisiting the example above, we could\nutilize templating this time:</p>\n\n<pre><code>// create the node\nvar list = dh.append('my-div', {tag: 'ul', cls: 'my-list'});\n// get template\nvar tpl = dh.createTemplate({tag: 'li', id: 'item{0}', html: 'List Item {0}'});\n\nfor(var i = 0; i &lt; 5; i++){\n    tpl.append(list, i); // use template to append to the actual node\n}\n</code></pre>\n\n<p>An example using a template:</p>\n\n<pre><code>var html = '\"{0}\" href=\"{1}\" class=\"nav\"&gt;{2}';\n\nvar tpl = new <a href=\"#!/api/Ext.DomHelper-method-createTemplate\" rel=\"Ext.DomHelper-method-createTemplate\" class=\"docClass\">Ext.DomHelper.createTemplate</a>(html);\ntpl.append('blog-roll', ['link1', 'http://www.tommymaintz.com/', \"Tommy's Site\"]);\ntpl.append('blog-roll', ['link2', 'http://www.avins.org/', \"Jamie's Site\"]);\n</code></pre>\n\n<p>The same example using named parameters:</p>\n\n<pre><code>var html = '\"{id}\" href=\"{url}\" class=\"nav\"&gt;{text}';\n\nvar tpl = new <a href=\"#!/api/Ext.DomHelper-method-createTemplate\" rel=\"Ext.DomHelper-method-createTemplate\" class=\"docClass\">Ext.DomHelper.createTemplate</a>(html);\ntpl.append('blog-roll', {\n    id: 'link1',\n    url: 'http://www.tommymaintz.com/',\n    text: \"Tommy's Site\"\n});\ntpl.append('blog-roll', {\n    id: 'link2',\n    url: 'http://www.avins.org/',\n    text: \"Jamie's Site\"\n});\n</code></pre>\n\n<h2>Compiling Templates</h2>\n\n<p>Templates are applied using regular expressions. The performance is great, but if you are adding a bunch of DOM\nelements using the same template, you can increase performance even further by \"compiling\" the template. The way\n\"compile()\" works is the template is parsed and broken up at the different variable points and a dynamic function is\ncreated and eval'ed. The generated function performs string concatenation of these parts and the passed variables\ninstead of using regular expressions.</p>\n\n<pre><code>var html = '\"{id}\" href=\"{url}\" class=\"nav\"&gt;{text}';\n\nvar tpl = new <a href=\"#!/api/Ext.DomHelper-method-createTemplate\" rel=\"Ext.DomHelper-method-createTemplate\" class=\"docClass\">Ext.DomHelper.createTemplate</a>(html);\ntpl.compile();\n\n// ... use template like normal\n</code></pre>\n\n<h2>Performance Boost</h2>\n\n<p>DomHelper will transparently create HTML fragments when it can. Using HTML fragments instead of DOM can\nsignificantly boost performance.</p>\n\n<p>Element creation specification parameters may also be strings. If useDom is false, then the string is used as\ninnerHTML. If useDom is true, a string specification results in the creation of a text node. Usage:</p>\n\n<pre><code>Ext.DomHelper.useDom = true; // force it to use DOM; reduces performance\n</code></pre>\n","name":"Ext.DomHelper","id":"class-Ext.DomHelper"}