{"autodetected":{},"short_doc":"This class is a centralized place for formatting functions. ...","singleton":true,"aliases":{},"files":[{"linenr":25,"filename":"/Users/yshibukawa/personal/ext-4.2.1.883/src/util/Format.js"}],"tagname":"class","members":[{"autodetected":{"default":true,"inheritable":true,"readonly":true,"static":true,"private":true,"inheritdoc":true,"linenr":true},"type":"Boolean","short_doc":"This may be set to true to make the currency function\nappend the currency sign to the formatted value. ...","default":"false","owner":"Ext.util.Format","inheritable":null,"readonly":null,"tagname":"property","files":[{"linenr":144,"filename":"/Users/yshibukawa/personal/ext-4.2.1.883/src/util/Format.js"}],"private":null,"static":null,"name":"currencyAtEnd","properties":null,"doc":"<p>This may be set to <code>true</code> to make the <a href=\"#!/api/Ext.util.Format-method-currency\" rel=\"Ext.util.Format-method-currency\" class=\"docClass\">currency</a> function\nappend the currency sign to the formatted value.</p>\n\n<p>This may be overridden in a locale file.</p>\n","inheritdoc":null,"id":"property-currencyAtEnd","html_type":"Boolean","linenr":null},{"autodetected":{"default":true,"inheritable":true,"readonly":true,"static":true,"private":true,"inheritdoc":true,"linenr":true},"type":"Number","short_doc":"The number of decimal places that the currency function displays. ...","default":"2","owner":"Ext.util.Format","inheritable":null,"readonly":null,"tagname":"property","files":[{"linenr":124,"filename":"/Users/yshibukawa/personal/ext-4.2.1.883/src/util/Format.js"}],"private":null,"static":null,"name":"currencyPrecision","properties":null,"doc":"<p>The number of decimal places that the <a href=\"#!/api/Ext.util.Format-method-currency\" rel=\"Ext.util.Format-method-currency\" class=\"docClass\">currency</a> function displays.</p>\n\n<p>This may be overridden in a locale file.</p>\n","inheritdoc":null,"id":"property-currencyPrecision","html_type":"Number","linenr":null},{"autodetected":{"default":true,"inheritable":true,"readonly":true,"static":true,"private":true,"inheritdoc":true,"linenr":true},"type":"String","short_doc":"The currency sign that the currency function displays. ...","default":"'$'","owner":"Ext.util.Format","inheritable":null,"readonly":null,"tagname":"property","files":[{"linenr":134,"filename":"/Users/yshibukawa/personal/ext-4.2.1.883/src/util/Format.js"}],"private":null,"static":null,"name":"currencySign","properties":null,"doc":"<p>The currency sign that the <a href=\"#!/api/Ext.util.Format-method-currency\" rel=\"Ext.util.Format-method-currency\" class=\"docClass\">currency</a> function displays.</p>\n\n<p>This may be overridden in a locale file.</p>\n","inheritdoc":null,"id":"property-currencySign","html_type":"String","linenr":null},{"autodetected":{"default":true,"inheritable":true,"readonly":true,"static":true,"private":true,"inheritdoc":true,"linenr":true},"type":"String","short_doc":"The character that the number function uses as a decimal point. ...","default":"'.'","owner":"Ext.util.Format","inheritable":null,"readonly":null,"tagname":"property","files":[{"linenr":114,"filename":"/Users/yshibukawa/personal/ext-4.2.1.883/src/util/Format.js"}],"private":null,"static":null,"name":"decimalSeparator","properties":null,"doc":"<p>The character that the <a href=\"#!/api/Ext.util.Format-method-number\" rel=\"Ext.util.Format-method-number\" class=\"docClass\">number</a> function uses as a decimal point.</p>\n\n<p>This may be overridden in a locale file.</p>\n","inheritdoc":null,"id":"property-decimalSeparator","html_type":"String","linenr":null},{"autodetected":{"default":true,"inheritable":true,"readonly":true,"static":true,"private":true,"inheritdoc":true,"linenr":true},"type":"String","short_doc":"The character that the number function uses as a thousand separator. ...","default":"','","owner":"Ext.util.Format","inheritable":null,"readonly":null,"tagname":"property","files":[{"linenr":104,"filename":"/Users/yshibukawa/personal/ext-4.2.1.883/src/util/Format.js"}],"private":null,"static":null,"name":"thousandSeparator","properties":null,"doc":"<p>The character that the <a href=\"#!/api/Ext.util.Format-method-number\" rel=\"Ext.util.Format-method-number\" class=\"docClass\">number</a> function uses as a thousand separator.</p>\n\n<p>This may be overridden in a locale file.</p>\n","inheritdoc":null,"id":"property-thousandSeparator","html_type":"String","linenr":null},{"autodetected":{"method_calls":true,"inheritable":true,"static":true,"private":true,"chainable":true,"inheritdoc":true,"linenr":true,"fires":true},"short_doc":"Formats an object of name value properties as HTML element attribute values suitable for using when creating textual ...","method_calls":null,"owner":"Ext.util.Format","inheritable":null,"params":[{"type":"Object","tagname":"params","doc":"<p>An object containing the HTML attributes as properties eg: <code>{height:40, vAlign:'top'}</code></p>\n","name":"attributes","html_type":"Object"}],"tagname":"method","files":[{"linenr":537,"filename":"/Users/yshibukawa/personal/ext-4.2.1.883/src/util/Format.js"}],"private":null,"static":null,"name":"attributes","doc":"<p>Formats an object of name value properties as HTML element attribute values suitable for using when creating textual markup.</p>\n","chainable":false,"inheritdoc":null,"id":"method-attributes","fires":null,"linenr":null},{"type":null,"autodetected":{"method_calls":true,"inheritable":true,"params":true,"static":true,"private":true,"chainable":true,"linenr":true,"fires":true},"short_doc":"Alias for Ext.String.capitalize. ...","method_calls":null,"owner":"Ext.util.Format","inheritable":null,"params":[{"type":"String","tagname":"params","doc":"\n","name":"string","html_type":"String"}],"tagname":"method","files":[{"linenr":577,"filename":"/Users/yshibukawa/personal/ext-4.2.1.883/src/util/Format.js"}],"return":{"type":"String","properties":null,"doc":"\n","name":"return","html_type":"String"},"private":null,"static":null,"name":"capitalize","doc":"<p>Alias for <a href=\"#!/api/Ext.String-method-capitalize\" rel=\"Ext.String-method-capitalize\" class=\"docClass\">Ext.String.capitalize</a>.</p>\n","chainable":null,"throws":null,"inheritdoc":null,"id":"method-capitalize","fires":null,"linenr":null},{"autodetected":{"method_calls":true,"inheritable":true,"static":true,"private":true,"chainable":true,"inheritdoc":true,"linenr":true,"fires":true},"short_doc":"Format a number as a currency. ...","method_calls":null,"owner":"Ext.util.Format","inheritable":null,"params":[{"type":"Number/String","tagname":"params","doc":"<p>The numeric value to format</p>\n","name":"value","html_type":"Number/String"},{"type":"String","tagname":"params","doc":"<p>The currency sign to use (defaults to <a href=\"#!/api/Ext.util.Format-property-currencySign\" rel=\"Ext.util.Format-property-currencySign\" class=\"docClass\">currencySign</a>)</p>\n","name":"sign","optional":true,"html_type":"String"},{"type":"Number","tagname":"params","doc":"<p>The number of decimals to use for the currency\n(defaults to <a href=\"#!/api/Ext.util.Format-property-currencyPrecision\" rel=\"Ext.util.Format-property-currencyPrecision\" class=\"docClass\">currencyPrecision</a>)</p>\n","name":"decimals","optional":true,"html_type":"Number"},{"type":"Boolean","tagname":"params","doc":"<p>True if the currency sign should be at the end of the string\n(defaults to <a href=\"#!/api/Ext.util.Format-property-currencyAtEnd\" rel=\"Ext.util.Format-property-currencyAtEnd\" class=\"docClass\">currencyAtEnd</a>)</p>\n","name":"end","optional":true,"html_type":"Boolean"}],"tagname":"method","files":[{"linenr":219,"filename":"/Users/yshibukawa/personal/ext-4.2.1.883/src/util/Format.js"}],"return":{"type":"String","properties":null,"doc":"<p>The formatted currency string</p>\n","name":"return","html_type":"String"},"private":null,"static":null,"name":"currency","doc":"<p>Format a number as a currency.</p>\n","chainable":false,"inheritdoc":null,"id":"method-currency","fires":null,"linenr":null},{"autodetected":{"method_calls":true,"inheritable":true,"static":true,"private":true,"chainable":true,"inheritdoc":true,"linenr":true,"fires":true},"short_doc":"Formats the passed date using the specified format pattern. ...","method_calls":null,"owner":"Ext.util.Format","inheritable":null,"params":[{"type":"String/Date","tagname":"params","doc":"<p>The value to format. If a string is passed, it is converted to a Date\nby the Javascript's built-in Date#parse method.</p>\n","name":"value","html_type":"String/Date"},{"type":"String","tagname":"params","doc":"<p>Any valid date format string. Defaults to <a href=\"#!/api/Ext.Date-property-defaultFormat\" rel=\"Ext.Date-property-defaultFormat\" class=\"docClass\">Ext.Date.defaultFormat</a>.</p>\n","name":"format","optional":true,"html_type":"String"}],"tagname":"method","files":[{"linenr":251,"filename":"/Users/yshibukawa/personal/ext-4.2.1.883/src/util/Format.js"}],"return":{"type":"String","properties":null,"doc":"<p>The formatted date string.</p>\n","name":"return","html_type":"String"},"private":null,"static":null,"name":"date","doc":"<p>Formats the passed date using the specified format pattern.</p>\n","chainable":false,"inheritdoc":null,"id":"method-date","fires":null,"linenr":null},{"autodetected":{"method_calls":true,"inheritable":true,"static":true,"private":true,"chainable":true,"inheritdoc":true,"linenr":true,"fires":true},"short_doc":"Returns a date rendering function that can be reused to apply a date format multiple times efficiently. ...","method_calls":null,"owner":"Ext.util.Format","inheritable":null,"params":[{"type":"String","tagname":"params","doc":"<p>Any valid date format string. Defaults to <a href=\"#!/api/Ext.Date-property-defaultFormat\" rel=\"Ext.Date-property-defaultFormat\" class=\"docClass\">Ext.Date.defaultFormat</a>.</p>\n","name":"format","html_type":"String"}],"tagname":"method","files":[{"linenr":268,"filename":"/Users/yshibukawa/personal/ext-4.2.1.883/src/util/Format.js"}],"return":{"type":"Function","properties":null,"doc":"<p>The date formatting function</p>\n","name":"return","html_type":"Function"},"private":null,"static":null,"name":"dateRenderer","doc":"<p>Returns a date rendering function that can be reused to apply a date format multiple times efficiently.</p>\n","chainable":false,"inheritdoc":null,"id":"method-dateRenderer","fires":null,"linenr":null},{"autodetected":{"method_calls":true,"inheritable":true,"static":true,"private":true,"chainable":true,"inheritdoc":true,"linenr":true,"fires":true},"short_doc":"Checks a reference and converts it to the default value if it's empty. ...","method_calls":null,"owner":"Ext.util.Format","inheritable":null,"params":[{"type":"Object","tagname":"params","doc":"<p>Reference to check</p>\n","name":"value","html_type":"Object"},{"type":"String","default":"\"\"","tagname":"params","doc":"<p>The value to insert of it's undefined.</p>\n","name":"defaultValue","optional":true,"html_type":"String"}],"tagname":"method","files":[{"linenr":163,"filename":"/Users/yshibukawa/personal/ext-4.2.1.883/src/util/Format.js"}],"return":{"type":"String","properties":null,"doc":"\n","name":"return","html_type":"String"},"private":null,"static":null,"name":"defaultValue","doc":"<p>Checks a reference and converts it to the default value if it's empty.</p>\n","chainable":false,"inheritdoc":null,"id":"method-defaultValue","fires":null,"linenr":null},{"type":null,"autodetected":{"method_calls":true,"inheritable":true,"params":true,"static":true,"private":true,"chainable":true,"linenr":true,"fires":true},"short_doc":"Alias for Ext.String.ellipsis. ...","method_calls":null,"owner":"Ext.util.Format","inheritable":null,"params":[{"type":"String","tagname":"params","doc":"<p>The string to truncate.</p>\n","name":"value","html_type":"String"},{"type":"Number","tagname":"params","doc":"<p>The maximum length to allow before truncating.</p>\n","name":"length","html_type":"Number"},{"type":"Boolean","default":"false","tagname":"params","doc":"<p><code>true</code> to try to find a common word break.</p>\n","name":"word","optional":true,"html_type":"Boolean"}],"tagname":"method","files":[{"linenr":584,"filename":"/Users/yshibukawa/personal/ext-4.2.1.883/src/util/Format.js"}],"return":{"type":"String","properties":null,"doc":"<p>The converted text.</p>\n","name":"return","html_type":"String"},"private":null,"static":null,"name":"ellipsis","doc":"<p>Alias for <a href=\"#!/api/Ext.String-method-ellipsis\" rel=\"Ext.String-method-ellipsis\" class=\"docClass\">Ext.String.ellipsis</a>.</p>\n","chainable":null,"throws":null,"inheritdoc":null,"id":"method-ellipsis","fires":null,"linenr":null},{"autodetected":{"method_calls":true,"inheritable":true,"static":true,"private":true,"chainable":true,"inheritdoc":true,"linenr":true,"fires":true},"short_doc":"Escapes the passed string for use in a regular expression. ...","method_calls":null,"owner":"Ext.util.Format","inheritable":null,"params":[{"type":"String","tagname":"params","doc":"\n","name":"str","html_type":"String"}],"tagname":"method","files":[{"linenr":668,"filename":"/Users/yshibukawa/personal/ext-4.2.1.883/src/util/Format.js"}],"return":{"type":"String","properties":null,"doc":"\n","name":"return","html_type":"String"},"private":null,"static":null,"name":"escapeRegex","doc":"<p>Escapes the passed string for use in a regular expression.</p>\n","chainable":false,"inheritdoc":null,"id":"method-escapeRegex","fires":null,"linenr":null},{"autodetected":{"method_calls":true,"inheritable":true,"static":true,"private":true,"chainable":true,"inheritdoc":true,"linenr":true,"fires":true},"short_doc":"Simple format for a file size (xxx bytes, xxx KB, xxx MB). ...","method_calls":null,"owner":"Ext.util.Format","inheritable":null,"params":[{"type":"Number/String","tagname":"params","doc":"<p>The numeric value to format</p>\n","name":"size","html_type":"Number/String"}],"tagname":"method","files":[{"linenr":297,"filename":"/Users/yshibukawa/personal/ext-4.2.1.883/src/util/Format.js"}],"return":{"type":"String","properties":null,"doc":"<p>The formatted file size</p>\n","name":"return","html_type":"String"},"private":null,"static":null,"name":"fileSize","doc":"<p>Simple format for a file size (xxx bytes, xxx KB, xxx MB).</p>\n","chainable":null,"inheritdoc":null,"id":"method-fileSize","fires":null,"linenr":null},{"type":null,"autodetected":{"method_calls":true,"inheritable":true,"params":true,"static":true,"private":true,"chainable":true,"linenr":true,"fires":true},"short_doc":"Alias for Ext.String.format. ...","method_calls":null,"owner":"Ext.util.Format","inheritable":null,"params":[{"type":"String","tagname":"params","doc":"<p>The tokenized string to be formatted.</p>\n","name":"string","html_type":"String"},{"type":"Mixed...","tagname":"params","doc":"<p>The values to replace tokens <code>{0}</code>, <code>{1}</code>, etc in order.</p>\n","name":"values","html_type":"Mixed..."}],"tagname":"method","files":[{"linenr":591,"filename":"/Users/yshibukawa/personal/ext-4.2.1.883/src/util/Format.js"}],"return":{"type":"String","properties":null,"doc":"<p>The formatted string.</p>\n","name":"return","html_type":"String"},"private":null,"static":null,"name":"format","doc":"<p>Alias for <a href=\"#!/api/Ext.String-method-format\" rel=\"Ext.String-method-format\" class=\"docClass\">Ext.String.format</a>.</p>\n","chainable":null,"throws":null,"inheritdoc":null,"id":"method-format","fires":null,"linenr":null},{"type":null,"autodetected":{"method_calls":true,"inheritable":true,"params":true,"static":true,"private":true,"chainable":true,"linenr":true,"fires":true},"short_doc":"Alias for Ext.String.htmlDecode. ...","method_calls":null,"owner":"Ext.util.Format","inheritable":null,"params":[{"type":"String","tagname":"params","doc":"<p>The string to decode.</p>\n","name":"value","html_type":"String"}],"tagname":"method","files":[{"linenr":598,"filename":"/Users/yshibukawa/personal/ext-4.2.1.883/src/util/Format.js"}],"return":{"type":"String","properties":null,"doc":"<p>The decoded text.</p>\n","name":"return","html_type":"String"},"private":null,"static":null,"name":"htmlDecode","doc":"<p>Alias for <a href=\"#!/api/Ext.String-method-htmlDecode\" rel=\"Ext.String-method-htmlDecode\" class=\"docClass\">Ext.String.htmlDecode</a>.</p>\n","chainable":null,"throws":null,"inheritdoc":null,"id":"method-htmlDecode","fires":null,"linenr":null},{"type":null,"autodetected":{"method_calls":true,"inheritable":true,"params":true,"static":true,"private":true,"chainable":true,"linenr":true,"fires":true},"short_doc":"Alias for Ext.String.htmlEncode. ...","method_calls":null,"owner":"Ext.util.Format","inheritable":null,"params":[{"type":"String","tagname":"params","doc":"<p>The string to encode.</p>\n","name":"value","html_type":"String"}],"tagname":"method","files":[{"linenr":605,"filename":"/Users/yshibukawa/personal/ext-4.2.1.883/src/util/Format.js"}],"return":{"type":"String","properties":null,"doc":"<p>The encoded text.</p>\n","name":"return","html_type":"String"},"private":null,"static":null,"name":"htmlEncode","doc":"<p>Alias for <a href=\"#!/api/Ext.String-method-htmlEncode\" rel=\"Ext.String-method-htmlEncode\" class=\"docClass\">Ext.String.htmlEncode</a>.</p>\n","chainable":null,"throws":null,"inheritdoc":null,"id":"method-htmlEncode","fires":null,"linenr":null},{"type":null,"autodetected":{"method_calls":true,"inheritable":true,"params":true,"static":true,"private":true,"chainable":true,"linenr":true,"fires":true},"short_doc":"Alias for Ext.String.leftPad. ...","method_calls":null,"owner":"Ext.util.Format","inheritable":null,"params":[{"type":"String","tagname":"params","doc":"<p>The original string.</p>\n","name":"string","html_type":"String"},{"type":"Number","tagname":"params","doc":"<p>The total length of the output string.</p>\n","name":"size","html_type":"Number"},{"type":"String","default":"' '","tagname":"params","doc":"<p>The character with which to pad the original string.</p>\n","name":"character","optional":true,"html_type":"String"}],"tagname":"method","files":[{"linenr":612,"filename":"/Users/yshibukawa/personal/ext-4.2.1.883/src/util/Format.js"}],"return":{"type":"String","properties":null,"doc":"<p>The padded string.</p>\n","name":"return","html_type":"String"},"private":null,"static":null,"name":"leftPad","doc":"<p>Alias for <a href=\"#!/api/Ext.String-method-leftPad\" rel=\"Ext.String-method-leftPad\" class=\"docClass\">Ext.String.leftPad</a>.</p>\n","chainable":null,"throws":null,"inheritdoc":null,"id":"method-leftPad","fires":null,"linenr":null},{"autodetected":{"method_calls":true,"inheritable":true,"static":true,"private":true,"chainable":true,"inheritdoc":true,"linenr":true,"fires":true},"short_doc":"Converts a string to all lower case letters. ...","method_calls":null,"owner":"Ext.util.Format","inheritable":null,"params":[{"type":"String","tagname":"params","doc":"<p>The text to convert</p>\n","name":"value","html_type":"String"}],"tagname":"method","files":[{"linenr":192,"filename":"/Users/yshibukawa/personal/ext-4.2.1.883/src/util/Format.js"}],"return":{"type":"String","properties":null,"doc":"<p>The converted text</p>\n","name":"return","html_type":"String"},"private":null,"static":null,"name":"lowercase","doc":"<p>Converts a string to all lower case letters.</p>\n","chainable":false,"inheritdoc":null,"id":"method-lowercase","fires":null,"linenr":null},{"autodetected":{"method_calls":true,"inheritable":true,"params":true,"static":true,"private":true,"chainable":true,"inheritdoc":true,"linenr":true,"fires":true},"short_doc":"It does simple math for use in a template, for example:\n\nvar tpl = new Ext.Template('{value} * 10 = {value:math(\"* 10...","method_calls":null,"owner":"Ext.util.Format","inheritable":null,"params":[],"tagname":"method","files":[{"linenr":326,"filename":"/Users/yshibukawa/personal/ext-4.2.1.883/src/util/Format.js"}],"return":{"type":"Function","properties":null,"doc":"<p>A function that operates on the passed value.</p>\n","name":"return","html_type":"Function"},"private":null,"static":null,"name":"math","doc":"<p>It does simple math for use in a template, for example:</p>\n\n<pre><code>var tpl = new <a href=\"#!/api/Ext.Template\" rel=\"Ext.Template\" class=\"docClass\">Ext.Template</a>('{value} * 10 = {value:math(\"* 10\")}');\n</code></pre>\n","chainable":null,"inheritdoc":null,"id":"method-math","fires":null,"linenr":null},{"autodetected":{"method_calls":true,"inheritable":true,"static":true,"private":true,"chainable":true,"inheritdoc":true,"linenr":true,"fires":true},"short_doc":"Converts newline characters to the HTML tag &lt;br/&gt; ...","method_calls":null,"owner":"Ext.util.Format","inheritable":null,"params":[{"type":"String","tagname":"params","doc":"<p>The string value to format.</p>\n","name":"v","html_type":"String"}],"tagname":"method","files":[{"linenr":567,"filename":"/Users/yshibukawa/personal/ext-4.2.1.883/src/util/Format.js"}],"return":{"type":"String","properties":null,"doc":"<p>The string with embedded <code>&lt;br/&gt;</code> tags in place of newlines.</p>\n","name":"return","html_type":"String"},"private":null,"static":null,"name":"nl2br","doc":"<p>Converts newline characters to the HTML tag <code>&lt;br/&gt;</code></p>\n","chainable":false,"inheritdoc":null,"id":"method-nl2br","fires":null,"linenr":null},{"autodetected":{"method_calls":true,"inheritable":true,"static":true,"private":true,"chainable":true,"inheritdoc":true,"linenr":true,"fires":true},"short_doc":"Formats the passed number according to the passed format string. ...","method_calls":null,"owner":"Ext.util.Format","inheritable":null,"params":[{"type":"Number","tagname":"params","doc":"<p>The number to format.</p>\n","name":"v","html_type":"Number"},{"type":"String","tagname":"params","doc":"<p>The way you would like to format this text.</p>\n","name":"format","html_type":"String"}],"tagname":"method","files":[{"linenr":360,"filename":"/Users/yshibukawa/personal/ext-4.2.1.883/src/util/Format.js"}],"return":{"type":"String","properties":null,"doc":"<p>The formatted number.</p>\n","name":"return","html_type":"String"},"private":null,"static":null,"name":"number","doc":"<p>Formats the passed number according to the passed format string.</p>\n\n<p>The number of digits after the decimal separator character specifies the number of\ndecimal places in the resulting string. The <em>local-specific</em> decimal character is\nused in the result.</p>\n\n<p>The <em>presence</em> of a thousand separator character in the format string specifies that\nthe <em>locale-specific</em> thousand separator (if any) is inserted separating thousand groups.</p>\n\n<p>By default, \",\" is expected as the thousand separator, and \".\" is expected as the decimal separator.</p>\n\n<h2>New to Ext JS 4</h2>\n\n<p>Locale-specific characters are always used in the formatted output when inserting\nthousand and decimal separators.</p>\n\n<p>The format string must specify separator characters according to US/UK conventions (\",\" as the\nthousand separator, and \".\" as the decimal separator)</p>\n\n<p>To allow specification of format strings according to local conventions for separator characters, add\nthe string <code>/i</code> to the end of the format string.</p>\n\n<p>examples (123456.789):</p>\n\n<ul>\n<li><code>0</code> - (123456) show only digits, no precision</li>\n<li><code>0.00</code> - (123456.78) show only digits, 2 precision</li>\n<li><code>0.0000</code> - (123456.7890) show only digits, 4 precision</li>\n<li><code>0,000</code> - (123,456) show comma and digits, no precision</li>\n<li><code>0,000.00</code> - (123,456.78) show comma and digits, 2 precision</li>\n<li><code>0,0.00</code> - (123,456.78) shortcut method, show comma and digits, 2 precision</li>\n<li><code>0.####</code> - (123,456,789) Allow maximum 4 decimal places, but do not right pad with zeroes</li>\n</ul>\n\n","chainable":false,"inheritdoc":null,"id":"method-number","fires":null,"linenr":null},{"autodetected":{"method_calls":true,"inheritable":true,"static":true,"private":true,"chainable":true,"inheritdoc":true,"linenr":true,"fires":true},"short_doc":"Returns a number rendering function that can be reused to apply a number format multiple\ntimes efficiently. ...","method_calls":null,"owner":"Ext.util.Format","inheritable":null,"params":[{"type":"String","tagname":"params","doc":"<p>Any valid number format string for <a href=\"#!/api/Ext.util.Format-method-number\" rel=\"Ext.util.Format-method-number\" class=\"docClass\">number</a></p>\n","name":"format","html_type":"String"}],"tagname":"method","files":[{"linenr":524,"filename":"/Users/yshibukawa/personal/ext-4.2.1.883/src/util/Format.js"}],"return":{"type":"Function","properties":null,"doc":"<p>The number formatting function</p>\n","name":"return","html_type":"Function"},"private":null,"static":null,"name":"numberRenderer","doc":"<p>Returns a number rendering function that can be reused to apply a number format multiple\ntimes efficiently.</p>\n","chainable":false,"inheritdoc":null,"id":"method-numberRenderer","fires":null,"linenr":null},{"autodetected":{"method_calls":true,"inheritable":true,"static":true,"private":true,"chainable":true,"inheritdoc":true,"linenr":true,"fires":true},"short_doc":"Parses a number or string representing margin sizes into an object. ...","method_calls":null,"owner":"Ext.util.Format","inheritable":null,"params":[{"type":"Number/String","tagname":"params","doc":"<p>The encoded margins</p>\n","name":"v","html_type":"Number/String"}],"tagname":"method","files":[{"linenr":626,"filename":"/Users/yshibukawa/personal/ext-4.2.1.883/src/util/Format.js"}],"return":{"type":"Object","properties":null,"doc":"<p>An object with margin sizes for top, right, bottom and left</p>\n","name":"return","html_type":"Object"},"private":null,"static":null,"name":"parseBox","doc":"<p>Parses a number or string representing margin sizes into an object.\nSupports CSS-style margin declarations (e.g. 10, \"10\", \"10 10\", \"10 10 10\" and\n\"10 10 10 10\" are all valid options and would return the same result).</p>\n","chainable":false,"inheritdoc":null,"id":"method-parseBox","fires":null,"linenr":null},{"autodetected":{"method_calls":true,"inheritable":true,"static":true,"private":true,"chainable":true,"inheritdoc":true,"linenr":true,"fires":true},"short_doc":"Selectively do a plural form of a word based on a numeric value. ...","method_calls":null,"owner":"Ext.util.Format","inheritable":null,"params":[{"type":"Number","tagname":"params","doc":"<p>The value to compare against</p>\n","name":"value","html_type":"Number"},{"type":"String","tagname":"params","doc":"<p>The singular form of the word</p>\n","name":"singular","html_type":"String"},{"type":"String","tagname":"params","doc":"<p>The plural form of the word (defaults to the singular with an \"s\")</p>\n","name":"plural","optional":true,"html_type":"String"}],"tagname":"method","files":[{"linenr":554,"filename":"/Users/yshibukawa/personal/ext-4.2.1.883/src/util/Format.js"}],"private":null,"static":null,"name":"plural","doc":"<p>Selectively do a plural form of a word based on a numeric value. For example, in a template,\n<code>{commentCount:plural(\"Comment\")}</code>  would result in <code>\"1 Comment\"</code> if commentCount was 1 or\nwould be <code>\"x Comments\"</code> if the value is 0 or greater than 1.</p>\n","chainable":false,"inheritdoc":null,"id":"method-plural","fires":null,"linenr":null},{"autodetected":{"method_calls":true,"inheritable":true,"static":true,"private":true,"chainable":true,"inheritdoc":true,"linenr":true,"fires":true},"short_doc":"Rounds the passed number to the required decimal precision. ...","method_calls":null,"owner":"Ext.util.Format","inheritable":null,"params":[{"type":"Number/String","tagname":"params","doc":"<p>The numeric value to round.</p>\n","name":"value","html_type":"Number/String"},{"type":"Number","tagname":"params","doc":"<p>The number of decimal places to which to round the first parameter's value.</p>\n","name":"precision","html_type":"Number"}],"tagname":"method","files":[{"linenr":345,"filename":"/Users/yshibukawa/personal/ext-4.2.1.883/src/util/Format.js"}],"return":{"type":"Number","properties":null,"doc":"<p>The rounded value.</p>\n","name":"return","html_type":"Number"},"private":null,"static":null,"name":"round","doc":"<p>Rounds the passed number to the required decimal precision.</p>\n","chainable":false,"inheritdoc":null,"id":"method-round","fires":null,"linenr":null},{"autodetected":{"method_calls":true,"inheritable":true,"static":true,"private":true,"chainable":true,"inheritdoc":true,"linenr":true,"fires":true},"short_doc":"Strips all script tags. ...","method_calls":null,"owner":"Ext.util.Format","inheritable":null,"params":[{"type":"Object","tagname":"params","doc":"<p>The text from which to strip script tags</p>\n","name":"value","html_type":"Object"}],"tagname":"method","files":[{"linenr":288,"filename":"/Users/yshibukawa/personal/ext-4.2.1.883/src/util/Format.js"}],"return":{"type":"String","properties":null,"doc":"<p>The stripped text</p>\n","name":"return","html_type":"String"},"private":null,"static":null,"name":"stripScripts","doc":"<p>Strips all script tags.</p>\n","chainable":false,"inheritdoc":null,"id":"method-stripScripts","fires":null,"linenr":null},{"autodetected":{"method_calls":true,"inheritable":true,"static":true,"private":true,"chainable":true,"inheritdoc":true,"linenr":true,"fires":true},"short_doc":"Strips all HTML tags. ...","method_calls":null,"owner":"Ext.util.Format","inheritable":null,"params":[{"type":"Object","tagname":"params","doc":"<p>The text from which to strip tags</p>\n","name":"value","html_type":"Object"}],"tagname":"method","files":[{"linenr":279,"filename":"/Users/yshibukawa/personal/ext-4.2.1.883/src/util/Format.js"}],"return":{"type":"String","properties":null,"doc":"<p>The stripped text</p>\n","name":"return","html_type":"String"},"private":null,"static":null,"name":"stripTags","doc":"<p>Strips all HTML tags.</p>\n","chainable":false,"inheritdoc":null,"id":"method-stripTags","fires":null,"linenr":null},{"autodetected":{"method_calls":true,"inheritable":true,"static":true,"private":true,"chainable":true,"inheritdoc":true,"linenr":true,"fires":true},"short_doc":"Returns a substring from within an original string. ...","method_calls":null,"owner":"Ext.util.Format","inheritable":null,"params":[{"type":"String","tagname":"params","doc":"<p>The original text</p>\n","name":"value","html_type":"String"},{"type":"Number","tagname":"params","doc":"<p>The start index of the substring</p>\n","name":"start","html_type":"Number"},{"type":"Number","tagname":"params","doc":"<p>The length of the substring</p>\n","name":"length","html_type":"Number"}],"tagname":"method","files":[{"linenr":173,"filename":"/Users/yshibukawa/personal/ext-4.2.1.883/src/util/Format.js"}],"return":{"type":"String","properties":null,"doc":"<p>The substring</p>\n","name":"return","html_type":"String"},"private":null,"static":null,"name":"substr","doc":"<p>Returns a substring from within an original string.</p>\n","chainable":null,"inheritdoc":null,"id":"method-substr","fires":null,"linenr":null},{"type":null,"autodetected":{"method_calls":true,"inheritable":true,"params":true,"static":true,"private":true,"chainable":true,"linenr":true,"fires":true},"short_doc":"Alias for Ext.String.trim. ...","method_calls":null,"owner":"Ext.util.Format","inheritable":null,"params":[{"type":"String","tagname":"params","doc":"<p>The string to trim.</p>\n","name":"string","html_type":"String"}],"tagname":"method","files":[{"linenr":619,"filename":"/Users/yshibukawa/personal/ext-4.2.1.883/src/util/Format.js"}],"return":{"type":"String","properties":null,"doc":"<p>The trimmed string.</p>\n","name":"return","html_type":"String"},"private":null,"static":null,"name":"trim","doc":"<p>Alias for <a href=\"#!/api/Ext.String-method-trim\" rel=\"Ext.String-method-trim\" class=\"docClass\">Ext.String.trim</a>.</p>\n","chainable":null,"throws":null,"inheritdoc":null,"id":"method-trim","fires":null,"linenr":null},{"autodetected":{"method_calls":true,"inheritable":true,"static":true,"private":true,"chainable":true,"inheritdoc":true,"linenr":true,"fires":true},"short_doc":"Checks a reference and converts it to empty string if it is undefined. ...","method_calls":null,"owner":"Ext.util.Format","inheritable":null,"params":[{"type":"Object","tagname":"params","doc":"<p>Reference to check</p>\n","name":"value","html_type":"Object"}],"tagname":"method","files":[{"linenr":154,"filename":"/Users/yshibukawa/personal/ext-4.2.1.883/src/util/Format.js"}],"return":{"type":"Object","properties":null,"doc":"<p>Empty string if converted, otherwise the original value</p>\n","name":"return","html_type":"Object"},"private":null,"static":null,"name":"undef","doc":"<p>Checks a reference and converts it to empty string if it is undefined.</p>\n","chainable":false,"inheritdoc":null,"id":"method-undef","fires":null,"linenr":null},{"autodetected":{"method_calls":true,"inheritable":true,"static":true,"private":true,"chainable":true,"inheritdoc":true,"linenr":true,"fires":true},"short_doc":"Converts a string to all upper case letters. ...","method_calls":null,"owner":"Ext.util.Format","inheritable":null,"params":[{"type":"String","tagname":"params","doc":"<p>The text to convert</p>\n","name":"value","html_type":"String"}],"tagname":"method","files":[{"linenr":201,"filename":"/Users/yshibukawa/personal/ext-4.2.1.883/src/util/Format.js"}],"return":{"type":"String","properties":null,"doc":"<p>The converted text</p>\n","name":"return","html_type":"String"},"private":null,"static":null,"name":"uppercase","doc":"<p>Converts a string to all upper case letters.</p>\n","chainable":false,"inheritdoc":null,"id":"method-uppercase","fires":null,"linenr":null},{"autodetected":{"method_calls":true,"inheritable":true,"static":true,"private":true,"chainable":true,"inheritdoc":true,"linenr":true,"fires":true},"short_doc":"Format a number as US currency. ...","method_calls":null,"owner":"Ext.util.Format","inheritable":null,"params":[{"type":"Number/String","tagname":"params","doc":"<p>The numeric value to format</p>\n","name":"value","html_type":"Number/String"}],"tagname":"method","files":[{"linenr":210,"filename":"/Users/yshibukawa/personal/ext-4.2.1.883/src/util/Format.js"}],"return":{"type":"String","properties":null,"doc":"<p>The formatted currency string</p>\n","name":"return","html_type":"String"},"private":null,"static":null,"name":"usMoney","doc":"<p>Format a number as US currency.</p>\n","chainable":false,"inheritdoc":null,"id":"method-usMoney","fires":null,"linenr":null}],"alternateClassNames":[],"doc":"<p>This class is a centralized place for formatting functions. It includes\nfunctions to format various different types of data, such as text, dates and numeric values.</p>\n\n<h2>Localization</h2>\n\n<p>This class contains several options for localization. These can be set once the library has loaded,\nall calls to the functions from that point will use the locale settings that were specified.</p>\n\n<p>Options include:</p>\n\n<ul>\n<li>thousandSeparator</li>\n<li>decimalSeparator</li>\n<li>currenyPrecision</li>\n<li>currencySign</li>\n<li>currencyAtEnd</li>\n</ul>\n\n\n<p>This class also uses the default date format defined here: <a href=\"#!/api/Ext.Date-property-defaultFormat\" rel=\"Ext.Date-property-defaultFormat\" class=\"docClass\">Ext.Date.defaultFormat</a>.</p>\n\n<h2>Using with renderers</h2>\n\n<p>There are two helper functions that return a new function that can be used in conjunction with\ngrid renderers:</p>\n\n<pre><code>columns: [{\n    dataIndex: 'date',\n    renderer: <a href=\"#!/api/Ext.util.Format-method-dateRenderer\" rel=\"Ext.util.Format-method-dateRenderer\" class=\"docClass\">Ext.util.Format.dateRenderer</a>('Y-m-d')\n}, {\n    dataIndex: 'time',\n    renderer: <a href=\"#!/api/Ext.util.Format-method-numberRenderer\" rel=\"Ext.util.Format-method-numberRenderer\" class=\"docClass\">Ext.util.Format.numberRenderer</a>('0.000')\n}]\n</code></pre>\n\n<p>Functions that only take a single argument can also be passed directly:</p>\n\n<pre><code>columns: [{\n    dataIndex: 'cost',\n    renderer: <a href=\"#!/api/Ext.util.Format-method-usMoney\" rel=\"Ext.util.Format-method-usMoney\" class=\"docClass\">Ext.util.Format.usMoney</a>\n}, {\n    dataIndex: 'productCode',\n    renderer: <a href=\"#!/api/Ext.util.Format-method-uppercase\" rel=\"Ext.util.Format-method-uppercase\" class=\"docClass\">Ext.util.Format.uppercase</a>\n}]\n</code></pre>\n\n<h2>Using with XTemplates</h2>\n\n<p>XTemplates can also directly use <a href=\"#!/api/Ext.util.Format\" rel=\"Ext.util.Format\" class=\"docClass\">Ext.util.Format</a> functions:</p>\n\n<pre><code>new <a href=\"#!/api/Ext.XTemplate\" rel=\"Ext.XTemplate\" class=\"docClass\">Ext.XTemplate</a>([\n    'Date: {startDate:date(\"Y-m-d\")}',\n    'Cost: {cost:usMoney}'\n]);\n</code></pre>\n","name":"Ext.util.Format","id":"class-Ext.util.Format"}