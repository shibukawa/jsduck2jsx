{"docauthor":[{"email":"jason@sencha.com","tagname":"docauthor","name":"Jason Johnston"}],"autodetected":{"aliases":true,"requires":true,"uses":true,"extends":true,"members":true,"alternateClassNames":true,"code_type":true,"mixins":true},"short_doc":"A mixin which allows a component to be configured and decorated with a label and/or error message as is\ncommon for fo...","aliases":{},"requires":["Ext.XTemplate"],"files":[{"linenr":21,"filename":"/Users/yshibukawa/personal/ext-4.2.1.883/src/form/Labelable.js"}],"tagname":"class","uses":[],"extends":"Ext.Base","members":[{"autodetected":{},"type":"String","short_doc":"If specified, then the component will be displayed with this value as its active error when first rendered. ...","default":null,"owner":"Ext.form.Labelable","tagname":"cfg","files":[{"linenr":369,"filename":"/Users/yshibukawa/personal/ext-4.2.1.883/src/form/Labelable.js"}],"name":"activeError","properties":null,"doc":"<p>If specified, then the component will be displayed with this value as its active error when first rendered. Use\n<a href=\"#!/api/Ext.form.Labelable-method-setActiveError\" rel=\"Ext.form.Labelable-method-setActiveError\" class=\"docClass\">setActiveError</a> or <a href=\"#!/api/Ext.form.Labelable-method-unsetActiveError\" rel=\"Ext.form.Labelable-method-unsetActiveError\" class=\"docClass\">unsetActiveError</a> to change it after component creation.</p>\n","id":"cfg-activeError","html_type":"String"},{"autodetected":{"default":true,"accessor":true,"inheritable":true,"static":true,"private":true,"inheritdoc":true,"linenr":true,"evented":true},"type":"String/String[]/Ext.XTemplate","short_doc":"The template used to format the Array of error messages passed to setActiveErrors into a single HTML\nstring. ...","default":null,"owner":"Ext.form.Labelable","accessor":null,"inheritable":null,"tagname":"cfg","files":[{"linenr":195,"filename":"/Users/yshibukawa/personal/ext-4.2.1.883/src/form/Labelable.js"}],"private":null,"static":null,"name":"activeErrorsTpl","properties":null,"doc":"<p>The template used to format the Array of error messages passed to <a href=\"#!/api/Ext.form.Labelable-method-setActiveErrors\" rel=\"Ext.form.Labelable-method-setActiveErrors\" class=\"docClass\">setActiveErrors</a> into a single HTML\nstring. if the <a href=\"#!/api/Ext.form.Labelable-cfg-msgTarget\" rel=\"Ext.form.Labelable-cfg-msgTarget\" class=\"docClass\">msgTarget</a> is title, it defaults to a list separated by new lines. Otherwise, it\nrenders each message as an item in an unordered list.</p>\n","inheritdoc":null,"id":"cfg-activeErrorsTpl","html_type":"String/String[]/<a href=\"#!/api/Ext.XTemplate\" rel=\"Ext.XTemplate\" class=\"docClass\">Ext.XTemplate</a>","evented":null,"linenr":null},{"autodetected":{"default":true,"accessor":true,"inheritable":true,"static":true,"private":true,"inheritdoc":true,"linenr":true,"evented":true},"type":"String/Array/Ext.XTemplate","short_doc":"An optional string or XTemplate configuration to insert in the field markup\nat the end of the input containing element. ...","default":null,"owner":"Ext.form.Labelable","accessor":null,"inheritable":null,"tagname":"cfg","files":[{"linenr":391,"filename":"/Users/yshibukawa/personal/ext-4.2.1.883/src/form/Labelable.js"}],"private":null,"static":null,"name":"afterBodyEl","properties":null,"doc":"<p>An optional string or <code>XTemplate</code> configuration to insert in the field markup\nat the end of the input containing element. If an <code>XTemplate</code> is used, the component's <a href=\"#!/api/Ext.AbstractComponent-cfg-renderData\" rel=\"Ext.AbstractComponent-cfg-renderData\" class=\"docClass\">render data</a>\nserves as the context.</p>\n","inheritdoc":null,"id":"cfg-afterBodyEl","html_type":"String/Array/<a href=\"#!/api/Ext.XTemplate\" rel=\"Ext.XTemplate\" class=\"docClass\">Ext.XTemplate</a>","evented":null,"linenr":null},{"autodetected":{"default":true,"accessor":true,"inheritable":true,"static":true,"private":true,"inheritdoc":true,"linenr":true,"evented":true},"type":"String/Array/Ext.XTemplate","short_doc":"An optional string or XTemplate configuration to insert in the field markup\nafter the label text. ...","default":null,"owner":"Ext.form.Labelable","accessor":null,"inheritable":null,"tagname":"cfg","files":[{"linenr":439,"filename":"/Users/yshibukawa/personal/ext-4.2.1.883/src/form/Labelable.js"}],"private":null,"static":null,"name":"afterLabelTextTpl","properties":null,"doc":"<p>An optional string or <code>XTemplate</code> configuration to insert in the field markup\nafter the label text. If an <code>XTemplate</code> is used, the component's <a href=\"#!/api/Ext.AbstractComponent-cfg-renderData\" rel=\"Ext.AbstractComponent-cfg-renderData\" class=\"docClass\">render data</a>\nserves as the context.</p>\n","inheritdoc":null,"id":"cfg-afterLabelTextTpl","html_type":"String/Array/<a href=\"#!/api/Ext.XTemplate\" rel=\"Ext.XTemplate\" class=\"docClass\">Ext.XTemplate</a>","evented":null,"linenr":null},{"autodetected":{"default":true,"accessor":true,"inheritable":true,"static":true,"private":true,"inheritdoc":true,"linenr":true,"evented":true},"type":"String/Array/Ext.XTemplate","short_doc":"An optional string or XTemplate configuration to insert in the field markup\nafter the label element. ...","default":null,"owner":"Ext.form.Labelable","accessor":null,"inheritable":null,"tagname":"cfg","files":[{"linenr":407,"filename":"/Users/yshibukawa/personal/ext-4.2.1.883/src/form/Labelable.js"}],"private":null,"static":null,"name":"afterLabelTpl","properties":null,"doc":"<p>An optional string or <code>XTemplate</code> configuration to insert in the field markup\nafter the label element. If an <code>XTemplate</code> is used, the component's <a href=\"#!/api/Ext.AbstractComponent-cfg-renderData\" rel=\"Ext.AbstractComponent-cfg-renderData\" class=\"docClass\">render data</a>\nserves as the context.</p>\n","inheritdoc":null,"id":"cfg-afterLabelTpl","html_type":"String/Array/<a href=\"#!/api/Ext.XTemplate\" rel=\"Ext.XTemplate\" class=\"docClass\">Ext.XTemplate</a>","evented":null,"linenr":null},{"autodetected":{"default":true,"accessor":true,"inheritable":true,"static":true,"private":true,"inheritdoc":true,"linenr":true,"evented":true},"type":"String/Array/Ext.XTemplate","short_doc":"An optional string or XTemplate configuration to insert in the field markup\nafter the subTpl markup. ...","default":null,"owner":"Ext.form.Labelable","accessor":null,"inheritable":null,"tagname":"cfg","files":[{"linenr":423,"filename":"/Users/yshibukawa/personal/ext-4.2.1.883/src/form/Labelable.js"}],"private":null,"static":null,"name":"afterSubTpl","properties":null,"doc":"<p>An optional string or <code>XTemplate</code> configuration to insert in the field markup\nafter the <a href=\"#!/api/Ext.form.Labelable-method-getSubTplMarkup\" rel=\"Ext.form.Labelable-method-getSubTplMarkup\" class=\"docClass\">subTpl markup</a>. If an <code>XTemplate</code> is used, the\ncomponent's <a href=\"#!/api/Ext.AbstractComponent-cfg-renderData\" rel=\"Ext.AbstractComponent-cfg-renderData\" class=\"docClass\">render data</a> serves as the context.</p>\n","inheritdoc":null,"id":"cfg-afterSubTpl","html_type":"String/Array/<a href=\"#!/api/Ext.XTemplate\" rel=\"Ext.XTemplate\" class=\"docClass\">Ext.XTemplate</a>","evented":null,"linenr":null},{"autodetected":{"default":true,"accessor":true,"inheritable":true,"static":true,"private":true,"inheritdoc":true,"linenr":true,"evented":true},"type":"Boolean","short_doc":"Whether to adjust the component's body area to make room for 'side' or 'under' error messages. ...","default":"true","owner":"Ext.form.Labelable","accessor":null,"inheritable":null,"tagname":"cfg","files":[{"linenr":346,"filename":"/Users/yshibukawa/personal/ext-4.2.1.883/src/form/Labelable.js"}],"private":null,"static":null,"name":"autoFitErrors","properties":null,"doc":"<p>Whether to adjust the component's body area to make room for 'side' or 'under' <a href=\"#!/api/Ext.form.Labelable-cfg-msgTarget\" rel=\"Ext.form.Labelable-cfg-msgTarget\" class=\"docClass\">error messages</a>.</p>\n","inheritdoc":null,"id":"cfg-autoFitErrors","html_type":"Boolean","evented":null,"linenr":null},{"autodetected":{"default":true,"accessor":true,"inheritable":true,"static":true,"private":true,"inheritdoc":true,"linenr":true,"evented":true},"type":"String","short_doc":"The CSS class to be applied to the body content element. ...","default":"Ext.baseCSSPrefix + 'form-item-body'","owner":"Ext.form.Labelable","accessor":null,"inheritable":null,"tagname":"cfg","files":[{"linenr":246,"filename":"/Users/yshibukawa/personal/ext-4.2.1.883/src/form/Labelable.js"}],"private":null,"static":null,"name":"baseBodyCls","properties":null,"doc":"<p>The CSS class to be applied to the body content element.</p>\n","inheritdoc":null,"id":"cfg-baseBodyCls","html_type":"String","evented":null,"linenr":null},{"autodetected":{"default":true,"accessor":true,"inheritable":true,"static":true,"private":true,"inheritdoc":true,"linenr":true,"evented":true},"type":"String/Array/Ext.XTemplate","short_doc":"An optional string or XTemplate configuration to insert in the field markup\nat the beginning of the input containing ...","default":null,"owner":"Ext.form.Labelable","accessor":null,"inheritable":null,"tagname":"cfg","files":[{"linenr":383,"filename":"/Users/yshibukawa/personal/ext-4.2.1.883/src/form/Labelable.js"}],"private":null,"static":null,"name":"beforeBodyEl","properties":null,"doc":"<p>An optional string or <code>XTemplate</code> configuration to insert in the field markup\nat the beginning of the input containing element. If an <code>XTemplate</code> is used, the component's <a href=\"#!/api/Ext.AbstractComponent-cfg-renderData\" rel=\"Ext.AbstractComponent-cfg-renderData\" class=\"docClass\">render data</a>\nserves as the context.</p>\n","inheritdoc":null,"id":"cfg-beforeBodyEl","html_type":"String/Array/<a href=\"#!/api/Ext.XTemplate\" rel=\"Ext.XTemplate\" class=\"docClass\">Ext.XTemplate</a>","evented":null,"linenr":null},{"autodetected":{"default":true,"accessor":true,"inheritable":true,"static":true,"private":true,"inheritdoc":true,"linenr":true,"evented":true},"type":"String/Array/Ext.XTemplate","short_doc":"An optional string or XTemplate configuration to insert in the field markup\nbefore the label text. ...","default":null,"owner":"Ext.form.Labelable","accessor":null,"inheritable":null,"tagname":"cfg","files":[{"linenr":431,"filename":"/Users/yshibukawa/personal/ext-4.2.1.883/src/form/Labelable.js"}],"private":null,"static":null,"name":"beforeLabelTextTpl","properties":null,"doc":"<p>An optional string or <code>XTemplate</code> configuration to insert in the field markup\nbefore the label text. If an <code>XTemplate</code> is used, the component's <a href=\"#!/api/Ext.AbstractComponent-cfg-renderData\" rel=\"Ext.AbstractComponent-cfg-renderData\" class=\"docClass\">render data</a>\nserves as the context.</p>\n","inheritdoc":null,"id":"cfg-beforeLabelTextTpl","html_type":"String/Array/<a href=\"#!/api/Ext.XTemplate\" rel=\"Ext.XTemplate\" class=\"docClass\">Ext.XTemplate</a>","evented":null,"linenr":null},{"autodetected":{"default":true,"accessor":true,"inheritable":true,"static":true,"private":true,"inheritdoc":true,"linenr":true,"evented":true},"type":"String/Array/Ext.XTemplate","short_doc":"An optional string or XTemplate configuration to insert in the field markup\nbefore the label element. ...","default":null,"owner":"Ext.form.Labelable","accessor":null,"inheritable":null,"tagname":"cfg","files":[{"linenr":399,"filename":"/Users/yshibukawa/personal/ext-4.2.1.883/src/form/Labelable.js"}],"private":null,"static":null,"name":"beforeLabelTpl","properties":null,"doc":"<p>An optional string or <code>XTemplate</code> configuration to insert in the field markup\nbefore the label element. If an <code>XTemplate</code> is used, the component's <a href=\"#!/api/Ext.AbstractComponent-cfg-renderData\" rel=\"Ext.AbstractComponent-cfg-renderData\" class=\"docClass\">render data</a>\nserves as the context.</p>\n","inheritdoc":null,"id":"cfg-beforeLabelTpl","html_type":"String/Array/<a href=\"#!/api/Ext.XTemplate\" rel=\"Ext.XTemplate\" class=\"docClass\">Ext.XTemplate</a>","evented":null,"linenr":null},{"autodetected":{"default":true,"accessor":true,"inheritable":true,"static":true,"private":true,"inheritdoc":true,"linenr":true,"evented":true},"type":"String/Array/Ext.XTemplate","short_doc":"An optional string or XTemplate configuration to insert in the field markup\nbefore the subTpl markup. ...","default":null,"owner":"Ext.form.Labelable","accessor":null,"inheritable":null,"tagname":"cfg","files":[{"linenr":415,"filename":"/Users/yshibukawa/personal/ext-4.2.1.883/src/form/Labelable.js"}],"private":null,"static":null,"name":"beforeSubTpl","properties":null,"doc":"<p>An optional string or <code>XTemplate</code> configuration to insert in the field markup\nbefore the <a href=\"#!/api/Ext.form.Labelable-method-getSubTplMarkup\" rel=\"Ext.form.Labelable-method-getSubTplMarkup\" class=\"docClass\">subTpl markup</a>. If an <code>XTemplate</code> is used, the\ncomponent's <a href=\"#!/api/Ext.AbstractComponent-cfg-renderData\" rel=\"Ext.AbstractComponent-cfg-renderData\" class=\"docClass\">render data</a> serves as the context.</p>\n","inheritdoc":null,"id":"cfg-beforeSubTpl","html_type":"String/Array/<a href=\"#!/api/Ext.XTemplate\" rel=\"Ext.XTemplate\" class=\"docClass\">Ext.XTemplate</a>","evented":null,"linenr":null},{"autodetected":{"default":true,"accessor":true,"inheritable":true,"static":true,"private":true,"inheritdoc":true,"linenr":true,"evented":true},"type":"String","short_doc":"The CSS class to be applied to the special clearing div rendered directly after the field contents wrapper to\nprovide...","default":"Ext.baseCSSPrefix + 'clear'","owner":"Ext.form.Labelable","accessor":null,"inheritable":null,"tagname":"cfg","files":[{"linenr":261,"filename":"/Users/yshibukawa/personal/ext-4.2.1.883/src/form/Labelable.js"}],"private":null,"static":null,"name":"clearCls","properties":null,"doc":"<p>The CSS class to be applied to the special clearing div rendered directly after the field contents wrapper to\nprovide field clearing.</p>\n","inheritdoc":null,"id":"cfg-clearCls","html_type":"String","evented":null,"linenr":null},{"autodetected":{"default":true,"accessor":true,"inheritable":true,"static":true,"private":true,"inheritdoc":true,"linenr":true,"evented":true},"type":"String","short_doc":"The CSS class to be applied to the error message element. ...","default":"Ext.baseCSSPrefix + 'form-error-msg'","owner":"Ext.form.Labelable","accessor":null,"inheritable":null,"tagname":"cfg","files":[{"linenr":240,"filename":"/Users/yshibukawa/personal/ext-4.2.1.883/src/form/Labelable.js"}],"private":null,"static":null,"name":"errorMsgCls","properties":null,"doc":"<p>The CSS class to be applied to the error message element.</p>\n","inheritdoc":null,"id":"cfg-errorMsgCls","html_type":"String","evented":null,"linenr":null},{"autodetected":{"default":true,"accessor":true,"inheritable":true,"static":true,"private":true,"inheritdoc":true,"linenr":true,"evented":true},"type":"String","short_doc":"An extra CSS class to be applied to the body content element in addition to baseBodyCls. ...","default":"''","owner":"Ext.form.Labelable","accessor":null,"inheritable":null,"tagname":"cfg","files":[{"linenr":255,"filename":"/Users/yshibukawa/personal/ext-4.2.1.883/src/form/Labelable.js"}],"private":null,"static":null,"name":"fieldBodyCls","properties":null,"doc":"<p>An extra CSS class to be applied to the body content element in addition to <a href=\"#!/api/Ext.form.Labelable-cfg-baseBodyCls\" rel=\"Ext.form.Labelable-cfg-baseBodyCls\" class=\"docClass\">baseBodyCls</a>.</p>\n","inheritdoc":null,"id":"cfg-fieldBodyCls","html_type":"String","evented":null,"linenr":null},{"autodetected":{"default":true,"accessor":true,"inheritable":true,"static":true,"private":true,"inheritdoc":true,"linenr":true,"evented":true},"type":"String","short_doc":"The label for the field. ...","default":null,"owner":"Ext.form.Labelable","accessor":null,"inheritable":null,"tagname":"cfg","files":[{"linenr":274,"filename":"/Users/yshibukawa/personal/ext-4.2.1.883/src/form/Labelable.js"}],"private":null,"static":null,"name":"fieldLabel","properties":null,"doc":"<p>The label for the field. It gets appended with the <a href=\"#!/api/Ext.form.Labelable-cfg-labelSeparator\" rel=\"Ext.form.Labelable-cfg-labelSeparator\" class=\"docClass\">labelSeparator</a>, and its position and sizing is\ndetermined by the <a href=\"#!/api/Ext.form.Labelable-cfg-labelAlign\" rel=\"Ext.form.Labelable-cfg-labelAlign\" class=\"docClass\">labelAlign</a>, <a href=\"#!/api/Ext.form.Labelable-cfg-labelWidth\" rel=\"Ext.form.Labelable-cfg-labelWidth\" class=\"docClass\">labelWidth</a>, and <a href=\"#!/api/Ext.form.Labelable-cfg-labelPad\" rel=\"Ext.form.Labelable-cfg-labelPad\" class=\"docClass\">labelPad</a> configs.</p>\n","inheritdoc":null,"id":"cfg-fieldLabel","html_type":"String","evented":null,"linenr":null},{"autodetected":{"default":true,"accessor":true,"inheritable":true,"static":true,"private":true,"inheritdoc":true,"linenr":true,"evented":true},"type":"String","short_doc":"A CSS class to be applied to the outermost element to denote that it is participating in the form field layout. ...","default":"Ext.baseCSSPrefix + 'form-item'","owner":"Ext.form.Labelable","accessor":null,"inheritable":null,"tagname":"cfg","files":[{"linenr":221,"filename":"/Users/yshibukawa/personal/ext-4.2.1.883/src/form/Labelable.js"}],"private":null,"static":null,"name":"formItemCls","properties":null,"doc":"<p>A CSS class to be applied to the outermost element to denote that it is participating in the form field layout.</p>\n","inheritdoc":null,"id":"cfg-formItemCls","html_type":"String","evented":null,"linenr":null},{"autodetected":{"default":true,"accessor":true,"inheritable":true,"static":true,"private":true,"inheritdoc":true,"linenr":true,"evented":true},"type":"Boolean","short_doc":"When set to true, the label element (fieldLabel and labelSeparator) will be automatically\nhidden if the fieldLabel is...","default":"true","owner":"Ext.form.Labelable","accessor":null,"inheritable":null,"tagname":"cfg","files":[{"linenr":328,"filename":"/Users/yshibukawa/personal/ext-4.2.1.883/src/form/Labelable.js"}],"private":null,"static":null,"name":"hideEmptyLabel","properties":null,"doc":"<p>When set to true, the label element (<a href=\"#!/api/Ext.form.Labelable-cfg-fieldLabel\" rel=\"Ext.form.Labelable-cfg-fieldLabel\" class=\"docClass\">fieldLabel</a> and <a href=\"#!/api/Ext.form.Labelable-cfg-labelSeparator\" rel=\"Ext.form.Labelable-cfg-labelSeparator\" class=\"docClass\">labelSeparator</a>) will be automatically\nhidden if the <a href=\"#!/api/Ext.form.Labelable-cfg-fieldLabel\" rel=\"Ext.form.Labelable-cfg-fieldLabel\" class=\"docClass\">fieldLabel</a> is empty. Setting this to false will cause the empty label element to be\nrendered and space to be reserved for it; this is useful if you want a field without a label to line up with\nother labeled fields in the same form.</p>\n\n<p>If you wish to unconditionall hide the label even if a non-empty fieldLabel is configured, then set the\n<a href=\"#!/api/Ext.form.Labelable-cfg-hideLabel\" rel=\"Ext.form.Labelable-cfg-hideLabel\" class=\"docClass\">hideLabel</a> config to true.</p>\n","inheritdoc":null,"id":"cfg-hideEmptyLabel","html_type":"Boolean","evented":null,"linenr":null},{"autodetected":{"default":true,"accessor":true,"inheritable":true,"static":true,"private":true,"inheritdoc":true,"linenr":true,"evented":true},"type":"Boolean","short_doc":"Set to true to completely hide the label element (fieldLabel and labelSeparator). ...","default":"false","owner":"Ext.form.Labelable","accessor":null,"inheritable":null,"tagname":"cfg","files":[{"linenr":321,"filename":"/Users/yshibukawa/personal/ext-4.2.1.883/src/form/Labelable.js"}],"private":null,"static":null,"name":"hideLabel","properties":null,"doc":"<p>Set to true to completely hide the label element (<a href=\"#!/api/Ext.form.Labelable-cfg-fieldLabel\" rel=\"Ext.form.Labelable-cfg-fieldLabel\" class=\"docClass\">fieldLabel</a> and <a href=\"#!/api/Ext.form.Labelable-cfg-labelSeparator\" rel=\"Ext.form.Labelable-cfg-labelSeparator\" class=\"docClass\">labelSeparator</a>). Also see\n<a href=\"#!/api/Ext.form.Labelable-cfg-hideEmptyLabel\" rel=\"Ext.form.Labelable-cfg-hideEmptyLabel\" class=\"docClass\">hideEmptyLabel</a>, which controls whether space will be reserved for an empty fieldLabel.</p>\n","inheritdoc":null,"id":"cfg-hideLabel","html_type":"Boolean","evented":null,"linenr":null},{"autodetected":{"default":true,"accessor":true,"inheritable":true,"static":true,"private":true,"inheritdoc":true,"linenr":true,"evented":true},"type":"String","short_doc":"The CSS class to use when marking the component invalid. ...","default":"Ext.baseCSSPrefix + 'form-invalid'","owner":"Ext.form.Labelable","accessor":null,"inheritable":null,"tagname":"cfg","files":[{"linenr":268,"filename":"/Users/yshibukawa/personal/ext-4.2.1.883/src/form/Labelable.js"}],"private":null,"static":null,"name":"invalidCls","properties":null,"doc":"<p>The CSS class to use when marking the component invalid.</p>\n","inheritdoc":null,"id":"cfg-invalidCls","html_type":"String","evented":null,"linenr":null},{"autodetected":{"default":true,"accessor":true,"inheritable":true,"static":true,"private":true,"inheritdoc":true,"linenr":true,"evented":true},"type":"String","short_doc":"Controls the position and alignment of the fieldLabel. ...","default":"'left'","owner":"Ext.form.Labelable","accessor":null,"inheritable":null,"tagname":"cfg","files":[{"linenr":281,"filename":"/Users/yshibukawa/personal/ext-4.2.1.883/src/form/Labelable.js"}],"private":null,"static":null,"name":"labelAlign","properties":null,"doc":"<p>Controls the position and alignment of the <a href=\"#!/api/Ext.form.Labelable-cfg-fieldLabel\" rel=\"Ext.form.Labelable-cfg-fieldLabel\" class=\"docClass\">fieldLabel</a>. Valid values are:</p>\n\n<ul>\n<li>\"left\" (the default) - The label is positioned to the left of the field, with its text aligned to the left.\nIts width is determined by the <a href=\"#!/api/Ext.form.Labelable-cfg-labelWidth\" rel=\"Ext.form.Labelable-cfg-labelWidth\" class=\"docClass\">labelWidth</a> config.</li>\n<li>\"top\" - The label is positioned above the field.</li>\n<li>\"right\" - The label is positioned to the left of the field, with its text aligned to the right.\nIts width is determined by the <a href=\"#!/api/Ext.form.Labelable-cfg-labelWidth\" rel=\"Ext.form.Labelable-cfg-labelWidth\" class=\"docClass\">labelWidth</a> config.</li>\n</ul>\n\n","inheritdoc":null,"id":"cfg-labelAlign","html_type":"String","evented":null,"linenr":null},{"autodetected":{"default":true,"accessor":true,"inheritable":true,"static":true,"private":true,"inheritdoc":true,"linenr":true,"evented":true},"type":"String/Array/Ext.XTemplate","short_doc":"An optional string or XTemplate configuration to insert in the field markup\ninside the label element (as attributes). ...","default":null,"owner":"Ext.form.Labelable","accessor":null,"inheritable":null,"tagname":"cfg","files":[{"linenr":447,"filename":"/Users/yshibukawa/personal/ext-4.2.1.883/src/form/Labelable.js"}],"private":null,"static":null,"name":"labelAttrTpl","properties":null,"doc":"<p>An optional string or <code>XTemplate</code> configuration to insert in the field markup\ninside the label element (as attributes). If an <code>XTemplate</code> is used, the component's\n<a href=\"#!/api/Ext.AbstractComponent-cfg-renderData\" rel=\"Ext.AbstractComponent-cfg-renderData\" class=\"docClass\">render data</a> serves as the context.</p>\n","inheritdoc":null,"id":"cfg-labelAttrTpl","html_type":"String/Array/<a href=\"#!/api/Ext.XTemplate\" rel=\"Ext.XTemplate\" class=\"docClass\">Ext.XTemplate</a>","evented":null,"linenr":null},{"autodetected":{"default":true,"accessor":true,"inheritable":true,"static":true,"private":true,"inheritdoc":true,"linenr":true,"evented":true},"type":"String","short_doc":"The CSS class to be applied to the label element. ...","default":"Ext.baseCSSPrefix + 'form-item-label'","owner":"Ext.form.Labelable","accessor":null,"inheritable":null,"tagname":"cfg","files":[{"linenr":227,"filename":"/Users/yshibukawa/personal/ext-4.2.1.883/src/form/Labelable.js"}],"private":null,"static":null,"name":"labelCls","properties":null,"doc":"<p>The CSS class to be applied to the label element. This (single) CSS class is used to formulate the renderSelector\nand drives the field layout where it is concatenated with a hyphen ('-') and <a href=\"#!/api/Ext.form.Labelable-cfg-labelAlign\" rel=\"Ext.form.Labelable-cfg-labelAlign\" class=\"docClass\">labelAlign</a>. To add\nadditional classes, use <a href=\"#!/api/Ext.form.Labelable-cfg-labelClsExtra\" rel=\"Ext.form.Labelable-cfg-labelClsExtra\" class=\"docClass\">labelClsExtra</a>.</p>\n","inheritdoc":null,"id":"cfg-labelCls","html_type":"String","evented":null,"linenr":null},{"autodetected":{},"type":"String","short_doc":"An optional string of one or more additional CSS classes to add to the label element. ...","default":null,"owner":"Ext.form.Labelable","tagname":"cfg","files":[{"linenr":235,"filename":"/Users/yshibukawa/personal/ext-4.2.1.883/src/form/Labelable.js"}],"name":"labelClsExtra","properties":null,"doc":"<p>An optional string of one or more additional CSS classes to add to the label element. Defaults to empty.</p>\n","id":"cfg-labelClsExtra","html_type":"String"},{"autodetected":{"default":true,"accessor":true,"inheritable":true,"static":true,"private":true,"inheritdoc":true,"linenr":true,"evented":true},"type":"Number","short_doc":"The amount of space in pixels between the fieldLabel and the input field. ...","default":"5","owner":"Ext.form.Labelable","accessor":null,"inheritable":null,"tagname":"cfg","files":[{"linenr":300,"filename":"/Users/yshibukawa/personal/ext-4.2.1.883/src/form/Labelable.js"}],"private":null,"static":null,"name":"labelPad","properties":null,"doc":"<p>The amount of space in pixels between the <a href=\"#!/api/Ext.form.Labelable-cfg-fieldLabel\" rel=\"Ext.form.Labelable-cfg-fieldLabel\" class=\"docClass\">fieldLabel</a> and the input field.</p>\n","inheritdoc":null,"id":"cfg-labelPad","html_type":"Number","evented":null,"linenr":null},{"autodetected":{"default":true,"accessor":true,"inheritable":true,"static":true,"private":true,"inheritdoc":true,"linenr":true,"evented":true},"type":"String","short_doc":"Character(s) to be inserted at the end of the label text. ...","default":"':'","owner":"Ext.form.Labelable","accessor":null,"inheritable":null,"tagname":"cfg","files":[{"linenr":307,"filename":"/Users/yshibukawa/personal/ext-4.2.1.883/src/form/Labelable.js"}],"private":null,"static":null,"name":"labelSeparator","properties":null,"doc":"<p>Character(s) to be inserted at the end of the <a href=\"#!/api/Ext.form.Labelable-cfg-fieldLabel\" rel=\"Ext.form.Labelable-cfg-fieldLabel\" class=\"docClass\">label text</a>.</p>\n\n<p>Set to empty string to hide the separator completely.</p>\n","inheritdoc":null,"id":"cfg-labelSeparator","html_type":"String","evented":null,"linenr":null},{"autodetected":{},"type":"String","default":null,"owner":"Ext.form.Labelable","tagname":"cfg","files":[{"linenr":316,"filename":"/Users/yshibukawa/personal/ext-4.2.1.883/src/form/Labelable.js"}],"name":"labelStyle","properties":null,"doc":"<p>A CSS style specification string to apply directly to this field's label.</p>\n","id":"cfg-labelStyle","html_type":"String"},{"autodetected":{"default":true,"accessor":true,"inheritable":true,"static":true,"private":true,"inheritdoc":true,"linenr":true,"evented":true},"type":"Number","short_doc":"The width of the fieldLabel in pixels. ...","default":"100","owner":"Ext.form.Labelable","accessor":null,"inheritable":null,"tagname":"cfg","files":[{"linenr":293,"filename":"/Users/yshibukawa/personal/ext-4.2.1.883/src/form/Labelable.js"}],"private":null,"static":null,"name":"labelWidth","properties":null,"doc":"<p>The width of the <a href=\"#!/api/Ext.form.Labelable-cfg-fieldLabel\" rel=\"Ext.form.Labelable-cfg-fieldLabel\" class=\"docClass\">fieldLabel</a> in pixels. Only applicable if the <a href=\"#!/api/Ext.form.Labelable-cfg-labelAlign\" rel=\"Ext.form.Labelable-cfg-labelAlign\" class=\"docClass\">labelAlign</a> is set to \"left\" or\n\"right\".</p>\n","inheritdoc":null,"id":"cfg-labelWidth","html_type":"Number","evented":null,"linenr":null},{"autodetected":{"default":true,"accessor":true,"inheritable":true,"static":true,"inheritdoc":true,"linenr":true,"evented":true},"type":"String/String[]/Ext.XTemplate","short_doc":"The rendering template for the field decorations. ...","default":"['<tr role=\"presentation\" id=\"{id}-inputRow\" <tpl if=\"inFormLayout\">id=\"{id}\"</tpl> class=\"{inputRowCls}\">', '<tpl if=\"labelOnLeft\">', '<td role=\"presentation\" id=\"{id}-labelCell\" style=\"{labelCellStyle}\" {labelCellAttrs}>', '{beforeLabelTpl}', '<label id=\"{id}-labelEl\" {labelAttrTpl}<tpl if=\"inputId\"> for=\"{inputId}\"</tpl> class=\"{labelCls}\"', '<tpl if=\"labelStyle\"> style=\"{labelStyle}\"</tpl>', ' unselectable=\"on\"', '>', '{beforeLabelTextTpl}', '<tpl if=\"fieldLabel\">{fieldLabel}{labelSeparator}</tpl>', '{afterLabelTextTpl}', '</label>', '{afterLabelTpl}', '</td>', '</tpl>', '<td role=\"presentation\" class=\"{baseBodyCls} {fieldBodyCls} {extraFieldBodyCls}\" id=\"{id}-bodyEl\" colspan=\"{bodyColspan}\" role=\"presentation\">', '{beforeBodyEl}', '<tpl if=\"labelAlign==\\'top\\'\">', '{beforeLabelTpl}', '<div role=\"presentation\" id=\"{id}-labelCell\" style=\"{labelCellStyle}\">', '<label id=\"{id}-labelEl\" {labelAttrTpl}<tpl if=\"inputId\"> for=\"{inputId}\"</tpl> class=\"{labelCls}\"', '<tpl if=\"labelStyle\"> style=\"{labelStyle}\"</tpl>', ' unselectable=\"on\"', '>', '{beforeLabelTextTpl}', '<tpl if=\"fieldLabel\">{fieldLabel}{labelSeparator}</tpl>', '{afterLabelTextTpl}', '</label>', '</div>', '{afterLabelTpl}', '</tpl>', '{beforeSubTpl}', '{[values.$comp.getSubTplMarkup(values)]}', '{afterSubTpl}', '<tpl if=\"msgTarget===\\'side\\'\">', '{afterBodyEl}', '</td>', '<td role=\"presentation\" id=\"{id}-sideErrorCell\" vAlign=\"{[values.labelAlign===\\'top\\' && !values.hideLabel ? \\'bottom\\' : \\'middle\\']}\" style=\"{[values.autoFitErrors ? \\'display:none\\' : \\'\\']}\" width=\"{errorIconWidth}\">', '<div role=\"presentation\" id=\"{id}-errorEl\" class=\"{errorMsgCls}\" style=\"display:none\"></div>', '</td>', '<tpl elseif=\"msgTarget==\\'under\\'\">', '<div role=\"presentation\" id=\"{id}-errorEl\" class=\"{errorMsgClass}\" colspan=\"2\" style=\"display:none\"></div>', '{afterBodyEl}', '</td>', '</tpl>', '</tr>', {disableFormats: true}]","owner":"Ext.form.Labelable","accessor":null,"inheritable":null,"tagname":"cfg","files":[{"linenr":84,"filename":"/Users/yshibukawa/personal/ext-4.2.1.883/src/form/Labelable.js"}],"private":true,"static":null,"name":"labelableRenderTpl","properties":null,"doc":"<p>The rendering template for the field decorations. Component classes using this mixin\nshould include logic to use this as their <a href=\"#!/api/Ext.AbstractComponent-cfg-renderTpl\" rel=\"Ext.AbstractComponent-cfg-renderTpl\" class=\"docClass\">renderTpl</a>,\nand implement the <a href=\"#!/api/Ext.form.Labelable-method-getSubTplMarkup\" rel=\"Ext.form.Labelable-method-getSubTplMarkup\" class=\"docClass\">getSubTplMarkup</a> method to generate the field body content.</p>\n\n<p>The structure of a field is a table as follows:</p>\n\n<p>If <code>labelAlign: 'left',</code>msgTarget: 'side'`</p>\n\n<pre><code> +----------------------+----------------------+-------------+\n | Label:               | InputField           | sideErrorEl |\n +----------------------+----------------------+-------------+\n</code></pre>\n\n<p>If <code>labelAlign: 'left',</code>msgTarget: 'under'`</p>\n\n<pre><code> +----------------------+------------------------------------+\n | Label:               | InputField      (colspan=2)        |\n |                      | underErrorEl                       |\n +----------------------+------------------------------------+\n</code></pre>\n\n<p>If <code>labelAlign: 'top',</code>msgTarget: 'side'`</p>\n\n<pre><code> +---------------------------------------------+-------------+\n | label                                       |             |\n | InputField                                  | sideErrorEl |\n +---------------------------------------------+-------------+\n</code></pre>\n\n<p>If <code>labelAlign: 'top',</code>msgTarget: 'under'`</p>\n\n<pre><code> +-----------------------------------------------------------+\n | label                                                     |\n | InputField                      (colspan=2)               |\n | underErrorEl                                              |\n +-----------------------------------------------------------+\n</code></pre>\n\n<p>The total columns always the same for fields with each setting of <a href=\"#!/api/Ext.form.Labelable-cfg-labelAlign\" rel=\"Ext.form.Labelable-cfg-labelAlign\" class=\"docClass\">labelAlign</a> because when\nrendered into a <a href=\"#!/api/Ext.layout.container.Form\" rel=\"Ext.layout.container.Form\" class=\"docClass\">Ext.layout.container.Form</a> layout, just the <code>TR</code> of the table\nwill be placed into the form's main <code>TABLE</code>, and the columns of all the siblings\nmust match so that they all line up. In a <a href=\"#!/api/Ext.layout.container.Form\" rel=\"Ext.layout.container.Form\" class=\"docClass\">Ext.layout.container.Form</a> layout, different\nsettings of <a href=\"#!/api/Ext.form.Labelable-cfg-labelAlign\" rel=\"Ext.form.Labelable-cfg-labelAlign\" class=\"docClass\">labelAlign</a> are not supported because of the incompatible column structure.</p>\n\n<p>When the triggerCell or side error cell are hidden or shown, the input cell's colspan\nis recalculated to maintain the correct 3 visible column count.</p>\n","inheritdoc":null,"id":"cfg-labelableRenderTpl","html_type":"String/String[]/<a href=\"#!/api/Ext.XTemplate\" rel=\"Ext.XTemplate\" class=\"docClass\">Ext.XTemplate</a>","evented":null,"linenr":null},{"autodetected":{"default":true,"accessor":true,"inheritable":true,"static":true,"private":true,"inheritdoc":true,"linenr":true,"evented":true},"type":"String","short_doc":"The location where the error message text should display. ...","default":"'qtip'","owner":"Ext.form.Labelable","accessor":null,"inheritable":null,"tagname":"cfg","files":[{"linenr":352,"filename":"/Users/yshibukawa/personal/ext-4.2.1.883/src/form/Labelable.js"}],"private":null,"static":null,"name":"msgTarget","properties":null,"doc":"<p>The location where the error message text should display. Must be one of the following values:</p>\n\n<ul>\n<li><p><code>qtip</code> Display a quick tip containing the message when the user hovers over the field.\nThis is the default.</p>\n\n<p><strong><a href=\"#!/api/Ext.tip.QuickTipManager-method-init\" rel=\"Ext.tip.QuickTipManager-method-init\" class=\"docClass\">Ext.tip.QuickTipManager.init</a> must have been called for this setting to work.</strong></p></li>\n<li><p><code>title</code> Display the message in a default browser title attribute popup.</p></li>\n<li><code>under</code> Add a block div beneath the field containing the error message.</li>\n<li><code>side</code> Add an error icon to the right of the field, displaying the message in a popup on hover.</li>\n<li><code>none</code> Don't display any error message. This might be useful if you are implementing custom error display.</li>\n<li><code>[element id]</code> Add the error message directly to the innerHTML of the specified element.</li>\n</ul>\n\n","inheritdoc":null,"id":"cfg-msgTarget","html_type":"String","evented":null,"linenr":null},{"autodetected":{"default":true,"accessor":true,"inheritable":true,"static":true,"private":true,"inheritdoc":true,"linenr":true,"evented":true},"type":"Boolean","short_doc":"true to disable displaying any error message set on this object. ...","default":"false","owner":"Ext.form.Labelable","accessor":null,"inheritable":null,"tagname":"cfg","files":[{"linenr":340,"filename":"/Users/yshibukawa/personal/ext-4.2.1.883/src/form/Labelable.js"}],"private":null,"static":null,"name":"preventMark","properties":null,"doc":"<p>true to disable displaying any <a href=\"#!/api/Ext.form.Labelable-method-setActiveError\" rel=\"Ext.form.Labelable-method-setActiveError\" class=\"docClass\">error message</a> set on this object.</p>\n","inheritdoc":null,"id":"cfg-preventMark","html_type":"Boolean","evented":null,"linenr":null},{"autodetected":{"type":true,"default":true,"inheritable":true,"readonly":true,"static":true,"inheritdoc":true,"linenr":true},"type":"String","short_doc":" ...","default":"'Ext.Base'","owner":"Ext.Base","inheritable":null,"readonly":null,"tagname":"property","files":[{"linenr":763,"filename":"/Users/yshibukawa/personal/ext-4.2.1.883/src/class/Base.js"}],"private":true,"static":null,"name":"$className","doc":"\n","inheritdoc":null,"id":"property-S-className","html_type":"String","linenr":null},{"autodetected":{"type":true,"default":true,"inheritable":true,"readonly":true,"tagname":"property","static":true,"private":true,"inheritdoc":true,"linenr":true},"type":"Object","short_doc":" ...","default":"{tag: 'table', cellpadding: 0}","owner":"Ext.form.Labelable","inheritable":null,"readonly":null,"tagname":"property","files":[{"linenr":46,"filename":"/Users/yshibukawa/personal/ext-4.2.1.883/src/form/Labelable.js"}],"private":true,"static":null,"name":"autoEl","doc":"\n","inheritdoc":null,"id":"property-autoEl","html_type":"Object","linenr":46},{"autodetected":{"default":true,"inheritable":true,"readonly":true,"static":true,"private":true,"inheritdoc":true,"linenr":true},"type":"Ext.Element","short_doc":"The div Element wrapping the component's contents. ...","default":null,"owner":"Ext.form.Labelable","inheritable":null,"readonly":null,"tagname":"property","files":[{"linenr":64,"filename":"/Users/yshibukawa/personal/ext-4.2.1.883/src/form/Labelable.js"}],"private":null,"static":null,"name":"bodyEl","properties":null,"doc":"<p>The div Element wrapping the component's contents. Only available after the component has been rendered.</p>\n","inheritdoc":null,"id":"property-bodyEl","html_type":"<a href=\"#!/api/Ext.dom.Element\" rel=\"Ext.dom.Element\" class=\"docClass\">Ext.Element</a>","linenr":null},{"overrides":[{"owner":"Ext.util.ElementContainer","link":"<a href=\"#!/api/Ext.util.ElementContainer-property-childEls\" rel=\"Ext.util.ElementContainer-property-childEls\" class=\"docClass\">Ext.util.ElementContainer.childEls</a>","name":"childEls"}],"autodetected":{"type":true,"default":true,"inheritable":true,"readonly":true,"tagname":"property","static":true,"private":true,"inheritdoc":true,"linenr":true},"type":"Array","short_doc":" ...","default":"['labelCell', 'labelEl', 'bodyEl', 'sideErrorCell', 'errorEl', 'inputRow']","owner":"Ext.form.Labelable","inheritable":null,"readonly":null,"tagname":"property","files":[{"linenr":51,"filename":"/Users/yshibukawa/personal/ext-4.2.1.883/src/form/Labelable.js"}],"private":true,"static":null,"name":"childEls","doc":"\n","inheritdoc":null,"id":"property-childEls","html_type":"Array","linenr":51},{"autodetected":{"type":true,"default":true,"inheritable":true,"readonly":true,"static":true,"inheritdoc":true,"linenr":true},"type":"Object","short_doc":" ...","default":"{}","owner":"Ext.Base","inheritable":null,"readonly":null,"tagname":"property","files":[{"linenr":772,"filename":"/Users/yshibukawa/personal/ext-4.2.1.883/src/class/Base.js"}],"private":true,"static":null,"name":"configMap","doc":"\n","inheritdoc":null,"id":"property-configMap","html_type":"Object","linenr":null},{"autodetected":{"default":true,"inheritable":true,"readonly":true,"static":true,"private":true,"inheritdoc":true,"linenr":true},"type":"Ext.Element","short_doc":"The div Element that will contain the component's error message(s). ...","default":null,"owner":"Ext.form.Labelable","inheritable":null,"readonly":null,"tagname":"property","files":[{"linenr":73,"filename":"/Users/yshibukawa/personal/ext-4.2.1.883/src/form/Labelable.js"}],"private":null,"static":null,"name":"errorEl","properties":null,"doc":"<p>The div Element that will contain the component's error message(s). Note that depending on the configured\n<a href=\"#!/api/Ext.form.Labelable-cfg-msgTarget\" rel=\"Ext.form.Labelable-cfg-msgTarget\" class=\"docClass\">msgTarget</a>, this element may be hidden in favor of some other form of presentation, but will always\nbe present in the DOM for use by assistive technologies.</p>\n","inheritdoc":null,"id":"property-errorEl","html_type":"<a href=\"#!/api/Ext.dom.Element\" rel=\"Ext.dom.Element\" class=\"docClass\">Ext.Element</a>","linenr":null},{"autodetected":{"type":true,"default":true,"inheritable":true,"readonly":true,"tagname":"property","static":true,"private":true,"inheritdoc":true,"linenr":true},"type":"Array","short_doc":" ...","default":"['<tpl if=\"errors && errors.length\">', '<ul class=\"{listCls}\"><tpl for=\"errors\"><li role=\"alert\">{.}</li></tpl></ul>', '</tpl>']","owner":"Ext.form.Labelable","inheritable":null,"readonly":null,"tagname":"property","files":[{"linenr":203,"filename":"/Users/yshibukawa/personal/ext-4.2.1.883/src/form/Labelable.js"}],"private":true,"static":null,"name":"htmlActiveErrorsTpl","doc":"\n","inheritdoc":null,"id":"property-htmlActiveErrorsTpl","html_type":"Array","linenr":203},{"autodetected":{"type":true,"default":true,"inheritable":true,"readonly":true,"static":true,"inheritdoc":true,"linenr":true},"type":"Array","short_doc":" ...","default":"[]","owner":"Ext.Base","inheritable":null,"readonly":null,"tagname":"property","files":[{"linenr":769,"filename":"/Users/yshibukawa/personal/ext-4.2.1.883/src/class/Base.js"}],"private":true,"static":null,"name":"initConfigList","doc":"\n","inheritdoc":null,"id":"property-initConfigList","html_type":"Array","linenr":null},{"autodetected":{"type":true,"default":true,"inheritable":true,"readonly":true,"static":true,"inheritdoc":true,"linenr":true},"type":"Object","short_doc":" ...","default":"{}","owner":"Ext.Base","inheritable":null,"readonly":null,"tagname":"property","files":[{"linenr":775,"filename":"/Users/yshibukawa/personal/ext-4.2.1.883/src/class/Base.js"}],"private":true,"static":null,"name":"initConfigMap","doc":"\n","inheritdoc":null,"id":"property-initConfigMap","html_type":"Object","linenr":null},{"autodetected":{"type":true,"default":true,"inheritable":true,"readonly":true,"tagname":"property","static":true,"private":true,"inheritdoc":true,"linenr":true},"type":"String","short_doc":"private ...","default":"Ext.baseCSSPrefix + 'form-item-input-row'","owner":"Ext.form.Labelable","inheritable":null,"readonly":null,"tagname":"property","files":[{"linenr":252,"filename":"/Users/yshibukawa/personal/ext-4.2.1.883/src/form/Labelable.js"}],"private":true,"static":null,"name":"inputRowCls","doc":"<p>private</p>\n","inheritdoc":null,"id":"property-inputRowCls","html_type":"String","linenr":null},{"autodetected":{"default":true,"inheritable":true,"readonly":true,"static":true,"private":true,"inheritdoc":true,"linenr":true},"type":"Boolean","short_doc":"Flag denoting that this object is labelable as a field. ...","default":"true","owner":"Ext.form.Labelable","inheritable":null,"readonly":null,"tagname":"property","files":[{"linenr":215,"filename":"/Users/yshibukawa/personal/ext-4.2.1.883/src/form/Labelable.js"}],"private":null,"static":null,"name":"isFieldLabelable","properties":null,"doc":"<p>Flag denoting that this object is labelable as a field. Always true.</p>\n","inheritdoc":null,"id":"property-isFieldLabelable","html_type":"Boolean","linenr":null},{"autodetected":{"type":true,"default":true,"inheritable":true,"readonly":true,"static":true,"inheritdoc":true,"linenr":true},"type":"Boolean","short_doc":" ...","default":"true","owner":"Ext.Base","inheritable":null,"readonly":null,"tagname":"property","files":[{"linenr":760,"filename":"/Users/yshibukawa/personal/ext-4.2.1.883/src/class/Base.js"}],"private":true,"static":null,"name":"isInstance","doc":"\n","inheritdoc":null,"id":"property-isInstance","html_type":"Boolean","linenr":null},{"autodetected":{"default":true,"inheritable":true,"readonly":true,"static":true,"private":true,"inheritdoc":true,"linenr":true},"type":"Ext.Element","short_doc":"The &lt;TD&gt; Element which contains the label Element for this component. ...","default":null,"owner":"Ext.form.Labelable","inheritable":null,"readonly":null,"tagname":"property","files":[{"linenr":52,"filename":"/Users/yshibukawa/personal/ext-4.2.1.883/src/form/Labelable.js"}],"private":null,"static":null,"name":"labelCell","properties":null,"doc":"<p>The <code>&lt;TD&gt;</code> Element which contains the label Element for this component. Only available after the component has been rendered.</p>\n","inheritdoc":null,"id":"property-labelCell","html_type":"<a href=\"#!/api/Ext.dom.Element\" rel=\"Ext.dom.Element\" class=\"docClass\">Ext.Element</a>","linenr":null},{"autodetected":{"default":true,"inheritable":true,"readonly":true,"static":true,"private":true,"inheritdoc":true,"linenr":true},"type":"Ext.Element","short_doc":"The label Element for this component. ...","default":null,"owner":"Ext.form.Labelable","inheritable":null,"readonly":null,"tagname":"property","files":[{"linenr":58,"filename":"/Users/yshibukawa/personal/ext-4.2.1.883/src/form/Labelable.js"}],"private":null,"static":null,"name":"labelEl","properties":null,"doc":"<p>The label Element for this component. Only available after the component has been rendered.</p>\n","inheritdoc":null,"id":"property-labelEl","html_type":"<a href=\"#!/api/Ext.dom.Element\" rel=\"Ext.dom.Element\" class=\"docClass\">Ext.Element</a>","linenr":null},{"autodetected":{"type":true,"default":true,"inheritable":true,"readonly":true,"tagname":"property","static":true,"private":true,"inheritdoc":true,"linenr":true},"type":"Array","short_doc":" ...","default":"['beforeBodyEl', 'afterBodyEl', 'beforeLabelTpl', 'afterLabelTpl', 'beforeSubTpl', 'afterSubTpl', 'beforeLabelTextTpl', 'afterLabelTextTpl', 'labelAttrTpl']","owner":"Ext.form.Labelable","inheritable":null,"readonly":null,"tagname":"property","files":[{"linenr":381,"filename":"/Users/yshibukawa/personal/ext-4.2.1.883/src/form/Labelable.js"}],"private":true,"static":null,"name":"labelableInsertions","doc":"\n","inheritdoc":null,"id":"property-labelableInsertions","html_type":"Array","linenr":381},{"autodetected":{"type":true,"default":true,"inheritable":true,"readonly":true,"tagname":"property","static":true,"private":true,"inheritdoc":true,"linenr":true},"type":"Array","short_doc":"This is an array to avoid a split on every call to Ext.copyTo ...","default":"['allowBlank', 'id', 'labelAlign', 'fieldBodyCls', 'extraFieldBodyCls', 'baseBodyCls', 'clearCls', 'labelSeparator', 'msgTarget', 'inputRowCls']","owner":"Ext.form.Labelable","inheritable":null,"readonly":null,"tagname":"property","files":[{"linenr":456,"filename":"/Users/yshibukawa/personal/ext-4.2.1.883/src/form/Labelable.js"}],"private":true,"static":null,"name":"labelableRenderProps","doc":"<p>This is an array to avoid a split on every call to <a href=\"#!/api/Ext-method-copyTo\" rel=\"Ext-method-copyTo\" class=\"docClass\">Ext.copyTo</a></p>\n","inheritdoc":null,"id":"property-labelableRenderProps","html_type":"Array","linenr":null},{"autodetected":{"type":true,"default":true,"inheritable":true,"readonly":true,"static":true,"inheritdoc":true,"linenr":true},"type":"Boolean","short_doc":"Tells the layout system that the height can be measured immediately because the width does not need setting. ...","default":"true","owner":"Ext.form.Labelable","inheritable":null,"readonly":null,"tagname":"property","files":[{"linenr":375,"filename":"/Users/yshibukawa/personal/ext-4.2.1.883/src/form/Labelable.js"}],"private":true,"static":null,"name":"noWrap","doc":"<p>Tells the layout system that the height can be measured immediately because the width does not need setting.</p>\n","inheritdoc":null,"id":"property-noWrap","html_type":"Boolean","linenr":null},{"autodetected":{"type":true,"default":true,"inheritable":true,"readonly":true,"tagname":"property","static":true,"private":true,"inheritdoc":true,"linenr":true},"type":"Array","short_doc":" ...","default":"['<tpl if=\"errors && errors.length\">', '<tpl for=\"errors\"><tpl if=\"xindex &gt; 1\">\\n</tpl>{.}</tpl>', '</tpl>']","owner":"Ext.form.Labelable","inheritable":null,"readonly":null,"tagname":"property","files":[{"linenr":209,"filename":"/Users/yshibukawa/personal/ext-4.2.1.883/src/form/Labelable.js"}],"private":true,"static":null,"name":"plaintextActiveErrorsTpl","doc":"\n","inheritdoc":null,"id":"property-plaintextActiveErrorsTpl","html_type":"Array","linenr":209},{"autodetected":{"default":true,"inheritable":true,"readonly":true,"static":true,"private":true,"inheritdoc":true,"linenr":true},"type":"Ext.Class","short_doc":"Get the reference to the current class from which this object was instantiated. ...","default":null,"owner":"Ext.Base","inheritable":null,"readonly":null,"tagname":"property","files":[{"linenr":1045,"filename":"/Users/yshibukawa/personal/ext-4.2.1.883/src/class/Base.js"}],"protected":true,"private":null,"static":null,"name":"self","properties":null,"doc":"<p>Get the reference to the current class from which this object was instantiated. Unlike <a href=\"#!/api/Ext.Base-method-statics\" rel=\"Ext.Base-method-statics\" class=\"docClass\">statics</a>,\n<code>this.self</code> is scope-dependent and it's meant to be used for dynamic inheritance. See <a href=\"#!/api/Ext.Base-method-statics\" rel=\"Ext.Base-method-statics\" class=\"docClass\">statics</a>\nfor a detailed comparison</p>\n\n<pre><code><a href=\"#!/api/Ext-method-define\" rel=\"Ext-method-define\" class=\"docClass\">Ext.define</a>('My.Cat', {\n    statics: {\n        speciesName: 'Cat' // My.Cat.speciesName = 'Cat'\n    },\n\n    constructor: function() {\n        alert(this.self.speciesName); // dependent on 'this'\n    },\n\n    clone: function() {\n        return new this.self();\n    }\n});\n\n\n<a href=\"#!/api/Ext-method-define\" rel=\"Ext-method-define\" class=\"docClass\">Ext.define</a>('My.SnowLeopard', {\n    extend: 'My.Cat',\n    statics: {\n        speciesName: 'Snow Leopard'         // My.SnowLeopard.speciesName = 'Snow Leopard'\n    }\n});\n\nvar cat = new My.Cat();                     // alerts 'Cat'\nvar snowLeopard = new My.SnowLeopard();     // alerts 'Snow Leopard'\n\nvar clone = snowLeopard.clone();\nalert(<a href=\"#!/api/Ext-method-getClassName\" rel=\"Ext-method-getClassName\" class=\"docClass\">Ext.getClassName</a>(clone));             // alerts 'My.SnowLeopard'\n</code></pre>\n","inheritdoc":null,"id":"property-self","html_type":"<a href=\"#!/api/Ext.Class\" rel=\"Ext.Class\" class=\"docClass\">Ext.Class</a>","linenr":null},{"autodetected":{"type":true,"default":true,"inheritable":true,"readonly":true,"tagname":"property","static":true,"private":true,"inheritdoc":true,"linenr":true},"type":"Object","default":null,"owner":"Ext.form.Labelable","inheritable":null,"readonly":null,"tagname":"property","files":[{"linenr":617,"filename":"/Users/yshibukawa/personal/ext-4.2.1.883/src/form/Labelable.js"}],"private":true,"static":null,"name":"xhooks","doc":"\n","inheritdoc":null,"id":"property-xhooks","html_type":"Object","linenr":617},{"autodetected":{"type":true,"default":true,"readonly":true,"inheritdoc":true,"linenr":true},"type":"Array","short_doc":" ...","default":"[]","owner":"Ext.Base","inheritable":true,"readonly":null,"tagname":"property","files":[{"linenr":133,"filename":"/Users/yshibukawa/personal/ext-4.2.1.883/src/class/Base.js"}],"private":true,"static":true,"name":"$onExtended","doc":"\n","inheritdoc":null,"id":"static-property-S-onExtended","html_type":"Array","linenr":null},{"autodetected":{"method_calls":true,"inheritable":true,"static":true,"private":true,"chainable":true,"inheritdoc":true,"linenr":true,"fires":true},"short_doc":"Call the original method that was previously overridden with override\n\nExt.define('My.Cat', {\n    constructor: functi...","method_calls":null,"owner":"Ext.Base","inheritable":null,"params":[{"type":"Array/Arguments","tagname":"params","doc":"<p>The arguments, either an array or the <code>arguments</code> object\nfrom the current method, for example: <code>this.callOverridden(arguments)</code></p>\n","name":"args","html_type":"Array/Arguments"}],"tagname":"method","files":[{"linenr":1269,"filename":"/Users/yshibukawa/personal/ext-4.2.1.883/src/class/Base.js"}],"protected":true,"return":{"type":"Object","properties":null,"doc":"<p>Returns the result of calling the overridden method</p>\n","name":"return","html_type":"Object"},"private":null,"static":null,"name":"callOverridden","doc":"<p>Call the original method that was previously overridden with <a href=\"#!/api/Ext.Base-static-method-override\" rel=\"Ext.Base-static-method-override\" class=\"docClass\">override</a></p>\n\n<pre><code><a href=\"#!/api/Ext-method-define\" rel=\"Ext-method-define\" class=\"docClass\">Ext.define</a>('My.Cat', {\n    constructor: function() {\n        alert(\"I'm a cat!\");\n    }\n});\n\nMy.Cat.override({\n    constructor: function() {\n        alert(\"I'm going to be a cat!\");\n\n        this.callOverridden();\n\n        alert(\"Meeeeoooowwww\");\n    }\n});\n\nvar kitty = new My.Cat(); // alerts \"I'm going to be a cat!\"\n                          // alerts \"I'm a cat!\"\n                          // alerts \"Meeeeoooowwww\"\n</code></pre>\n","chainable":null,"inheritdoc":null,"id":"method-callOverridden","deprecated":{"text":"<p>as of 4.1. Use <a href=\"#!/api/Ext.Base-method-callParent\" rel=\"Ext.Base-method-callParent\" class=\"docClass\">callParent</a> instead.</p>\n"},"fires":null,"linenr":null},{"autodetected":{"method_calls":true,"inheritable":true,"static":true,"private":true,"chainable":true,"inheritdoc":true,"linenr":true,"fires":true},"short_doc":"Call the \"parent\" method of the current method. ...","method_calls":null,"owner":"Ext.Base","inheritable":null,"params":[{"type":"Array/Arguments","tagname":"params","doc":"<p>The arguments, either an array or the <code>arguments</code> object\nfrom the current method, for example: <code>this.callParent(arguments)</code></p>\n","name":"args","html_type":"Array/Arguments"}],"tagname":"method","files":[{"linenr":846,"filename":"/Users/yshibukawa/personal/ext-4.2.1.883/src/class/Base.js"}],"protected":true,"return":{"type":"Object","properties":null,"doc":"<p>Returns the result of calling the parent method</p>\n","name":"return","html_type":"Object"},"private":null,"static":null,"name":"callParent","doc":"<p>Call the \"parent\" method of the current method. That is the method previously\noverridden by derivation or by an override (see <a href=\"#!/api/Ext-method-define\" rel=\"Ext-method-define\" class=\"docClass\">Ext.define</a>).</p>\n\n<pre><code> <a href=\"#!/api/Ext-method-define\" rel=\"Ext-method-define\" class=\"docClass\">Ext.define</a>('My.Base', {\n     constructor: function (x) {\n         this.x = x;\n     },\n\n     statics: {\n         method: function (x) {\n             return x;\n         }\n     }\n });\n\n <a href=\"#!/api/Ext-method-define\" rel=\"Ext-method-define\" class=\"docClass\">Ext.define</a>('My.Derived', {\n     extend: 'My.Base',\n\n     constructor: function () {\n         this.callParent([21]);\n     }\n });\n\n var obj = new My.Derived();\n\n alert(obj.x);  // alerts 21\n</code></pre>\n\n<p>This can be used with an override as follows:</p>\n\n<pre><code> <a href=\"#!/api/Ext-method-define\" rel=\"Ext-method-define\" class=\"docClass\">Ext.define</a>('My.DerivedOverride', {\n     override: 'My.Derived',\n\n     constructor: function (x) {\n         this.callParent([x*2]); // calls original My.Derived constructor\n     }\n });\n\n var obj = new My.Derived();\n\n alert(obj.x);  // now alerts 42\n</code></pre>\n\n<p>This also works with static methods.</p>\n\n<pre><code> <a href=\"#!/api/Ext-method-define\" rel=\"Ext-method-define\" class=\"docClass\">Ext.define</a>('My.Derived2', {\n     extend: 'My.Base',\n\n     statics: {\n         method: function (x) {\n             return this.callParent([x*2]); // calls My.Base.method\n         }\n     }\n });\n\n alert(My.Base.method(10);     // alerts 10\n alert(My.Derived2.method(10); // alerts 20\n</code></pre>\n\n<p>Lastly, it also works with overridden static methods.</p>\n\n<pre><code> <a href=\"#!/api/Ext-method-define\" rel=\"Ext-method-define\" class=\"docClass\">Ext.define</a>('My.Derived2Override', {\n     override: 'My.Derived2',\n\n     statics: {\n         method: function (x) {\n             return this.callParent([x*2]); // calls My.Derived2.method\n         }\n     }\n });\n\n alert(My.Derived2.method(10); // now alerts 40\n</code></pre>\n\n<p>To override a method and replace it and also call the superclass method, use\n<a href=\"#!/api/Ext.Base-method-callSuper\" rel=\"Ext.Base-method-callSuper\" class=\"docClass\">callSuper</a>. This is often done to patch a method to fix a bug.</p>\n","chainable":false,"inheritdoc":null,"id":"method-callParent","fires":null,"linenr":null},{"autodetected":{"method_calls":true,"inheritable":true,"static":true,"private":true,"chainable":true,"inheritdoc":true,"linenr":true,"fires":true},"short_doc":"This method is used by an override to call the superclass method but bypass any\noverridden method. ...","method_calls":null,"owner":"Ext.Base","inheritable":null,"params":[{"type":"Array/Arguments","tagname":"params","doc":"<p>The arguments, either an array or the <code>arguments</code> object\nfrom the current method, for example: <code>this.callSuper(arguments)</code></p>\n","name":"args","html_type":"Array/Arguments"}],"tagname":"method","files":[{"linenr":961,"filename":"/Users/yshibukawa/personal/ext-4.2.1.883/src/class/Base.js"}],"protected":true,"return":{"type":"Object","properties":null,"doc":"<p>Returns the result of calling the superclass method</p>\n","name":"return","html_type":"Object"},"private":null,"static":null,"name":"callSuper","doc":"<p>This method is used by an override to call the superclass method but bypass any\noverridden method. This is often done to \"patch\" a method that contains a bug\nbut for whatever reason cannot be fixed directly.</p>\n\n<p>Consider:</p>\n\n<pre><code> <a href=\"#!/api/Ext-method-define\" rel=\"Ext-method-define\" class=\"docClass\">Ext.define</a>('Ext.some.Class', {\n     method: function () {\n         console.log('Good');\n     }\n });\n\n <a href=\"#!/api/Ext-method-define\" rel=\"Ext-method-define\" class=\"docClass\">Ext.define</a>('Ext.some.DerivedClass', {\n     method: function () {\n         console.log('Bad');\n\n         // ... logic but with a bug ...\n\n         this.callParent();\n     }\n });\n</code></pre>\n\n<p>To patch the bug in <code>DerivedClass.method</code>, the typical solution is to create an\noverride:</p>\n\n<pre><code> <a href=\"#!/api/Ext-method-define\" rel=\"Ext-method-define\" class=\"docClass\">Ext.define</a>('App.paches.DerivedClass', {\n     override: 'Ext.some.DerivedClass',\n\n     method: function () {\n         console.log('Fixed');\n\n         // ... logic but with bug fixed ...\n\n         this.callSuper();\n     }\n });\n</code></pre>\n\n<p>The patch method cannot use <code>callParent</code> to call the superclass <code>method</code> since\nthat would call the overridden method containing the bug. In other words, the\nabove patch would only produce \"Fixed\" then \"Good\" in the console log, whereas,\nusing <code>callParent</code> would produce \"Fixed\" then \"Bad\" then \"Good\".</p>\n","chainable":false,"inheritdoc":null,"id":"method-callSuper","fires":null,"linenr":null},{"autodetected":{"method_calls":true,"inheritable":true,"params":true,"static":true,"chainable":true,"inheritdoc":true,"linenr":true,"fires":true},"short_doc":" ...","method_calls":null,"owner":"Ext.Base","inheritable":null,"params":[],"tagname":"method","files":[{"linenr":766,"filename":"/Users/yshibukawa/personal/ext-4.2.1.883/src/class/Base.js"}],"private":true,"static":null,"name":"configClass","doc":"\n","chainable":null,"inheritdoc":null,"id":"method-configClass","fires":null,"linenr":null},{"overrides":[{"owner":"Ext.state.Stateful","link":"<a href=\"#!/api/Ext.state.Stateful-method-destroy\" rel=\"Ext.state.Stateful-method-destroy\" class=\"docClass\">Ext.state.Stateful.destroy</a>","name":"destroy"},{"owner":"Ext.AbstractComponent","link":"<a href=\"#!/api/Ext.AbstractComponent-method-destroy\" rel=\"Ext.AbstractComponent-method-destroy\" class=\"docClass\">Ext.AbstractComponent.destroy</a>","name":"destroy"},{"owner":"Ext.AbstractPlugin","link":"<a href=\"#!/api/Ext.AbstractPlugin-method-destroy\" rel=\"Ext.AbstractPlugin-method-destroy\" class=\"docClass\">Ext.AbstractPlugin.destroy</a>","name":"destroy"}],"autodetected":{"method_calls":true,"inheritable":true,"params":true,"static":true,"chainable":true,"inheritdoc":true,"linenr":true,"fires":true},"short_doc":" ...","method_calls":null,"owner":"Ext.Base","inheritable":null,"params":[],"tagname":"method","files":[{"linenr":1261,"filename":"/Users/yshibukawa/personal/ext-4.2.1.883/src/class/Base.js"}],"private":true,"static":null,"name":"destroy","doc":"\n","chainable":false,"inheritdoc":null,"id":"method-destroy","fires":null,"linenr":null},{"autodetected":{"method_calls":true,"inheritable":true,"params":true,"static":true,"private":true,"chainable":true,"inheritdoc":true,"linenr":true,"fires":true},"short_doc":"Gets the active error message for this component, if any. ...","method_calls":null,"owner":"Ext.form.Labelable","inheritable":null,"params":[],"tagname":"method","files":[{"linenr":763,"filename":"/Users/yshibukawa/personal/ext-4.2.1.883/src/form/Labelable.js"}],"return":{"type":"String","properties":null,"doc":"<p>The active error message on the component; if there is no error, an empty string is returned.</p>\n","name":"return","html_type":"String"},"private":null,"static":null,"name":"getActiveError","doc":"<p>Gets the active error message for this component, if any. This does not trigger validation on its own, it merely\nreturns any message that the component may already hold.</p>\n","chainable":false,"inheritdoc":null,"id":"method-getActiveError","fires":null,"linenr":null},{"autodetected":{"method_calls":true,"inheritable":true,"params":true,"static":true,"private":true,"chainable":true,"inheritdoc":true,"linenr":true,"fires":true},"short_doc":"Gets an Array of any active error messages currently applied to the field. ...","method_calls":null,"owner":"Ext.form.Labelable","inheritable":null,"params":[],"tagname":"method","files":[{"linenr":793,"filename":"/Users/yshibukawa/personal/ext-4.2.1.883/src/form/Labelable.js"}],"return":{"type":"String[]","properties":null,"doc":"<p>The active error messages on the component; if there are no errors, an empty Array is\nreturned.</p>\n","name":"return","html_type":"String[]"},"private":null,"static":null,"name":"getActiveErrors","doc":"<p>Gets an Array of any active error messages currently applied to the field. This does not trigger validation on\nits own, it merely returns any messages that the component may already hold.</p>\n","chainable":false,"inheritdoc":null,"id":"method-getActiveErrors","fires":null,"linenr":null},{"autodetected":{"method_calls":true,"inheritable":true,"params":true,"static":true,"chainable":true,"inheritdoc":true,"linenr":true,"fires":true},"short_doc":"Calculates the colspan value for the body cell - the cell which contains the input field. ...","method_calls":["hasActiveError","hasVisibleLabel"],"owner":"Ext.form.Labelable","inheritable":null,"params":[],"tagname":"method","files":[{"linenr":667,"filename":"/Users/yshibukawa/personal/ext-4.2.1.883/src/form/Labelable.js"}],"private":true,"static":null,"name":"getBodyColspan","doc":"<p>Calculates the colspan value for the body cell - the cell which contains the input field.</p>\n\n<p>The field table structure contains 4 columns:</p>\n","chainable":false,"inheritdoc":null,"id":"method-getBodyColspan","fires":[],"linenr":null},{"autodetected":{"method_calls":true,"inheritable":true,"static":true,"chainable":true,"inheritdoc":true,"linenr":true,"fires":true},"short_doc":" ...","method_calls":null,"owner":"Ext.Base","inheritable":null,"params":[{"type":"Object","tagname":"params","doc":"\n","name":"name","html_type":"Object"}],"tagname":"method","files":[{"linenr":1196,"filename":"/Users/yshibukawa/personal/ext-4.2.1.883/src/class/Base.js"}],"private":true,"static":null,"name":"getConfig","doc":"\n","chainable":false,"inheritdoc":null,"id":"method-getConfig","fires":null,"linenr":null},{"autodetected":{"method_calls":true,"inheritable":true,"params":true,"tagname":"method","static":true,"private":true,"chainable":true,"inheritdoc":true,"linenr":true,"fires":true},"short_doc":" ...","method_calls":null,"owner":"Ext.form.Labelable","inheritable":null,"params":[],"tagname":"method","files":[{"linenr":702,"filename":"/Users/yshibukawa/personal/ext-4.2.1.883/src/form/Labelable.js"}],"private":true,"static":null,"name":"getErrorMsgCls","doc":"\n","chainable":false,"inheritdoc":null,"id":"method-getErrorMsgCls","fires":null,"linenr":702},{"autodetected":{"method_calls":true,"inheritable":true,"params":true,"static":true,"private":true,"chainable":true,"inheritdoc":true,"linenr":true,"fires":true},"short_doc":"Returns the label for the field. ...","method_calls":["trimLabelSeparator"],"owner":"Ext.form.Labelable","inheritable":null,"params":[],"tagname":"method","files":[{"linenr":518,"filename":"/Users/yshibukawa/personal/ext-4.2.1.883/src/form/Labelable.js"}],"return":{"type":"String","properties":null,"doc":"<p>The configured field label, or empty string if not defined</p>\n","name":"return","html_type":"String"},"private":null,"static":null,"name":"getFieldLabel","template":true,"doc":"<p>Returns the label for the field. Defaults to simply returning the <a href=\"#!/api/Ext.form.Labelable-cfg-fieldLabel\" rel=\"Ext.form.Labelable-cfg-fieldLabel\" class=\"docClass\">fieldLabel</a> config. Can be overridden\nto provide a custom generated label.</p>\n","chainable":false,"inheritdoc":null,"id":"method-getFieldLabel","fires":[],"linenr":null},{"autodetected":{"method_calls":true,"inheritable":true,"static":true,"private":true,"chainable":true,"inheritdoc":true,"linenr":true,"fires":true},"short_doc":"Returns the initial configuration passed to constructor when instantiating\nthis class. ...","method_calls":null,"owner":"Ext.Base","inheritable":null,"params":[{"type":"String","tagname":"params","doc":"<p>Name of the config option to return.</p>\n","name":"name","optional":true,"html_type":"String"}],"tagname":"method","files":[{"linenr":1206,"filename":"/Users/yshibukawa/personal/ext-4.2.1.883/src/class/Base.js"}],"return":{"type":"Object/Mixed","properties":null,"doc":"<p>The full config object or a single config value\nwhen <code>name</code> parameter specified.</p>\n","name":"return","html_type":"Object/Mixed"},"private":null,"static":null,"name":"getInitialConfig","doc":"<p>Returns the initial configuration passed to constructor when instantiating\nthis class.</p>\n","chainable":false,"inheritdoc":null,"id":"method-getInitialConfig","fires":null,"linenr":null},{"autodetected":{"method_calls":true,"inheritable":true,"params":true,"static":true,"private":true,"chainable":true,"inheritdoc":true,"linenr":true,"fires":true},"short_doc":"Get the input id, if any, for this component. ...","method_calls":null,"owner":"Ext.form.Labelable","inheritable":null,"params":[],"tagname":"method","files":[{"linenr":754,"filename":"/Users/yshibukawa/personal/ext-4.2.1.883/src/form/Labelable.js"}],"return":{"type":"String","properties":null,"doc":"<p>The input id</p>\n","name":"return","html_type":"String"},"private":null,"static":null,"name":"getInputId","doc":"<p>Get the input id, if any, for this component. This is used as the \"for\" attribute on the label element.\nImplementing subclasses may also use this as e.g. the id for their own input element.</p>\n","chainable":false,"inheritdoc":null,"id":"method-getInputId","fires":null,"linenr":null},{"autodetected":{"method_calls":true,"inheritable":true,"params":true,"tagname":"method","static":true,"private":true,"chainable":true,"inheritdoc":true,"linenr":true,"fires":true},"short_doc":" ...","method_calls":null,"owner":"Ext.form.Labelable","inheritable":null,"params":[{"type":"Object","name":"data","html_type":"Object"},{"type":"Object","name":"names","html_type":"Object"}],"tagname":"method","files":[{"linenr":555,"filename":"/Users/yshibukawa/personal/ext-4.2.1.883/src/form/Labelable.js"}],"private":true,"static":null,"name":"getInsertionRenderData","doc":"\n","chainable":false,"inheritdoc":null,"id":"method-getInsertionRenderData","fires":null,"linenr":555},{"autodetected":{"method_calls":true,"inheritable":true,"params":true,"tagname":"method","static":true,"private":true,"chainable":true,"inheritdoc":true,"linenr":true,"fires":true},"short_doc":" ...","method_calls":null,"owner":"Ext.form.Labelable","inheritable":null,"params":[],"tagname":"method","files":[{"linenr":709,"filename":"/Users/yshibukawa/personal/ext-4.2.1.883/src/form/Labelable.js"}],"private":true,"static":null,"name":"getLabelCellAttrs","doc":"\n","chainable":false,"inheritdoc":null,"id":"method-getLabelCellAttrs","fires":null,"linenr":709},{"autodetected":{"method_calls":true,"inheritable":true,"params":true,"tagname":"method","static":true,"private":true,"chainable":true,"inheritdoc":true,"linenr":true,"fires":true},"short_doc":" ...","method_calls":["getFieldLabel"],"owner":"Ext.form.Labelable","inheritable":null,"params":[],"tagname":"method","files":[{"linenr":695,"filename":"/Users/yshibukawa/personal/ext-4.2.1.883/src/form/Labelable.js"}],"private":true,"static":null,"name":"getLabelCellStyle","doc":"\n","chainable":false,"inheritdoc":null,"id":"method-getLabelCellStyle","fires":[],"linenr":695},{"autodetected":{"method_calls":true,"inheritable":true,"params":true,"tagname":"method","static":true,"private":true,"chainable":true,"inheritdoc":true,"linenr":true,"fires":true},"short_doc":" ...","method_calls":null,"owner":"Ext.form.Labelable","inheritable":null,"params":[],"tagname":"method","files":[{"linenr":688,"filename":"/Users/yshibukawa/personal/ext-4.2.1.883/src/form/Labelable.js"}],"private":true,"static":null,"name":"getLabelCls","doc":"\n","chainable":false,"inheritdoc":null,"id":"method-getLabelCls","fires":null,"linenr":688},{"autodetected":{"method_calls":true,"inheritable":true,"params":true,"static":true,"chainable":true,"inheritdoc":true,"linenr":true,"fires":true},"short_doc":"Gets any label styling for the labelEl ...","method_calls":null,"owner":"Ext.form.Labelable","inheritable":null,"params":[],"tagname":"method","files":[{"linenr":720,"filename":"/Users/yshibukawa/personal/ext-4.2.1.883/src/form/Labelable.js"}],"return":{"type":"String","properties":null,"doc":"<p>The label styling</p>\n","name":"return","html_type":"String"},"private":true,"static":null,"name":"getLabelStyle","doc":"<p>Gets any label styling for the labelEl</p>\n","chainable":false,"inheritdoc":null,"id":"method-getLabelStyle","fires":null,"linenr":null},{"autodetected":{"method_calls":true,"inheritable":true,"params":true,"static":true,"private":true,"chainable":true,"inheritdoc":true,"linenr":true,"fires":true},"short_doc":"Gets the width of the label (if visible) ...","method_calls":["hasVisibleLabel"],"owner":"Ext.form.Labelable","inheritable":null,"params":[],"tagname":"method","files":[{"linenr":655,"filename":"/Users/yshibukawa/personal/ext-4.2.1.883/src/form/Labelable.js"}],"return":{"type":"Number","properties":null,"doc":"<p>The label width</p>\n","name":"return","html_type":"Number"},"private":null,"static":null,"name":"getLabelWidth","doc":"<p>Gets the width of the label (if visible)</p>\n","chainable":false,"inheritdoc":null,"id":"method-getLabelWidth","fires":[],"linenr":null},{"autodetected":{"method_calls":true,"inheritable":true,"params":true,"static":true,"private":true,"chainable":true,"inheritdoc":true,"linenr":true,"fires":true},"short_doc":"Generates the arguments for the field decorations rendering template. ...","method_calls":["getBodyColspan","getErrorMsgCls","getFieldLabel","getInputId","getInsertionRenderData","getLabelCellAttrs","getLabelCellStyle","getLabelCls","getLabelStyle","hasVisibleLabel"],"owner":"Ext.form.Labelable","inheritable":null,"params":[],"tagname":"method","files":[{"linenr":578,"filename":"/Users/yshibukawa/personal/ext-4.2.1.883/src/form/Labelable.js"}],"protected":true,"return":{"type":"Object","properties":null,"doc":"<p>The template arguments</p>\n","name":"return","html_type":"Object"},"private":null,"static":null,"name":"getLabelableRenderData","doc":"<p>Generates the arguments for the field decorations <a href=\"#!/api/Ext.form.Labelable-cfg-labelableRenderTpl\" rel=\"Ext.form.Labelable-cfg-labelableRenderTpl\" class=\"docClass\">rendering template</a>.</p>\n","chainable":false,"inheritdoc":null,"id":"method-getLabelableRenderData","fires":[],"linenr":null},{"autodetected":{"method_calls":true,"inheritable":true,"params":true,"static":true,"private":true,"chainable":true,"inheritdoc":true,"linenr":true,"fires":true},"short_doc":"Gets the markup to be inserted into the outer template's bodyEl. ...","method_calls":null,"owner":"Ext.form.Labelable","inheritable":null,"params":[],"tagname":"method","files":[{"linenr":744,"filename":"/Users/yshibukawa/personal/ext-4.2.1.883/src/form/Labelable.js"}],"protected":true,"return":{"type":"String","properties":null,"doc":"<p>The markup to be inserted</p>\n","name":"return","html_type":"String"},"private":null,"static":null,"name":"getSubTplMarkup","doc":"<p>Gets the markup to be inserted into the outer template's bodyEl. Defaults to empty string, should be implemented\nby classes including this mixin as needed.</p>\n","chainable":false,"inheritdoc":null,"id":"method-getSubTplMarkup","fires":null,"linenr":null},{"autodetected":{"method_calls":true,"inheritable":true,"params":true,"static":true,"private":true,"chainable":true,"inheritdoc":true,"linenr":true,"fires":true},"short_doc":"Tells whether the field currently has an active error message. ...","method_calls":["getActiveError"],"owner":"Ext.form.Labelable","inheritable":null,"params":[],"tagname":"method","files":[{"linenr":772,"filename":"/Users/yshibukawa/personal/ext-4.2.1.883/src/form/Labelable.js"}],"return":{"type":"Boolean","properties":null,"doc":"\n","name":"return","html_type":"Boolean"},"private":null,"static":null,"name":"hasActiveError","doc":"<p>Tells whether the field currently has an active error message. This does not trigger validation on its own, it\nmerely looks for any message that the component may already hold.</p>\n","chainable":false,"inheritdoc":null,"id":"method-hasActiveError","fires":[],"linenr":null},{"autodetected":{"method_calls":true,"inheritable":true,"static":true,"chainable":true,"inheritdoc":true,"linenr":true,"fires":true},"short_doc":" ...","method_calls":null,"owner":"Ext.Base","inheritable":null,"params":[{"type":"Object","tagname":"params","doc":"\n","name":"config","html_type":"Object"}],"tagname":"method","files":[{"linenr":1156,"filename":"/Users/yshibukawa/personal/ext-4.2.1.883/src/class/Base.js"}],"private":true,"static":null,"name":"hasConfig","doc":"\n","chainable":false,"inheritdoc":null,"id":"method-hasConfig","fires":null,"linenr":null},{"autodetected":{"method_calls":true,"inheritable":true,"params":true,"static":true,"private":true,"chainable":true,"inheritdoc":true,"linenr":true,"fires":true},"short_doc":"Checks if the field has a visible label ...","method_calls":["getFieldLabel"],"owner":"Ext.form.Labelable","inheritable":null,"params":[],"tagname":"method","files":[{"linenr":644,"filename":"/Users/yshibukawa/personal/ext-4.2.1.883/src/form/Labelable.js"}],"return":{"type":"Boolean","properties":null,"doc":"<p>True if the field has a visible label</p>\n","name":"return","html_type":"Boolean"},"private":null,"static":null,"name":"hasVisibleLabel","doc":"<p>Checks if the field has a visible label</p>\n","chainable":false,"inheritdoc":null,"id":"method-hasVisibleLabel","fires":[],"linenr":null},{"autodetected":{"method_calls":true,"inheritable":true,"static":true,"private":true,"chainable":true,"inheritdoc":true,"linenr":true,"fires":true},"short_doc":"Initialize configuration for this class. ...","method_calls":null,"owner":"Ext.Base","inheritable":null,"params":[{"type":"Object","tagname":"params","doc":"\n","name":"config","html_type":"Object"}],"tagname":"method","files":[{"linenr":1090,"filename":"/Users/yshibukawa/personal/ext-4.2.1.883/src/class/Base.js"}],"protected":true,"return":{"type":"Ext.Base","properties":null,"doc":"<p>this</p>\n","name":"return","html_type":"<a href=\"#!/api/Ext.Base\" rel=\"Ext.Base\" class=\"docClass\">Ext.Base</a>"},"private":null,"static":null,"name":"initConfig","doc":"<p>Initialize configuration for this class. a typical example:</p>\n\n<pre><code><a href=\"#!/api/Ext-method-define\" rel=\"Ext-method-define\" class=\"docClass\">Ext.define</a>('My.awesome.Class', {\n    // The default config\n    config: {\n        name: 'Awesome',\n        isAwesome: true\n    },\n\n    constructor: function(config) {\n        this.initConfig(config);\n    }\n});\n\nvar awesome = new My.awesome.Class({\n    name: 'Super Awesome'\n});\n\nalert(awesome.getName()); // 'Super Awesome'\n</code></pre>\n","chainable":true,"inheritdoc":null,"id":"method-initConfig","fires":null,"linenr":null},{"autodetected":{"method_calls":true,"inheritable":true,"params":true,"static":true,"private":true,"chainable":true,"inheritdoc":true,"linenr":true,"fires":true},"short_doc":"Performs initialization of this mixin. ...","method_calls":["addCls","addEvents","enableBubble"],"owner":"Ext.form.Labelable","inheritable":null,"params":[],"tagname":"method","files":[{"linenr":460,"filename":"/Users/yshibukawa/personal/ext-4.2.1.883/src/form/Labelable.js"}],"private":null,"static":null,"name":"initLabelable","doc":"<p>Performs initialization of this mixin. Component classes using this mixin should call this method during their\nown initialization.</p>\n","chainable":false,"inheritdoc":null,"id":"method-initLabelable","fires":[],"linenr":null},{"autodetected":{"method_calls":true,"inheritable":true,"static":true,"chainable":true,"inheritdoc":true,"linenr":true,"fires":true},"short_doc":" ...","method_calls":null,"owner":"Ext.Base","inheritable":null,"params":[{"type":"Object","tagname":"params","doc":"\n","name":"names","html_type":"Object"},{"type":"Object","tagname":"params","doc":"\n","name":"callback","html_type":"Object"},{"type":"Object","tagname":"params","doc":"\n","name":"scope","html_type":"Object"}],"tagname":"method","files":[{"linenr":1224,"filename":"/Users/yshibukawa/personal/ext-4.2.1.883/src/class/Base.js"}],"private":true,"static":null,"name":"onConfigUpdate","doc":"\n","chainable":false,"inheritdoc":null,"id":"method-onConfigUpdate","fires":null,"linenr":null},{"autodetected":{"method_calls":true,"inheritable":true,"params":true,"static":true,"chainable":true,"inheritdoc":true,"linenr":true,"fires":true},"short_doc":"Updates the rendered DOM to match the current activeError. ...","method_calls":["fireEvent","getActionEl","getActiveError"],"owner":"Ext.form.Labelable","inheritable":null,"params":[],"tagname":"method","files":[{"linenr":833,"filename":"/Users/yshibukawa/personal/ext-4.2.1.883/src/form/Labelable.js"}],"private":true,"static":null,"name":"renderActiveError","doc":"<p>Updates the rendered DOM to match the current activeError. This only updates the content and\nattributes, you'll have to call doComponentLayout to actually update the display.</p>\n","chainable":false,"inheritdoc":null,"id":"method-renderActiveError","fires":["<a href=\"#!/api/Ext.form.Labelable-event-errorchange\" rel=\"Ext.form.Labelable-event-errorchange\" class=\"docClass\">errorchange</a>"],"linenr":null},{"autodetected":{"method_calls":true,"inheritable":true,"static":true,"private":true,"chainable":true,"inheritdoc":true,"linenr":true,"fires":true},"short_doc":"Sets the active error message to the given string. ...","method_calls":["setActiveErrors"],"owner":"Ext.form.Labelable","inheritable":null,"params":[{"type":"String","tagname":"params","doc":"<p>The error message</p>\n","name":"msg","html_type":"String"}],"tagname":"method","files":[{"linenr":781,"filename":"/Users/yshibukawa/personal/ext-4.2.1.883/src/form/Labelable.js"}],"private":null,"static":null,"name":"setActiveError","doc":"<p>Sets the active error message to the given string. This replaces the entire error message contents with the given\nstring. Also see <a href=\"#!/api/Ext.form.Labelable-method-setActiveErrors\" rel=\"Ext.form.Labelable-method-setActiveErrors\" class=\"docClass\">setActiveErrors</a> which accepts an Array of messages and formats them according to the\n<a href=\"#!/api/Ext.form.Labelable-cfg-activeErrorsTpl\" rel=\"Ext.form.Labelable-cfg-activeErrorsTpl\" class=\"docClass\">activeErrorsTpl</a>. Note that this only updates the error message element's text and attributes, you'll\nhave to call doComponentLayout to actually update the field's layout to match. If the field extends <a href=\"#!/api/Ext.form.field.Base\" rel=\"Ext.form.field.Base\" class=\"docClass\">Ext.form.field.Base</a> you should call <a href=\"#!/api/Ext.form.field.Base-method-markInvalid\" rel=\"Ext.form.field.Base-method-markInvalid\" class=\"docClass\">markInvalid</a> instead.</p>\n","chainable":false,"inheritdoc":null,"id":"method-setActiveError","fires":[],"linenr":null},{"autodetected":{"method_calls":true,"inheritable":true,"static":true,"private":true,"chainable":true,"inheritdoc":true,"linenr":true,"fires":true},"short_doc":"Set the active error message to an Array of error messages. ...","method_calls":["getTpl","renderActiveError"],"owner":"Ext.form.Labelable","inheritable":null,"params":[{"type":"String[]","tagname":"params","doc":"<p>The error messages</p>\n","name":"errors","html_type":"String[]"}],"tagname":"method","files":[{"linenr":803,"filename":"/Users/yshibukawa/personal/ext-4.2.1.883/src/form/Labelable.js"}],"private":null,"static":null,"name":"setActiveErrors","doc":"<p>Set the active error message to an Array of error messages. The messages are formatted into a single message\nstring using the <a href=\"#!/api/Ext.form.Labelable-cfg-activeErrorsTpl\" rel=\"Ext.form.Labelable-cfg-activeErrorsTpl\" class=\"docClass\">activeErrorsTpl</a>. Also see <a href=\"#!/api/Ext.form.Labelable-method-setActiveError\" rel=\"Ext.form.Labelable-method-setActiveError\" class=\"docClass\">setActiveError</a> which allows setting the entire error\ncontents with a single string. Note that this only updates the error message element's text and attributes,\nyou'll have to call doComponentLayout to actually update the field's layout to match. If the field extends\n<a href=\"#!/api/Ext.form.field.Base\" rel=\"Ext.form.field.Base\" class=\"docClass\">Ext.form.field.Base</a> you should call <a href=\"#!/api/Ext.form.field.Base-method-markInvalid\" rel=\"Ext.form.field.Base-method-markInvalid\" class=\"docClass\">markInvalid</a> instead.</p>\n","chainable":false,"inheritdoc":null,"id":"method-setActiveErrors","fires":[],"linenr":null},{"autodetected":{"method_calls":true,"inheritable":true,"params":true,"static":true,"chainable":true,"inheritdoc":true,"linenr":true,"fires":true},"short_doc":" ...","method_calls":null,"owner":"Ext.Base","inheritable":null,"params":[{"type":"Object","name":"config","html_type":"Object"},{"type":"Object","name":"applyIfNotSet","html_type":"Object"}],"tagname":"method","files":[{"linenr":1164,"filename":"/Users/yshibukawa/personal/ext-4.2.1.883/src/class/Base.js"}],"return":{"type":"Ext.Base","doc":"<p>this</p>\n","html_type":"<a href=\"#!/api/Ext.Base\" rel=\"Ext.Base\" class=\"docClass\">Ext.Base</a>"},"private":true,"static":null,"name":"setConfig","doc":"\n","chainable":true,"inheritdoc":null,"id":"method-setConfig","fires":null,"linenr":null},{"autodetected":{"method_calls":true,"inheritable":true,"static":true,"private":true,"chainable":true,"inheritdoc":true,"linenr":true,"fires":true},"short_doc":"Applies a set of default configuration values to this Labelable instance. ...","method_calls":["hasOwnProperty"],"owner":"Ext.form.Labelable","inheritable":null,"params":[{"type":"Object","tagname":"params","doc":"<p>The defaults to apply to the object.</p>\n","name":"defaults","html_type":"Object"}],"tagname":"method","files":[{"linenr":862,"filename":"/Users/yshibukawa/personal/ext-4.2.1.883/src/form/Labelable.js"}],"private":null,"static":null,"name":"setFieldDefaults","doc":"<p>Applies a set of default configuration values to this Labelable instance. For each of the properties in the given\nobject, check if this component hasOwnProperty that config; if not then it's inheriting a default value from its\nprototype and we should apply the default value.</p>\n","chainable":false,"inheritdoc":null,"id":"method-setFieldDefaults","fires":[],"linenr":null},{"autodetected":{"method_calls":true,"inheritable":true,"static":true,"private":true,"chainable":true,"inheritdoc":true,"linenr":true,"fires":true},"short_doc":"Set the label of this field. ...","method_calls":["trimLabelSeparator","updateLayout"],"owner":"Ext.form.Labelable","inheritable":null,"params":[{"type":"String","tagname":"params","doc":"<p>The new label. The <a href=\"#!/api/Ext.form.Labelable-cfg-labelSeparator\" rel=\"Ext.form.Labelable-cfg-labelSeparator\" class=\"docClass\">labelSeparator</a> will be automatically appended to the label\nstring.</p>\n","name":"label","html_type":"String"}],"tagname":"method","files":[{"linenr":528,"filename":"/Users/yshibukawa/personal/ext-4.2.1.883/src/form/Labelable.js"}],"private":null,"static":null,"name":"setFieldLabel","doc":"<p>Set the label of this field.</p>\n","chainable":false,"inheritdoc":null,"id":"method-setFieldLabel","fires":[],"linenr":null},{"autodetected":{"method_calls":true,"inheritable":true,"params":true,"static":true,"private":true,"chainable":true,"inheritdoc":true,"linenr":true,"fires":true},"short_doc":"Get the reference to the class from which this object was instantiated. ...","method_calls":null,"owner":"Ext.Base","inheritable":null,"params":[],"tagname":"method","files":[{"linenr":778,"filename":"/Users/yshibukawa/personal/ext-4.2.1.883/src/class/Base.js"}],"protected":true,"return":{"type":"Ext.Class","properties":null,"doc":"\n","name":"return","html_type":"<a href=\"#!/api/Ext.Class\" rel=\"Ext.Class\" class=\"docClass\">Ext.Class</a>"},"private":null,"static":null,"name":"statics","doc":"<p>Get the reference to the class from which this object was instantiated. Note that unlike <a href=\"#!/api/Ext.Base-property-self\" rel=\"Ext.Base-property-self\" class=\"docClass\">self</a>,\n<code>this.statics()</code> is scope-independent and it always returns the class from which it was called, regardless of what\n<code>this</code> points to during run-time</p>\n\n<pre><code><a href=\"#!/api/Ext-method-define\" rel=\"Ext-method-define\" class=\"docClass\">Ext.define</a>('My.Cat', {\n    statics: {\n        totalCreated: 0,\n        speciesName: 'Cat' // My.Cat.speciesName = 'Cat'\n    },\n\n    constructor: function() {\n        var statics = this.statics();\n\n        alert(statics.speciesName);     // always equals to 'Cat' no matter what 'this' refers to\n                                        // equivalent to: My.Cat.speciesName\n\n        alert(this.self.speciesName);   // dependent on 'this'\n\n        statics.totalCreated++;\n    },\n\n    clone: function() {\n        var cloned = new this.self;                      // dependent on 'this'\n\n        cloned.groupName = this.statics().speciesName;   // equivalent to: My.Cat.speciesName\n\n        return cloned;\n    }\n});\n\n\n<a href=\"#!/api/Ext-method-define\" rel=\"Ext-method-define\" class=\"docClass\">Ext.define</a>('My.SnowLeopard', {\n    extend: 'My.Cat',\n\n    statics: {\n        speciesName: 'Snow Leopard'     // My.SnowLeopard.speciesName = 'Snow Leopard'\n    },\n\n    constructor: function() {\n        this.callParent();\n    }\n});\n\nvar cat = new My.Cat();                 // alerts 'Cat', then alerts 'Cat'\n\nvar snowLeopard = new My.SnowLeopard(); // alerts 'Cat', then alerts 'Snow Leopard'\n\nvar clone = snowLeopard.clone();\nalert(<a href=\"#!/api/Ext-method-getClassName\" rel=\"Ext-method-getClassName\" class=\"docClass\">Ext.getClassName</a>(clone));         // alerts 'My.SnowLeopard'\nalert(clone.groupName);                 // alerts 'Cat'\n\nalert(My.Cat.totalCreated);             // alerts 3\n</code></pre>\n","chainable":false,"inheritdoc":null,"id":"method-statics","fires":null,"linenr":null},{"autodetected":{"method_calls":true,"inheritable":true,"params":true,"static":true,"private":true,"chainable":true,"inheritdoc":true,"linenr":true,"fires":true},"short_doc":"Returns the trimmed label by slicing off the label separator character. ...","method_calls":null,"owner":"Ext.form.Labelable","inheritable":null,"params":[],"tagname":"method","files":[{"linenr":504,"filename":"/Users/yshibukawa/personal/ext-4.2.1.883/src/form/Labelable.js"}],"return":{"type":"String","properties":null,"doc":"<p>The trimmed field label, or empty string if not defined</p>\n","name":"return","html_type":"String"},"private":null,"static":null,"name":"trimLabelSeparator","doc":"<p>Returns the trimmed label by slicing off the label separator character. Can be overridden.</p>\n","chainable":false,"inheritdoc":null,"id":"method-trimLabelSeparator","fires":null,"linenr":null},{"autodetected":{"method_calls":true,"inheritable":true,"params":true,"static":true,"private":true,"chainable":true,"inheritdoc":true,"linenr":true,"fires":true},"short_doc":"Clears the active error message(s). ...","method_calls":["renderActiveError"],"owner":"Ext.form.Labelable","inheritable":null,"params":[],"tagname":"method","files":[{"linenr":822,"filename":"/Users/yshibukawa/personal/ext-4.2.1.883/src/form/Labelable.js"}],"private":null,"static":null,"name":"unsetActiveError","doc":"<p>Clears the active error message(s). Note that this only clears the error message element's text and attributes,\nyou'll have to call doComponentLayout to actually update the field's layout to match. If the field extends <a href=\"#!/api/Ext.form.field.Base\" rel=\"Ext.form.field.Base\" class=\"docClass\">Ext.form.field.Base</a> you should call <a href=\"#!/api/Ext.form.field.Base-method-clearInvalid\" rel=\"Ext.form.field.Base-method-clearInvalid\" class=\"docClass\">clearInvalid</a> instead.</p>\n","chainable":false,"inheritdoc":null,"id":"method-unsetActiveError","fires":[],"linenr":null},{"autodetected":{"method_calls":true,"chainable":true,"inheritdoc":true,"linenr":true,"fires":true},"short_doc":" ...","method_calls":null,"owner":"Ext.Base","inheritable":true,"params":[{"type":"Object","tagname":"params","doc":"\n","name":"config","html_type":"Object"}],"tagname":"method","files":[{"linenr":176,"filename":"/Users/yshibukawa/personal/ext-4.2.1.883/src/class/Base.js"}],"private":true,"static":true,"name":"addConfig","doc":"\n","chainable":false,"inheritdoc":null,"id":"static-method-addConfig","fires":null,"linenr":null},{"autodetected":{"method_calls":true,"chainable":true,"inheritdoc":true,"linenr":true,"fires":true},"short_doc":" ...","method_calls":null,"owner":"Ext.Base","inheritable":true,"params":[{"type":"Object","tagname":"params","doc":"\n","name":"members","html_type":"Object"}],"tagname":"method","files":[{"linenr":256,"filename":"/Users/yshibukawa/personal/ext-4.2.1.883/src/class/Base.js"}],"private":true,"static":true,"name":"addInheritableStatics","doc":"\n","chainable":true,"inheritdoc":null,"id":"static-method-addInheritableStatics","fires":null,"linenr":null},{"autodetected":{"method_calls":true,"chainable":true,"inheritdoc":true,"linenr":true,"fires":true},"short_doc":" ...","method_calls":null,"owner":"Ext.Base","inheritable":true,"params":[{"type":"Object","tagname":"params","doc":"\n","name":"name","html_type":"Object"},{"type":"Object","tagname":"params","doc":"\n","name":"member","html_type":"Object"}],"tagname":"method","files":[{"linenr":353,"filename":"/Users/yshibukawa/personal/ext-4.2.1.883/src/class/Base.js"}],"private":true,"static":true,"name":"addMember","doc":"\n","chainable":true,"inheritdoc":null,"id":"static-method-addMember","fires":null,"linenr":null},{"autodetected":{"method_calls":true,"private":true,"chainable":true,"inheritdoc":true,"linenr":true,"fires":true},"short_doc":"Add methods / properties to the prototype of this class. ...","method_calls":null,"owner":"Ext.Base","inheritable":true,"params":[{"type":"Object","tagname":"params","doc":"\n","name":"members","html_type":"Object"}],"tagname":"method","files":[{"linenr":296,"filename":"/Users/yshibukawa/personal/ext-4.2.1.883/src/class/Base.js"}],"static":true,"private":null,"name":"addMembers","doc":"<p>Add methods / properties to the prototype of this class.</p>\n\n<pre><code><a href=\"#!/api/Ext-method-define\" rel=\"Ext-method-define\" class=\"docClass\">Ext.define</a>('My.awesome.Cat', {\n    constructor: function() {\n        ...\n    }\n});\n\n My.awesome.Cat.addMembers({\n     meow: function() {\n        alert('Meowww...');\n     }\n });\n\n var kitty = new My.awesome.Cat;\n kitty.meow();\n</code></pre>\n","chainable":true,"inheritdoc":null,"id":"static-method-addMembers","fires":null,"linenr":null},{"autodetected":{"method_calls":true,"private":true,"chainable":true,"inheritdoc":true,"linenr":true,"fires":true},"short_doc":"Add / override static properties of this class. ...","method_calls":null,"owner":"Ext.Base","inheritable":true,"params":[{"type":"Object","tagname":"params","doc":"\n","name":"members","html_type":"Object"}],"tagname":"method","files":[{"linenr":218,"filename":"/Users/yshibukawa/personal/ext-4.2.1.883/src/class/Base.js"}],"return":{"type":"Ext.Base","properties":null,"doc":"<p>this</p>\n","name":"return","html_type":"<a href=\"#!/api/Ext.Base\" rel=\"Ext.Base\" class=\"docClass\">Ext.Base</a>"},"static":true,"private":null,"name":"addStatics","doc":"<p>Add / override static properties of this class.</p>\n\n<pre><code><a href=\"#!/api/Ext-method-define\" rel=\"Ext-method-define\" class=\"docClass\">Ext.define</a>('My.cool.Class', {\n    ...\n});\n\nMy.cool.Class.addStatics({\n    someProperty: 'someValue',      // My.cool.Class.someProperty = 'someValue'\n    method1: function() { ... },    // My.cool.Class.method1 = function() { ... };\n    method2: function() { ... }     // My.cool.Class.method2 = function() { ... };\n});\n</code></pre>\n","chainable":true,"inheritdoc":null,"id":"static-method-addStatics","fires":null,"linenr":null},{"autodetected":{"method_calls":true,"params":true,"chainable":true,"inheritdoc":true,"linenr":true,"fires":true},"short_doc":" ...","method_calls":null,"owner":"Ext.Base","inheritable":true,"params":[{"type":"Object","name":"xtype","html_type":"Object"}],"tagname":"method","files":[{"linenr":730,"filename":"/Users/yshibukawa/personal/ext-4.2.1.883/src/class/Base.js"}],"private":true,"static":true,"name":"addXtype","doc":"\n","chainable":true,"inheritdoc":null,"id":"static-method-addXtype","fires":null,"linenr":null},{"autodetected":{"method_calls":true,"chainable":true,"inheritdoc":true,"linenr":true,"fires":true},"short_doc":"Borrow another class' members to the prototype of this class. ...","method_calls":null,"owner":"Ext.Base","inheritable":true,"params":[{"type":"Ext.Base","tagname":"params","doc":"<p>The class to borrow members from</p>\n","name":"fromClass","html_type":"<a href=\"#!/api/Ext.Base\" rel=\"Ext.Base\" class=\"docClass\">Ext.Base</a>"},{"type":"Array/String","tagname":"params","doc":"<p>The names of the members to borrow</p>\n","name":"members","html_type":"Array/String"}],"tagname":"method","files":[{"linenr":383,"filename":"/Users/yshibukawa/personal/ext-4.2.1.883/src/class/Base.js"}],"return":{"type":"Ext.Base","properties":null,"doc":"<p>this</p>\n","name":"return","html_type":"<a href=\"#!/api/Ext.Base\" rel=\"Ext.Base\" class=\"docClass\">Ext.Base</a>"},"static":true,"private":true,"name":"borrow","doc":"<p>Borrow another class' members to the prototype of this class.</p>\n\n<pre><code><a href=\"#!/api/Ext-method-define\" rel=\"Ext-method-define\" class=\"docClass\">Ext.define</a>('Bank', {\n    money: '$$$',\n    printMoney: function() {\n        alert('$$$$$$$');\n    }\n});\n\n<a href=\"#!/api/Ext-method-define\" rel=\"Ext-method-define\" class=\"docClass\">Ext.define</a>('Thief', {\n    ...\n});\n\nThief.borrow(Bank, ['money', 'printMoney']);\n\nvar steve = new Thief();\n\nalert(steve.money); // alerts '$$$'\nsteve.printMoney(); // alerts '$$$$$$$'\n</code></pre>\n","chainable":true,"inheritdoc":null,"id":"static-method-borrow","fires":null,"linenr":null},{"overrides":[{"owner":"Ext.layout.Layout","link":"<a href=\"#!/api/Ext.layout.Layout-static-method-create\" rel=\"Ext.layout.Layout-static-method-create\" class=\"docClass\">Ext.layout.Layout.create</a>","name":"create"}],"autodetected":{"method_calls":true,"params":true,"private":true,"chainable":true,"inheritdoc":true,"linenr":true,"fires":true},"short_doc":"Create a new instance of this Class. ...","method_calls":null,"owner":"Ext.Base","inheritable":true,"params":[],"tagname":"method","files":[{"linenr":60,"filename":"/Users/yshibukawa/personal/ext-4.2.1.883/src/class/Base.js"}],"return":{"type":"Object","properties":null,"doc":"<p>the created instance.</p>\n","name":"return","html_type":"Object"},"static":true,"private":null,"name":"create","doc":"<p>Create a new instance of this Class.</p>\n\n<pre><code><a href=\"#!/api/Ext-method-define\" rel=\"Ext-method-define\" class=\"docClass\">Ext.define</a>('My.cool.Class', {\n    ...\n});\n\nMy.cool.Class.create({\n    someConfig: true\n});\n</code></pre>\n\n<p>All parameters are passed to the constructor of the class.</p>\n","chainable":false,"inheritdoc":null,"id":"static-method-create","fires":null,"linenr":null},{"autodetected":{"method_calls":true,"private":true,"chainable":true,"inheritdoc":true,"linenr":true,"fires":true},"short_doc":"Create aliases for existing prototype methods. ...","method_calls":null,"owner":"Ext.Base","inheritable":true,"params":[{"type":"String/Object","tagname":"params","doc":"<p>The new method name, or an object to set multiple aliases. See\n<a href=\"#!/api/Ext.Function-method-flexSetter\" rel=\"Ext.Function-method-flexSetter\" class=\"docClass\">flexSetter</a></p>\n","name":"alias","html_type":"String/Object"},{"type":"String/Object","tagname":"params","doc":"<p>The original method name</p>\n","name":"origin","html_type":"String/Object"}],"tagname":"method","files":[{"linenr":696,"filename":"/Users/yshibukawa/personal/ext-4.2.1.883/src/class/Base.js"}],"static":true,"private":null,"name":"createAlias","doc":"<p>Create aliases for existing prototype methods. Example:</p>\n\n<pre><code><a href=\"#!/api/Ext-method-define\" rel=\"Ext-method-define\" class=\"docClass\">Ext.define</a>('My.cool.Class', {\n    method1: function() { ... },\n    method2: function() { ... }\n});\n\nvar test = new My.cool.Class();\n\nMy.cool.Class.createAlias({\n    method3: 'method1',\n    method4: 'method2'\n});\n\ntest.method3(); // test.method1()\n\nMy.cool.Class.createAlias('method5', 'method3');\n\ntest.method5(); // test.method3() -&gt; test.method1()\n</code></pre>\n","chainable":null,"inheritdoc":null,"id":"static-method-createAlias","fires":null,"linenr":null},{"autodetected":{"method_calls":true,"chainable":true,"inheritdoc":true,"linenr":true,"fires":true},"short_doc":" ...","method_calls":["hasOwnProperty"],"owner":"Ext.Base","inheritable":true,"params":[{"type":"Object","tagname":"params","doc":"\n","name":"config","html_type":"Object"}],"tagname":"method","files":[{"linenr":81,"filename":"/Users/yshibukawa/personal/ext-4.2.1.883/src/class/Base.js"}],"private":true,"static":true,"name":"extend","doc":"\n","chainable":false,"inheritdoc":null,"id":"static-method-extend","fires":null,"linenr":null},{"autodetected":{"method_calls":true,"params":true,"private":true,"chainable":true,"inheritdoc":true,"linenr":true,"fires":true},"short_doc":"Get the current class' name in string format. ...","method_calls":null,"owner":"Ext.Base","inheritable":true,"params":[],"tagname":"method","files":[{"linenr":677,"filename":"/Users/yshibukawa/personal/ext-4.2.1.883/src/class/Base.js"}],"return":{"type":"String","properties":null,"doc":"<p>className</p>\n","name":"return","html_type":"String"},"static":true,"private":null,"name":"getName","doc":"<p>Get the current class' name in string format.</p>\n\n<pre><code><a href=\"#!/api/Ext-method-define\" rel=\"Ext-method-define\" class=\"docClass\">Ext.define</a>('My.cool.Class', {\n    constructor: function() {\n        alert(this.self.getName()); // alerts 'My.cool.Class'\n    }\n});\n\nMy.cool.Class.getName(); // 'My.cool.Class'\n</code></pre>\n","chainable":false,"inheritdoc":null,"id":"static-method-getName","fires":null,"linenr":null},{"autodetected":{"method_calls":true,"params":true,"private":true,"chainable":true,"inheritdoc":true,"linenr":true,"fires":true},"short_doc":"Adds members to class. ...","method_calls":null,"owner":"Ext.Base","inheritable":true,"params":[],"tagname":"method","files":[{"linenr":373,"filename":"/Users/yshibukawa/personal/ext-4.2.1.883/src/class/Base.js"}],"static":true,"private":null,"name":"implement","doc":"<p>Adds members to class.</p>\n","chainable":false,"inheritdoc":null,"id":"static-method-implement","deprecated":{"text":"<p>Use <a href=\"#!/api/Ext.Base-static-method-addMembers\" rel=\"Ext.Base-static-method-addMembers\" class=\"docClass\">addMembers</a> instead.</p>\n","version":"4.1"},"fires":null,"linenr":null},{"autodetected":{"method_calls":true,"params":true,"chainable":true,"inheritdoc":true,"linenr":true,"fires":true},"short_doc":"Used internally by the mixins pre-processor ...","method_calls":["addConfig","hasOwnProperty"],"owner":"Ext.Base","inheritable":true,"params":[{"type":"Object","name":"name","html_type":"Object"},{"type":"Object","name":"mixinClass","html_type":"Object"}],"tagname":"method","files":[{"linenr":595,"filename":"/Users/yshibukawa/personal/ext-4.2.1.883/src/class/Base.js"}],"private":true,"static":true,"name":"mixin","doc":"<p>Used internally by the mixins pre-processor</p>\n","chainable":false,"inheritdoc":null,"id":"static-method-mixin","fires":null,"linenr":null},{"autodetected":{"method_calls":true,"params":true,"chainable":true,"inheritdoc":true,"linenr":true,"fires":true},"short_doc":" ...","method_calls":null,"owner":"Ext.Base","inheritable":true,"params":[{"type":"Object","name":"fn","html_type":"Object"},{"type":"Object","name":"scope","html_type":"Object"}],"tagname":"method","files":[{"linenr":162,"filename":"/Users/yshibukawa/personal/ext-4.2.1.883/src/class/Base.js"}],"private":true,"static":true,"name":"onExtended","doc":"\n","chainable":true,"inheritdoc":null,"id":"static-method-onExtended","fires":null,"linenr":null},{"autodetected":{"method_calls":true,"private":true,"chainable":true,"inheritdoc":true,"linenr":true,"fires":true},"short_doc":"Override members of this class. ...","method_calls":["addConfig","addInheritableStatics"],"owner":"Ext.Base","inheritable":true,"params":[{"type":"Object","tagname":"params","doc":"<p>The properties to add to this class. This should be\nspecified as an object literal containing one or more properties.</p>\n","name":"members","html_type":"Object"}],"tagname":"method","files":[{"linenr":452,"filename":"/Users/yshibukawa/personal/ext-4.2.1.883/src/class/Base.js"}],"return":{"type":"Ext.Base","properties":null,"doc":"<p>this class</p>\n","name":"return","html_type":"<a href=\"#!/api/Ext.Base\" rel=\"Ext.Base\" class=\"docClass\">Ext.Base</a>"},"static":true,"private":null,"name":"override","doc":"<p>Override members of this class. Overridden methods can be invoked via\n<a href=\"#!/api/Ext.Base-method-callParent\" rel=\"Ext.Base-method-callParent\" class=\"docClass\">callParent</a>.</p>\n\n<pre><code><a href=\"#!/api/Ext-method-define\" rel=\"Ext-method-define\" class=\"docClass\">Ext.define</a>('My.Cat', {\n    constructor: function() {\n        alert(\"I'm a cat!\");\n    }\n});\n\nMy.Cat.override({\n    constructor: function() {\n        alert(\"I'm going to be a cat!\");\n\n        this.callParent(arguments);\n\n        alert(\"Meeeeoooowwww\");\n    }\n});\n\nvar kitty = new My.Cat(); // alerts \"I'm going to be a cat!\"\n                          // alerts \"I'm a cat!\"\n                          // alerts \"Meeeeoooowwww\"\n</code></pre>\n\n<p>As of 4.1, direct use of this method is deprecated. Use <a href=\"#!/api/Ext-method-define\" rel=\"Ext-method-define\" class=\"docClass\">Ext.define</a>\ninstead:</p>\n\n<pre><code><a href=\"#!/api/Ext-method-define\" rel=\"Ext-method-define\" class=\"docClass\">Ext.define</a>('My.CatOverride', {\n    override: 'My.Cat',\n    constructor: function() {\n        alert(\"I'm going to be a cat!\");\n\n        this.callParent(arguments);\n\n        alert(\"Meeeeoooowwww\");\n    }\n});\n</code></pre>\n\n<p>The above accomplishes the same result but can be managed by the <a href=\"#!/api/Ext.Loader\" rel=\"Ext.Loader\" class=\"docClass\">Ext.Loader</a>\nwhich can properly order the override and its target class and the build process\ncan determine whether the override is needed based on the required state of the\ntarget class (My.Cat).</p>\n","chainable":true,"inheritdoc":null,"id":"static-method-override","deprecated":{"text":"<p>Use <a href=\"#!/api/Ext-method-define\" rel=\"Ext-method-define\" class=\"docClass\">Ext.define</a> instead</p>\n","version":"4.1.0"},"fires":null,"linenr":null},{"autodetected":{"method_calls":true,"params":true,"chainable":true,"inheritdoc":true,"linenr":true,"fires":true},"short_doc":" ...","method_calls":null,"owner":"Ext.Base","inheritable":true,"params":[],"tagname":"method","files":[{"linenr":140,"filename":"/Users/yshibukawa/personal/ext-4.2.1.883/src/class/Base.js"}],"private":true,"static":true,"name":"triggerExtended","doc":"\n","chainable":false,"inheritdoc":null,"id":"static-method-triggerExtended","fires":null,"linenr":null},{"autodetected":{"inheritable":true,"static":true,"private":true,"inheritdoc":true,"linenr":true},"short_doc":"Fires when the active error message is changed via setActiveError. ...","owner":"Ext.form.Labelable","inheritable":null,"params":[{"type":"Ext.form.Labelable","tagname":"params","doc":"\n","name":"this","html_type":"<a href=\"#!/api/Ext.form.Labelable\" rel=\"Ext.form.Labelable\" class=\"docClass\">Ext.form.Labelable</a>"},{"type":"String","tagname":"params","doc":"<p>The active error message</p>\n","name":"error","html_type":"String"},{"type":"Object","ext4_auto_param":true,"tagname":"params","name":"eOpts","doc":"<p>The options object passed to <a href=\"#!/api/Ext.util.Observable-method-addListener\" rel=\"Ext.util.Observable-method-addListener\" class=\"docClass\">Ext.util.Observable.addListener</a>.</p>\n\n\n\n","html_type":"Object"}],"tagname":"event","files":[{"linenr":491,"filename":"/Users/yshibukawa/personal/ext-4.2.1.883/src/form/Labelable.js"}],"private":null,"static":null,"name":"errorchange","doc":"<p>Fires when the active error message is changed via <a href=\"#!/api/Ext.form.Labelable-method-setActiveError\" rel=\"Ext.form.Labelable-method-setActiveError\" class=\"docClass\">setActiveError</a>.</p>\n","inheritdoc":null,"id":"event-errorchange","linenr":null}],"alternateClassNames":[],"code_type":"ext_define","mixins":[],"doc":"<p>A mixin which allows a component to be configured and decorated with a label and/or error message as is\ncommon for form fields. This is used by e.g. <a href=\"#!/api/Ext.form.field.Base\" rel=\"Ext.form.field.Base\" class=\"docClass\">Ext.form.field.Base</a> and <a href=\"#!/api/Ext.form.FieldContainer\" rel=\"Ext.form.FieldContainer\" class=\"docClass\">Ext.form.FieldContainer</a>\nto let them be managed by the Field layout.</p>\n\n<p>NOTE: This mixin is mainly for internal library use and most users should not need to use it directly. It\nis more likely you will want to use one of the component classes that import this mixin, such as\n<a href=\"#!/api/Ext.form.field.Base\" rel=\"Ext.form.field.Base\" class=\"docClass\">Ext.form.field.Base</a> or <a href=\"#!/api/Ext.form.FieldContainer\" rel=\"Ext.form.FieldContainer\" class=\"docClass\">Ext.form.FieldContainer</a>.</p>\n\n<p>Use of this mixin does not make a component a field in the logical sense, meaning it does not provide any\nlogic or state related to values or validation; that is handled by the related <a href=\"#!/api/Ext.form.field.Field\" rel=\"Ext.form.field.Field\" class=\"docClass\">Ext.form.field.Field</a>\nmixin. These two mixins may be used separately (for example <a href=\"#!/api/Ext.form.FieldContainer\" rel=\"Ext.form.FieldContainer\" class=\"docClass\">Ext.form.FieldContainer</a> is Labelable but not a\nField), or in combination (for example <a href=\"#!/api/Ext.form.field.Base\" rel=\"Ext.form.field.Base\" class=\"docClass\">Ext.form.field.Base</a> implements both and has logic for connecting the\ntwo.)</p>\n\n<p>Component classes which use this mixin should use the Field layout\nor a derivation thereof to properly size and position the label and message according to the component config.\nThey must also call the <a href=\"#!/api/Ext.form.Labelable-method-initLabelable\" rel=\"Ext.form.Labelable-method-initLabelable\" class=\"docClass\">initLabelable</a> method during component initialization to ensure the mixin gets\nset up correctly.</p>\n","name":"Ext.form.Labelable","id":"class-Ext.form.Labelable"}