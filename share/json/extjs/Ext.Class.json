{"docauthor":[{"email":"jacky@sencha.com","tagname":"docauthor","name":"Jacky Nguyen"}],"autodetected":{},"short_doc":"Handles class creation throughout the framework. ...","aliases":{},"files":[{"linenr":25,"filename":"/Users/yshibukawa/personal/ext-4.2.1.883/src/class/Class.js"}],"tagname":"class","members":[{"autodetected":{},"type":"String[]","short_doc":"List of short aliases for class names. ...","default":null,"owner":"Ext.Class","tagname":"cfg","files":[{"linenr":1205,"filename":"/Users/yshibukawa/personal/ext-4.2.1.883/src/class/ClassManager.js"}],"name":"alias","properties":null,"doc":"<p>List of short aliases for class names.  Most useful for defining xtypes for widgets:</p>\n\n<pre><code><a href=\"#!/api/Ext-method-define\" rel=\"Ext-method-define\" class=\"docClass\">Ext.define</a>('MyApp.CoolPanel', {\n    extend: '<a href=\"#!/api/Ext.panel.Panel\" rel=\"Ext.panel.Panel\" class=\"docClass\">Ext.panel.Panel</a>',\n    alias: ['widget.coolpanel'],\n    title: 'Yeah!'\n});\n\n// Using <a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>\n<a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('widget.coolpanel');\n\n// Using the shorthand for defining widgets by xtype\n<a href=\"#!/api/Ext-method-widget\" rel=\"Ext-method-widget\" class=\"docClass\">Ext.widget</a>('panel', {\n    items: [\n        {xtype: 'coolpanel', html: 'Foo'},\n        {xtype: 'coolpanel', html: 'Bar'}\n    ]\n});\n</code></pre>\n\n<p>Besides \"widget\" for xtype there are alias namespaces like \"feature\" for ftype and \"plugin\" for ptype.</p>\n","id":"cfg-alias","html_type":"String[]"},{"autodetected":{},"type":"String/String[]","short_doc":"Defines alternate names for this class. ...","default":null,"owner":"Ext.Class","tagname":"cfg","files":[{"linenr":1277,"filename":"/Users/yshibukawa/personal/ext-4.2.1.883/src/class/ClassManager.js"}],"name":"alternateClassName","properties":null,"doc":"<p>Defines alternate names for this class.  For example:</p>\n\n<pre><code><a href=\"#!/api/Ext-method-define\" rel=\"Ext-method-define\" class=\"docClass\">Ext.define</a>('Developer', {\n    alternateClassName: ['Coder', 'Hacker'],\n    code: function(msg) {\n        alert('Typing... ' + msg);\n    }\n});\n\nvar joe = <a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('Developer');\njoe.code('stackoverflow');\n\nvar rms = <a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('Hacker');\nrms.code('hack hack');\n</code></pre>\n","id":"cfg-alternateClassName","html_type":"String/String[]"},{"autodetected":{},"type":"Object","short_doc":"List of configuration options with their default values, for which automatically\naccessor methods are generated. ...","default":null,"owner":"Ext.Class","tagname":"cfg","files":[{"linenr":469,"filename":"/Users/yshibukawa/personal/ext-4.2.1.883/src/class/Class.js"}],"name":"config","properties":null,"doc":"<p>List of configuration options with their default values, for which automatically\naccessor methods are generated.  For example:</p>\n\n<pre><code><a href=\"#!/api/Ext-method-define\" rel=\"Ext-method-define\" class=\"docClass\">Ext.define</a>('SmartPhone', {\n     config: {\n         hasTouchScreen: false,\n         operatingSystem: 'Other',\n         price: 500\n     },\n     constructor: function(cfg) {\n         this.initConfig(cfg);\n     }\n});\n\nvar iPhone = new SmartPhone({\n     hasTouchScreen: true,\n     operatingSystem: 'iOS'\n});\n\niPhone.getPrice(); // 500;\niPhone.getOperatingSystem(); // 'iOS'\niPhone.getHasTouchScreen(); // true;\n</code></pre>\n\n<p>NOTE for when configs are reference types, the getter and setter methods do not make copies.</p>\n\n<p>For example, when a config value is set, the reference is stored on the instance. All instances that set\nthe same reference type will share it.</p>\n\n<p>In the case of the getter, the value with either come from the prototype if the setter was never called or from\nthe instance as the last value passed to the setter.</p>\n\n<p>For some config properties, the value passed to the setter is transformed prior to being stored on the instance.</p>\n","id":"cfg-config","html_type":"Object"},{"autodetected":{},"type":"String","short_doc":"The parent class that this class extends. ...","default":null,"owner":"Ext.Class","tagname":"cfg","files":[{"linenr":369,"filename":"/Users/yshibukawa/personal/ext-4.2.1.883/src/class/Class.js"}],"name":"extend","properties":null,"doc":"<p>The parent class that this class extends. For example:</p>\n\n<pre><code><a href=\"#!/api/Ext-method-define\" rel=\"Ext-method-define\" class=\"docClass\">Ext.define</a>('Person', {\n    say: function(text) { alert(text); }\n});\n\n<a href=\"#!/api/Ext-method-define\" rel=\"Ext-method-define\" class=\"docClass\">Ext.define</a>('Developer', {\n    extend: 'Person',\n    say: function(text) { this.callParent([\"print \"+text]); }\n});\n</code></pre>\n","id":"cfg-extend","html_type":"String"},{"autodetected":{},"type":"Object","short_doc":"List of inheritable static methods for this class. ...","default":null,"owner":"Ext.Class","tagname":"cfg","files":[{"linenr":452,"filename":"/Users/yshibukawa/personal/ext-4.2.1.883/src/class/Class.js"}],"name":"inheritableStatics","properties":null,"doc":"<p>List of inheritable static methods for this class.\nOtherwise just like <a href=\"#!/api/Ext.Class-cfg-statics\" rel=\"Ext.Class-cfg-statics\" class=\"docClass\">statics</a> but subclasses inherit these methods.</p>\n","id":"cfg-inheritableStatics","html_type":"Object"},{"autodetected":{},"type":"String[]/Object","short_doc":"List of classes to mix into this class. ...","default":null,"owner":"Ext.Class","tagname":"cfg","files":[{"linenr":602,"filename":"/Users/yshibukawa/personal/ext-4.2.1.883/src/class/Class.js"}],"name":"mixins","properties":null,"doc":"<p>List of classes to mix into this class. For example:</p>\n\n<pre><code><a href=\"#!/api/Ext-method-define\" rel=\"Ext-method-define\" class=\"docClass\">Ext.define</a>('CanSing', {\n     sing: function() {\n         alert(\"I'm on the highway to hell...\")\n     }\n});\n\n<a href=\"#!/api/Ext-method-define\" rel=\"Ext-method-define\" class=\"docClass\">Ext.define</a>('Musician', {\n     mixins: ['CanSing']\n})\n</code></pre>\n\n<p>In this case the Musician class will get a <code>sing</code> method from CanSing mixin.</p>\n\n<p>But what if the Musician already has a <code>sing</code> method? Or you want to mix\nin two classes, both of which define <code>sing</code>?  In such a cases it's good\nto define mixins as an object, where you assign a name to each mixin:</p>\n\n<pre><code><a href=\"#!/api/Ext-method-define\" rel=\"Ext-method-define\" class=\"docClass\">Ext.define</a>('Musician', {\n     mixins: {\n         canSing: 'CanSing'\n     },\n\n     sing: function() {\n         // delegate singing operation to mixin\n         this.mixins.canSing.sing.call(this);\n     }\n})\n</code></pre>\n\n<p>In this case the <code>sing</code> method of Musician will overwrite the\nmixed in <code>sing</code> method. But you can access the original mixed in method\nthrough special <code>mixins</code> property.</p>\n","id":"cfg-mixins","html_type":"String[]/Object"},{"autodetected":{},"type":"String[]","short_doc":"List of classes that have to be loaded before instantiating this class. ...","default":null,"owner":"Ext.Class","tagname":"cfg","files":[{"linenr":1319,"filename":"/Users/yshibukawa/personal/ext-4.2.1.883/src/class/Loader.js"}],"name":"requires","properties":null,"doc":"<p>List of classes that have to be loaded before instantiating this class.\nFor example:</p>\n\n<pre><code><a href=\"#!/api/Ext-method-define\" rel=\"Ext-method-define\" class=\"docClass\">Ext.define</a>('Mother', {\n    requires: ['Child'],\n    giveBirth: function() {\n        // we can be sure that child class is available.\n        return new Child();\n    }\n});\n</code></pre>\n","id":"cfg-requires","html_type":"String[]"},{"autodetected":{},"type":"Boolean","short_doc":"When set to true, the class will be instantiated as singleton. ...","default":null,"owner":"Ext.Class","tagname":"cfg","files":[{"linenr":1247,"filename":"/Users/yshibukawa/personal/ext-4.2.1.883/src/class/ClassManager.js"}],"name":"singleton","properties":null,"doc":"<p>When set to true, the class will be instantiated as singleton.  For example:</p>\n\n<pre><code><a href=\"#!/api/Ext-method-define\" rel=\"Ext-method-define\" class=\"docClass\">Ext.define</a>('Logger', {\n    singleton: true,\n    log: function(msg) {\n        console.log(msg);\n    }\n});\n\nLogger.log('Hello');\n</code></pre>\n","id":"cfg-singleton","html_type":"Boolean"},{"autodetected":{},"type":"Object","short_doc":"List of static methods for this class. ...","default":null,"owner":"Ext.Class","tagname":"cfg","files":[{"linenr":423,"filename":"/Users/yshibukawa/personal/ext-4.2.1.883/src/class/Class.js"}],"name":"statics","properties":null,"doc":"<p>List of static methods for this class. For example:</p>\n\n<pre><code><a href=\"#!/api/Ext-method-define\" rel=\"Ext-method-define\" class=\"docClass\">Ext.define</a>('Computer', {\n     statics: {\n         factory: function(brand) {\n             // 'this' in static methods refer to the class itself\n             return new this(brand);\n         }\n     },\n\n     constructor: function() { ... }\n});\n\nvar dellComputer = Computer.factory('Dell');\n</code></pre>\n","id":"cfg-statics","html_type":"Object"},{"autodetected":{},"type":"String[]","short_doc":"List of optional classes to load together with this class. ...","default":null,"owner":"Ext.Class","tagname":"cfg","files":[{"linenr":1489,"filename":"/Users/yshibukawa/personal/ext-4.2.1.883/src/class/Loader.js"}],"name":"uses","properties":null,"doc":"<p>List of optional classes to load together with this class. These aren't neccessarily loaded before\nthis class is created, but are guaranteed to be available before <a href=\"#!/api/Ext-method-onReady\" rel=\"Ext-method-onReady\" class=\"docClass\">Ext.onReady</a> listeners are\ninvoked. For example:</p>\n\n<pre><code><a href=\"#!/api/Ext-method-define\" rel=\"Ext-method-define\" class=\"docClass\">Ext.define</a>('Mother', {\n    uses: ['Child'],\n    giveBirth: function() {\n        // This code might, or might not work:\n        // return new Child();\n\n        // Instead use <a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>() to load the class at the spot if not loaded already:\n        return <a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('Child');\n    }\n});\n</code></pre>\n","id":"cfg-uses","html_type":"String[]"},{"autodetected":{"type":true,"default":true,"inheritable":true,"readonly":true,"static":true,"inheritdoc":true,"linenr":true},"type":"Array","short_doc":" ...","default":"[]","owner":"Ext.Class","inheritable":null,"readonly":null,"tagname":"property","files":[{"linenr":265,"filename":"/Users/yshibukawa/personal/ext-4.2.1.883/src/class/Class.js"}],"private":true,"static":null,"name":"defaultPreprocessors","doc":"\n","inheritdoc":null,"id":"property-defaultPreprocessors","html_type":"Array","linenr":null},{"autodetected":{"type":true,"default":true,"inheritable":true,"readonly":true,"static":true,"inheritdoc":true,"linenr":true},"type":"Object","short_doc":" ...","default":"{}","owner":"Ext.Class","inheritable":null,"readonly":null,"tagname":"property","files":[{"linenr":199,"filename":"/Users/yshibukawa/personal/ext-4.2.1.883/src/class/Class.js"}],"private":true,"static":null,"name":"preprocessors","doc":"\n","inheritdoc":null,"id":"property-preprocessors","html_type":"Object","linenr":null},{"autodetected":{},"short_doc":"Create a new anonymous class. ...","owner":"Ext.Class","params":[{"type":"Object","tagname":"params","doc":"<p>An object represent the properties of this class</p>\n","name":"data","html_type":"Object"},{"type":"Function","tagname":"params","doc":"<p>Optional, the callback function to be executed when this class is fully created.\nNote that the creation process can be asynchronous depending on the pre-processors used.</p>\n","name":"onCreated","html_type":"Function"}],"tagname":"method","files":[{"linenr":69,"filename":"/Users/yshibukawa/personal/ext-4.2.1.883/src/class/Class.js"}],"return":{"type":"Ext.Base","properties":null,"doc":"<p>The newly created class</p>\n","name":"return","html_type":"<a href=\"#!/api/Ext.Base\" rel=\"Ext.Base\" class=\"docClass\">Ext.Base</a>"},"name":"constructor","doc":"<p>Create a new anonymous class.</p>\n","id":"method-constructor"},{"autodetected":{"method_calls":true,"inheritable":true,"params":true,"static":true,"chainable":true,"inheritdoc":true,"linenr":true,"fires":true},"short_doc":" ...","method_calls":null,"owner":"Ext.Class","inheritable":null,"params":[{"type":"Object","name":"Class","html_type":"Object"},{"type":"Object","name":"data","html_type":"Object"}],"tagname":"method","files":[{"linenr":115,"filename":"/Users/yshibukawa/personal/ext-4.2.1.883/src/class/Class.js"}],"private":true,"static":null,"name":"create","doc":"\n","chainable":false,"inheritdoc":null,"id":"method-create","fires":null,"linenr":null},{"autodetected":{"method_calls":true,"inheritable":true,"params":true,"static":true,"chainable":true,"inheritdoc":true,"linenr":true,"fires":true},"short_doc":" ...","method_calls":null,"owner":"Ext.Class","inheritable":null,"params":[],"tagname":"method","files":[{"linenr":258,"filename":"/Users/yshibukawa/personal/ext-4.2.1.883/src/class/Class.js"}],"private":true,"static":null,"name":"getPreprocessors","doc":"\n","chainable":false,"inheritdoc":null,"id":"method-getPreprocessors","fires":null,"linenr":null},{"autodetected":{"method_calls":true,"inheritable":true,"params":true,"static":true,"chainable":true,"inheritdoc":true,"linenr":true,"fires":true},"short_doc":" ...","method_calls":null,"owner":"Ext.Class","inheritable":null,"params":[{"type":"Object","name":"Class","html_type":"Object"},{"type":"Object","name":"data","html_type":"Object"},{"type":"Object","name":"hooks","html_type":"Object"}],"tagname":"method","files":[{"linenr":98,"filename":"/Users/yshibukawa/personal/ext-4.2.1.883/src/class/Class.js"}],"private":true,"static":null,"name":"onBeforeCreated","doc":"\n","chainable":false,"inheritdoc":null,"id":"method-onBeforeCreated","fires":null,"linenr":null},{"autodetected":{"method_calls":true,"inheritable":true,"params":true,"static":true,"chainable":true,"inheritdoc":true,"linenr":true,"fires":true},"short_doc":" ...","method_calls":["doProcess"],"owner":"Ext.Class","inheritable":null,"params":[{"type":"Object","name":"Class","html_type":"Object"},{"type":"Object","name":"data","html_type":"Object"},{"type":"Object","name":"onCreated","html_type":"Object"}],"tagname":"method","files":[{"linenr":137,"filename":"/Users/yshibukawa/personal/ext-4.2.1.883/src/class/Class.js"}],"private":true,"static":null,"name":"process","doc":"\n","chainable":false,"inheritdoc":null,"id":"method-process","fires":[],"linenr":null},{"autodetected":{"method_calls":true,"inheritable":true,"params":true,"chainable":true,"inheritdoc":true,"linenr":true,"fires":true},"short_doc":"Retrieve the array stack of default pre-processors ...","method_calls":null,"owner":"Ext.Class","inheritable":null,"params":[],"tagname":"method","files":[{"linenr":270,"filename":"/Users/yshibukawa/personal/ext-4.2.1.883/src/class/Class.js"}],"return":{"type":"Function[]","properties":null,"doc":"<p>defaultPreprocessors</p>\n","name":"return","html_type":"Function[]"},"private":true,"static":true,"name":"getDefaultPreprocessors","doc":"<p>Retrieve the array stack of default pre-processors</p>\n","chainable":false,"inheritdoc":null,"id":"static-method-getDefaultPreprocessors","fires":null,"linenr":null},{"autodetected":{"method_calls":true,"inheritable":true,"chainable":true,"inheritdoc":true,"linenr":true,"fires":true},"short_doc":"Retrieve a pre-processor callback function by its name, which has been registered before ...","method_calls":null,"owner":"Ext.Class","inheritable":null,"params":[{"type":"String","tagname":"params","doc":"\n","name":"name","html_type":"String"}],"tagname":"method","files":[{"linenr":246,"filename":"/Users/yshibukawa/personal/ext-4.2.1.883/src/class/Class.js"}],"return":{"type":"Function","properties":null,"doc":"<p>preprocessor</p>\n","name":"return","html_type":"Function"},"private":true,"static":true,"name":"getPreprocessor","doc":"<p>Retrieve a pre-processor callback function by its name, which has been registered before</p>\n","chainable":false,"inheritdoc":null,"id":"static-method-getPreprocessor","fires":null,"linenr":null},{"autodetected":{"method_calls":true,"inheritable":true,"chainable":true,"inheritdoc":true,"linenr":true,"fires":true},"short_doc":"Register a new pre-processor to be used during the class creation process ...","method_calls":["setDefaultPreprocessorPosition"],"owner":"Ext.Class","inheritable":null,"params":[{"type":"String","tagname":"params","doc":"<p>The pre-processor's name</p>\n","name":"name","html_type":"String"},{"type":"Function","tagname":"params","properties":[{"type":"Function","tagname":"params","doc":"<p>The created class</p>\n","name":"cls","html_type":"Function"},{"type":"Object","tagname":"params","doc":"<p>The set of properties passed in <a href=\"#!/api/Ext.Class\" rel=\"Ext.Class\" class=\"docClass\">Ext.Class</a> constructor</p>\n","name":"data","html_type":"Object"},{"type":"Function","tagname":"params","doc":"<p>The callback function that <strong>must</strong> to be executed when this\npre-processor finishes, regardless of whether the processing is synchronous or aynchronous.</p>\n","name":"fn","html_type":"Function"}],"doc":"<p>The callback function to be executed. Typical format:</p>\n\n<pre><code>function(cls, data, fn) {\n    // Your code here\n\n    // Execute this when the processing is finished.\n    // Asynchronous processing is perfectly ok\n    if (fn) {\n        fn.call(this, cls, data);\n    }\n});\n</code></pre>\n","name":"fn","html_type":"Function"}],"tagname":"method","files":[{"linenr":202,"filename":"/Users/yshibukawa/personal/ext-4.2.1.883/src/class/Class.js"}],"return":{"type":"Ext.Class","properties":null,"doc":"<p>this</p>\n","name":"return","html_type":"<a href=\"#!/api/Ext.Class\" rel=\"Ext.Class\" class=\"docClass\">Ext.Class</a>"},"private":true,"static":true,"name":"registerPreprocessor","doc":"<p>Register a new pre-processor to be used during the class creation process</p>\n","chainable":true,"inheritdoc":null,"id":"static-method-registerPreprocessor","fires":null,"linenr":null},{"autodetected":{"method_calls":true,"inheritable":true,"chainable":true,"inheritdoc":true,"linenr":true,"fires":true},"short_doc":"Insert this pre-processor at a specific position in the stack, optionally relative to\nany existing pre-processor. ...","method_calls":null,"owner":"Ext.Class","inheritable":null,"params":[{"type":"String","tagname":"params","doc":"<p>The pre-processor name. Note that it needs to be registered with\n<a href=\"#!/api/Ext.Class-static-method-registerPreprocessor\" rel=\"Ext.Class-static-method-registerPreprocessor\" class=\"docClass\">registerPreprocessor</a> before this</p>\n","name":"name","html_type":"String"},{"type":"String","tagname":"params","doc":"<p>The insertion position. Four possible values are:\n'first', 'last', or: 'before', 'after' (relative to the name provided in the third argument)</p>\n","name":"offset","html_type":"String"},{"type":"String","tagname":"params","doc":"\n","name":"relativeName","html_type":"String"}],"tagname":"method","files":[{"linenr":294,"filename":"/Users/yshibukawa/personal/ext-4.2.1.883/src/class/Class.js"}],"return":{"type":"Ext.Class","properties":null,"doc":"<p>this</p>\n","name":"return","html_type":"<a href=\"#!/api/Ext.Class\" rel=\"Ext.Class\" class=\"docClass\">Ext.Class</a>"},"private":true,"static":true,"name":"setDefaultPreprocessorPosition","doc":"<p>Insert this pre-processor at a specific position in the stack, optionally relative to\nany existing pre-processor. For example:</p>\n\n<pre><code><a href=\"#!/api/Ext.Class-static-method-registerPreprocessor\" rel=\"Ext.Class-static-method-registerPreprocessor\" class=\"docClass\">Ext.Class.registerPreprocessor</a>('debug', function(cls, data, fn) {\n    // Your code here\n\n    if (fn) {\n        fn.call(this, cls, data);\n    }\n}).setDefaultPreprocessorPosition('debug', 'last');\n</code></pre>\n","chainable":true,"inheritdoc":null,"id":"static-method-setDefaultPreprocessorPosition","fires":null,"linenr":null},{"autodetected":{"method_calls":true,"inheritable":true,"chainable":true,"inheritdoc":true,"linenr":true,"fires":true},"short_doc":"Set the default array stack of default pre-processors ...","method_calls":null,"owner":"Ext.Class","inheritable":null,"params":[{"type":"Array","tagname":"params","doc":"\n","name":"preprocessors","html_type":"Array"}],"tagname":"method","files":[{"linenr":280,"filename":"/Users/yshibukawa/personal/ext-4.2.1.883/src/class/Class.js"}],"return":{"type":"Ext.Class","properties":null,"doc":"<p>this</p>\n","name":"return","html_type":"<a href=\"#!/api/Ext.Class\" rel=\"Ext.Class\" class=\"docClass\">Ext.Class</a>"},"private":true,"static":true,"name":"setDefaultPreprocessors","doc":"<p>Set the default array stack of default pre-processors</p>\n","chainable":true,"inheritdoc":null,"id":"static-method-setDefaultPreprocessors","fires":null,"linenr":null}],"author":[{"email":"jacky@sencha.com","tagname":"author","name":"Jacky Nguyen"}],"alternateClassNames":[],"doc":"<p>Handles class creation throughout the framework. This is a low level factory that is used by <a href=\"#!/api/Ext.ClassManager\" rel=\"Ext.ClassManager\" class=\"docClass\">Ext.ClassManager</a> and generally\nshould not be used directly. If you choose to use <a href=\"#!/api/Ext.Class\" rel=\"Ext.Class\" class=\"docClass\">Ext.Class</a> you will lose out on the namespace, aliasing and depency loading\nfeatures made available by <a href=\"#!/api/Ext.ClassManager\" rel=\"Ext.ClassManager\" class=\"docClass\">Ext.ClassManager</a>. The only time you would use <a href=\"#!/api/Ext.Class\" rel=\"Ext.Class\" class=\"docClass\">Ext.Class</a> directly is to create an anonymous class.</p>\n\n<p>If you wish to create a class you should use <a href=\"#!/api/Ext-method-define\" rel=\"Ext-method-define\" class=\"docClass\">Ext.define</a> which aliases\n<a href=\"#!/api/Ext.ClassManager-method-create\" rel=\"Ext.ClassManager-method-create\" class=\"docClass\">Ext.ClassManager.create</a> to enable namespacing and dynamic dependency resolution.</p>\n\n<p><a href=\"#!/api/Ext.Class\" rel=\"Ext.Class\" class=\"docClass\">Ext.Class</a> is the factory and <strong>not</strong> the superclass of everything. For the base class that <strong>all</strong> Ext classes inherit\nfrom, see <a href=\"#!/api/Ext.Base\" rel=\"Ext.Base\" class=\"docClass\">Ext.Base</a>.</p>\n","name":"Ext.Class","id":"class-Ext.Class"}