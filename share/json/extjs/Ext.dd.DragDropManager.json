{"autodetected":{"singleton":true,"aliases":true,"requires":true,"uses":true,"extends":true,"members":true,"alternateClassNames":true,"code_type":true,"mixins":true},"short_doc":"DragDropManager is a singleton that tracks the element interaction for\nall DragDrop items in the window. ...","singleton":true,"aliases":{},"requires":["Ext.util.Region"],"files":[{"linenr":30,"filename":"/Users/yshibukawa/personal/ext-4.2.1.883/src/dd/DragDropManager.js"}],"tagname":"class","uses":["Ext.tip.QuickTipManager"],"extends":"Ext.Base","members":[{"autodetected":{"type":true,"default":true,"inheritable":true,"readonly":true,"static":true,"inheritdoc":true,"linenr":true},"type":"String","short_doc":" ...","default":"'Ext.Base'","owner":"Ext.Base","inheritable":null,"readonly":null,"tagname":"property","files":[{"linenr":763,"filename":"/Users/yshibukawa/personal/ext-4.2.1.883/src/class/Base.js"}],"private":true,"static":null,"name":"$className","doc":"\n","inheritdoc":null,"id":"property-S-className","html_type":"String","linenr":null},{"autodetected":{"default":true,"inheritable":true,"readonly":true,"static":true,"private":true,"inheritdoc":true,"linenr":true},"type":"Number","short_doc":"In intersect mode, drag and drop interaction is defined by the\noverlap of two or more drag and drop objects. ...","default":"1","owner":"Ext.dd.DragDropManager","inheritable":null,"readonly":null,"tagname":"property","files":[{"linenr":139,"filename":"/Users/yshibukawa/personal/ext-4.2.1.883/src/dd/DragDropManager.js"}],"private":null,"static":null,"name":"INTERSECT","properties":null,"doc":"<p>In intersect mode, drag and drop interaction is defined by the\noverlap of two or more drag and drop objects.</p>\n","inheritdoc":null,"id":"property-INTERSECT","html_type":"Number","linenr":null},{"autodetected":{"default":true,"inheritable":true,"readonly":true,"static":true,"private":true,"inheritdoc":true,"linenr":true},"type":"Number","short_doc":"In point mode, drag and drop interaction is defined by the\nlocation of the cursor during the drag/drop ...","default":"0","owner":"Ext.dd.DragDropManager","inheritable":null,"readonly":null,"tagname":"property","files":[{"linenr":132,"filename":"/Users/yshibukawa/personal/ext-4.2.1.883/src/dd/DragDropManager.js"}],"private":null,"static":null,"name":"POINT","properties":null,"doc":"<p>In point mode, drag and drop interaction is defined by the\nlocation of the cursor during the drag/drop</p>\n","inheritdoc":null,"id":"property-POINT","html_type":"Number","linenr":null},{"autodetected":{"default":true,"inheritable":true,"readonly":true,"static":true,"private":true,"inheritdoc":true,"linenr":true},"type":"Number","short_doc":"The number of pixels that the mouse needs to move after the\nmousedown before the drag is initiated. ...","default":"3","owner":"Ext.dd.DragDropManager","inheritable":null,"readonly":null,"tagname":"property","files":[{"linenr":245,"filename":"/Users/yshibukawa/personal/ext-4.2.1.883/src/dd/DragDropManager.js"}],"private":null,"static":null,"name":"clickPixelThresh","properties":null,"doc":"<p>The number of pixels that the mouse needs to move after the\nmousedown before the drag is initiated.  Default=3;</p>\n","inheritdoc":null,"id":"property-clickPixelThresh","html_type":"Number","linenr":null},{"autodetected":{"default":true,"inheritable":true,"readonly":true,"static":true,"private":true,"inheritdoc":true,"linenr":true},"type":"Number","short_doc":"The number of milliseconds after the mousedown event to initiate the\ndrag if we don't get a mouseup event. ...","default":"350","owner":"Ext.dd.DragDropManager","inheritable":null,"readonly":null,"tagname":"property","files":[{"linenr":252,"filename":"/Users/yshibukawa/personal/ext-4.2.1.883/src/dd/DragDropManager.js"}],"private":null,"static":null,"name":"clickTimeThresh","properties":null,"doc":"<p>The number of milliseconds after the mousedown event to initiate the\ndrag if we don't get a mouseup event. Default=350</p>\n","inheritdoc":null,"id":"property-clickTimeThresh","html_type":"Number","linenr":null},{"autodetected":{"default":true,"inheritable":true,"readonly":true,"static":true,"inheritdoc":true,"linenr":true},"type":"Object","default":null,"owner":"Ext.dd.DragDropManager","inheritable":null,"readonly":null,"tagname":"property","files":[{"linenr":267,"filename":"/Users/yshibukawa/personal/ext-4.2.1.883/src/dd/DragDropManager.js"}],"private":true,"static":null,"name":"clickTimeout","properties":null,"doc":"<p>Timeout used for the click time threshold</p>\n","inheritdoc":null,"id":"property-clickTimeout","html_type":"Object","linenr":null},{"autodetected":{"type":true,"default":true,"inheritable":true,"readonly":true,"static":true,"inheritdoc":true,"linenr":true},"type":"Object","short_doc":" ...","default":"{}","owner":"Ext.Base","inheritable":null,"readonly":null,"tagname":"property","files":[{"linenr":772,"filename":"/Users/yshibukawa/personal/ext-4.2.1.883/src/class/Base.js"}],"private":true,"static":null,"name":"configMap","doc":"\n","inheritdoc":null,"id":"property-configMap","html_type":"Object","linenr":null},{"autodetected":{"default":true,"inheritable":true,"readonly":true,"static":true,"inheritdoc":true,"linenr":true},"type":"Number","short_doc":"the X distance between the cursor and the object being dragged ...","default":"0","owner":"Ext.dd.DragDropManager","inheritable":null,"readonly":null,"tagname":"property","files":[{"linenr":78,"filename":"/Users/yshibukawa/personal/ext-4.2.1.883/src/dd/DragDropManager.js"}],"private":true,"static":null,"name":"deltaX","properties":null,"doc":"<p>the X distance between the cursor and the object being dragged</p>\n","inheritdoc":null,"id":"property-deltaX","html_type":"Number","linenr":null},{"autodetected":{"default":true,"inheritable":true,"readonly":true,"static":true,"inheritdoc":true,"linenr":true},"type":"Number","short_doc":"the Y distance between the cursor and the object being dragged ...","default":"0","owner":"Ext.dd.DragDropManager","inheritable":null,"readonly":null,"tagname":"property","files":[{"linenr":85,"filename":"/Users/yshibukawa/personal/ext-4.2.1.883/src/dd/DragDropManager.js"}],"private":true,"static":null,"name":"deltaY","properties":null,"doc":"<p>the Y distance between the cursor and the object being dragged</p>\n","inheritdoc":null,"id":"property-deltaY","html_type":"Number","linenr":null},{"autodetected":{"default":true,"inheritable":true,"static":true,"private":true,"inheritdoc":true,"linenr":true},"type":"String","short_doc":"Class to add to the dragged element of a DragDrop instance. ...","default":"Ext.baseCSSPrefix + 'dd-drag-current'","owner":"Ext.dd.DragDropManager","inheritable":null,"readonly":true,"tagname":"property","files":[{"linenr":165,"filename":"/Users/yshibukawa/personal/ext-4.2.1.883/src/dd/DragDropManager.js"}],"private":null,"static":null,"name":"dragCls","properties":null,"doc":"<p>Class to add to the <a href=\"#!/api/Ext.dd.DragDrop-method-getDragEl\" rel=\"Ext.dd.DragDrop-method-getDragEl\" class=\"docClass\">dragged element</a> of a DragDrop instance.</p>\n","inheritdoc":null,"id":"property-dragCls","html_type":"String","linenr":null},{"autodetected":{"default":true,"inheritable":true,"readonly":true,"static":true,"inheritdoc":true,"linenr":true},"type":"Ext.dd.DragDrop","default":null,"owner":"Ext.dd.DragDropManager","inheritable":null,"readonly":null,"tagname":"property","files":[{"linenr":64,"filename":"/Users/yshibukawa/personal/ext-4.2.1.883/src/dd/DragDropManager.js"}],"private":true,"static":null,"name":"dragCurrent","properties":null,"doc":"<p>the DragDrop object that is currently being dragged</p>\n","inheritdoc":null,"id":"property-dragCurrent","html_type":"<a href=\"#!/api/Ext.dd.DragDrop\" rel=\"Ext.dd.DragDrop\" class=\"docClass\">Ext.dd.DragDrop</a>","linenr":null},{"autodetected":{"default":true,"inheritable":true,"readonly":true,"static":true,"inheritdoc":true,"linenr":true},"type":"Ext.dd.DragDrop[]","short_doc":"the DragDrop object(s) that are being hovered over ...","default":"{}","owner":"Ext.dd.DragDropManager","inheritable":null,"readonly":null,"tagname":"property","files":[{"linenr":71,"filename":"/Users/yshibukawa/personal/ext-4.2.1.883/src/dd/DragDropManager.js"}],"private":true,"static":null,"name":"dragOvers","properties":null,"doc":"<p>the DragDrop object(s) that are being hovered over</p>\n","inheritdoc":null,"id":"property-dragOvers","html_type":"<a href=\"#!/api/Ext.dd.DragDrop\" rel=\"Ext.dd.DragDrop\" class=\"docClass\">Ext.dd.DragDrop</a>[]","linenr":null},{"autodetected":{"default":true,"inheritable":true,"readonly":true,"static":true,"inheritdoc":true,"linenr":true},"type":"Boolean","short_doc":"Flag that indicates that either the drag pixel threshold or the\nmousdown time threshold has been met ...","default":"false","owner":"Ext.dd.DragDropManager","inheritable":null,"readonly":null,"tagname":"property","files":[{"linenr":259,"filename":"/Users/yshibukawa/personal/ext-4.2.1.883/src/dd/DragDropManager.js"}],"private":true,"static":null,"name":"dragThreshMet","properties":null,"doc":"<p>Flag that indicates that either the drag pixel threshold or the\nmousdown time threshold has been met</p>\n","inheritdoc":null,"id":"property-dragThreshMet","html_type":"Boolean","linenr":null},{"autodetected":{"default":true,"inheritable":true,"readonly":true,"static":true,"inheritdoc":true,"linenr":true},"type":"Object","short_doc":"A cache of DOM elements ...","default":"{}","owner":"Ext.dd.DragDropManager","inheritable":null,"readonly":null,"tagname":"property","files":[{"linenr":1135,"filename":"/Users/yshibukawa/personal/ext-4.2.1.883/src/dd/DragDropManager.js"}],"private":true,"static":null,"name":"elementCache","properties":null,"doc":"<p>A cache of DOM elements</p>\n","inheritdoc":null,"id":"property-elementCache","html_type":"Object","linenr":null},{"autodetected":{"default":true,"inheritable":true,"readonly":true,"static":true,"inheritdoc":true,"linenr":true},"type":"String[]","short_doc":"Array of element ids defined as drag handles. ...","default":"{}","owner":"Ext.dd.DragDropManager","inheritable":null,"readonly":null,"tagname":"property","files":[{"linenr":55,"filename":"/Users/yshibukawa/personal/ext-4.2.1.883/src/dd/DragDropManager.js"}],"private":true,"static":null,"name":"handleIds","properties":null,"doc":"<p>Array of element ids defined as drag handles.  Used to determine\nif the element that generated the mousedown event is actually the\nhandle and not the html element itself.</p>\n","inheritdoc":null,"id":"property-handleIds","html_type":"String[]","linenr":null},{"autodetected":{"default":true,"inheritable":true,"readonly":true,"static":true,"inheritdoc":true,"linenr":true},"type":"String[]","short_doc":"Two dimensional Array of registered DragDrop objects. ...","default":"{}","owner":"Ext.dd.DragDropManager","inheritable":null,"readonly":null,"tagname":"property","files":[{"linenr":46,"filename":"/Users/yshibukawa/personal/ext-4.2.1.883/src/dd/DragDropManager.js"}],"private":true,"static":null,"name":"ids","properties":null,"doc":"<p>Two dimensional Array of registered DragDrop objects.  The first\ndimension is the DragDrop item group, the second the DragDrop\nobject.</p>\n","inheritdoc":null,"id":"property-ids","html_type":"String[]","linenr":null},{"autodetected":{"type":true,"default":true,"inheritable":true,"readonly":true,"static":true,"inheritdoc":true,"linenr":true},"type":"Array","short_doc":" ...","default":"[]","owner":"Ext.Base","inheritable":null,"readonly":null,"tagname":"property","files":[{"linenr":769,"filename":"/Users/yshibukawa/personal/ext-4.2.1.883/src/class/Base.js"}],"private":true,"static":null,"name":"initConfigList","doc":"\n","inheritdoc":null,"id":"property-initConfigList","html_type":"Array","linenr":null},{"autodetected":{"type":true,"default":true,"inheritable":true,"readonly":true,"static":true,"inheritdoc":true,"linenr":true},"type":"Object","short_doc":" ...","default":"{}","owner":"Ext.Base","inheritable":null,"readonly":null,"tagname":"property","files":[{"linenr":775,"filename":"/Users/yshibukawa/personal/ext-4.2.1.883/src/class/Base.js"}],"private":true,"static":null,"name":"initConfigMap","doc":"\n","inheritdoc":null,"id":"property-initConfigMap","html_type":"Object","linenr":null},{"autodetected":{"type":true,"default":true,"inheritable":true,"readonly":true,"static":true,"inheritdoc":true,"linenr":true},"type":"Boolean","short_doc":"Internal flag that is set to true when drag and drop has been\nintialized ...","default":"false","owner":"Ext.dd.DragDropManager","inheritable":null,"readonly":null,"tagname":"property","files":[{"linenr":109,"filename":"/Users/yshibukawa/personal/ext-4.2.1.883/src/dd/DragDropManager.js"}],"private":true,"static":null,"name":"initialized","properties":null,"doc":"<p>Internal flag that is set to true when drag and drop has been\nintialized</p>\n","inheritdoc":null,"id":"property-initialized","html_type":"Boolean","linenr":null},{"autodetected":{"type":true,"default":true,"inheritable":true,"readonly":true,"static":true,"inheritdoc":true,"linenr":true},"type":"Boolean","short_doc":" ...","default":"true","owner":"Ext.Base","inheritable":null,"readonly":null,"tagname":"property","files":[{"linenr":760,"filename":"/Users/yshibukawa/personal/ext-4.2.1.883/src/class/Base.js"}],"private":true,"static":null,"name":"isInstance","doc":"\n","inheritdoc":null,"id":"property-isInstance","html_type":"Boolean","linenr":null},{"autodetected":{"default":true,"inheritable":true,"readonly":true,"static":true,"inheritdoc":true,"linenr":true},"type":"Object","short_doc":"Location cache that is set for all drag drop objects when a drag is\ninitiated, cleared when the drag is finished. ...","default":"{}","owner":"Ext.dd.DragDropManager","inheritable":null,"readonly":null,"tagname":"property","files":[{"linenr":230,"filename":"/Users/yshibukawa/personal/ext-4.2.1.883/src/dd/DragDropManager.js"}],"private":true,"static":null,"name":"locationCache","properties":null,"doc":"<p>Location cache that is set for all drag drop objects when a drag is\ninitiated, cleared when the drag is finished.</p>\n","inheritdoc":null,"id":"property-locationCache","html_type":"Object","linenr":null},{"autodetected":{"type":true,"default":true,"inheritable":true,"readonly":true,"static":true,"inheritdoc":true,"linenr":true},"type":"Boolean","short_doc":"All drag and drop can be disabled. ...","default":"false","owner":"Ext.dd.DragDropManager","inheritable":null,"readonly":null,"tagname":"property","files":[{"linenr":117,"filename":"/Users/yshibukawa/personal/ext-4.2.1.883/src/dd/DragDropManager.js"}],"private":true,"static":null,"name":"locked","properties":null,"doc":"<p>All drag and drop can be disabled.</p>\n","inheritdoc":null,"id":"property-locked","html_type":"Boolean","linenr":null},{"autodetected":{"default":true,"inheritable":true,"readonly":true,"static":true,"private":true,"inheritdoc":true,"linenr":true},"type":"Number","short_doc":"The current drag and drop mode. ...","default":"0","owner":"Ext.dd.DragDropManager","inheritable":null,"readonly":null,"tagname":"property","files":[{"linenr":146,"filename":"/Users/yshibukawa/personal/ext-4.2.1.883/src/dd/DragDropManager.js"}],"private":null,"static":null,"name":"mode","properties":null,"doc":"<p>The current drag and drop mode.  Default: POINT</p>\n","inheritdoc":null,"id":"property-mode","html_type":"Number","linenr":null},{"autodetected":{"inheritable":true,"readonly":true,"static":true,"private":true,"inheritdoc":true,"linenr":true},"type":"Boolean","short_doc":"This config is only provided to provide old, usually unwanted drag/drop behaviour. ...","default":"false","owner":"Ext.dd.DragDropManager","inheritable":null,"readonly":null,"tagname":"property","files":[{"linenr":152,"filename":"/Users/yshibukawa/personal/ext-4.2.1.883/src/dd/DragDropManager.js"}],"private":null,"static":null,"name":"notifyOccluded","properties":null,"doc":"<p>This config is only provided to provide old, usually unwanted drag/drop behaviour.</p>\n\n<p>From ExtJS 4.1.0 onwards, when drop targets are contained in floating, absolutely positioned elements\nsuch as in <a href=\"#!/api/Ext.window.Window\" rel=\"Ext.window.Window\" class=\"docClass\">Windows</a>, which may overlap each other, <code>over</code> and <code>drop</code> events\nare only delivered to the topmost drop target at the mouse position.</p>\n\n<p>If all targets below that in zIndex order should also receive notifications, set\n<code>notifyOccluded</code> to <code>true</code>.</p>\n","inheritdoc":null,"id":"property-notifyOccluded","html_type":"Boolean","linenr":null},{"autodetected":{"default":true,"inheritable":true,"readonly":true,"static":true,"private":true,"inheritdoc":true,"linenr":true},"type":"Boolean","short_doc":"Flag to determine if we should prevent the default behavior of the\nevents we define. ...","default":"true","owner":"Ext.dd.DragDropManager","inheritable":null,"readonly":null,"tagname":"property","files":[{"linenr":92,"filename":"/Users/yshibukawa/personal/ext-4.2.1.883/src/dd/DragDropManager.js"}],"private":null,"static":null,"name":"preventDefault","properties":null,"doc":"<p>Flag to determine if we should prevent the default behavior of the\nevents we define. By default this is true, but this can be set to\nfalse if you need the default behavior (not recommended)</p>\n","inheritdoc":null,"id":"property-preventDefault","html_type":"Boolean","linenr":null},{"autodetected":{"default":true,"inheritable":true,"readonly":true,"static":true,"private":true,"inheritdoc":true,"linenr":true},"type":"Ext.Class","short_doc":"Get the reference to the current class from which this object was instantiated. ...","default":null,"owner":"Ext.Base","inheritable":null,"readonly":null,"tagname":"property","files":[{"linenr":1045,"filename":"/Users/yshibukawa/personal/ext-4.2.1.883/src/class/Base.js"}],"protected":true,"private":null,"static":null,"name":"self","properties":null,"doc":"<p>Get the reference to the current class from which this object was instantiated. Unlike <a href=\"#!/api/Ext.Base-method-statics\" rel=\"Ext.Base-method-statics\" class=\"docClass\">statics</a>,\n<code>this.self</code> is scope-dependent and it's meant to be used for dynamic inheritance. See <a href=\"#!/api/Ext.Base-method-statics\" rel=\"Ext.Base-method-statics\" class=\"docClass\">statics</a>\nfor a detailed comparison</p>\n\n<pre><code><a href=\"#!/api/Ext-method-define\" rel=\"Ext-method-define\" class=\"docClass\">Ext.define</a>('My.Cat', {\n    statics: {\n        speciesName: 'Cat' // My.Cat.speciesName = 'Cat'\n    },\n\n    constructor: function() {\n        alert(this.self.speciesName); // dependent on 'this'\n    },\n\n    clone: function() {\n        return new this.self();\n    }\n});\n\n\n<a href=\"#!/api/Ext-method-define\" rel=\"Ext-method-define\" class=\"docClass\">Ext.define</a>('My.SnowLeopard', {\n    extend: 'My.Cat',\n    statics: {\n        speciesName: 'Snow Leopard'         // My.SnowLeopard.speciesName = 'Snow Leopard'\n    }\n});\n\nvar cat = new My.Cat();                     // alerts 'Cat'\nvar snowLeopard = new My.SnowLeopard();     // alerts 'Snow Leopard'\n\nvar clone = snowLeopard.clone();\nalert(<a href=\"#!/api/Ext-method-getClassName\" rel=\"Ext-method-getClassName\" class=\"docClass\">Ext.getClassName</a>(clone));             // alerts 'My.SnowLeopard'\n</code></pre>\n","inheritdoc":null,"id":"property-self","html_type":"<a href=\"#!/api/Ext.Class\" rel=\"Ext.Class\" class=\"docClass\">Ext.Class</a>","linenr":null},{"autodetected":{"default":true,"inheritable":true,"readonly":true,"static":true,"inheritdoc":true,"linenr":true},"type":"Number","short_doc":"The X position of the mousedown event stored for later use when a\ndrag threshold is met. ...","default":"0","owner":"Ext.dd.DragDropManager","inheritable":null,"readonly":null,"tagname":"property","files":[{"linenr":274,"filename":"/Users/yshibukawa/personal/ext-4.2.1.883/src/dd/DragDropManager.js"}],"private":true,"static":null,"name":"startX","properties":null,"doc":"<p>The X position of the mousedown event stored for later use when a\ndrag threshold is met.</p>\n","inheritdoc":null,"id":"property-startX","html_type":"Number","linenr":null},{"autodetected":{"default":true,"inheritable":true,"readonly":true,"static":true,"inheritdoc":true,"linenr":true},"type":"Number","short_doc":"The Y position of the mousedown event stored for later use when a\ndrag threshold is met. ...","default":"0","owner":"Ext.dd.DragDropManager","inheritable":null,"readonly":null,"tagname":"property","files":[{"linenr":282,"filename":"/Users/yshibukawa/personal/ext-4.2.1.883/src/dd/DragDropManager.js"}],"private":true,"static":null,"name":"startY","properties":null,"doc":"<p>The Y position of the mousedown event stored for later use when a\ndrag threshold is met.</p>\n","inheritdoc":null,"id":"property-startY","html_type":"Number","linenr":null},{"autodetected":{"default":true,"inheritable":true,"readonly":true,"static":true,"private":true,"inheritdoc":true,"linenr":true},"type":"Boolean","short_doc":"Flag to determine if we should stop the propagation of the events\nwe generate. ...","default":"true","owner":"Ext.dd.DragDropManager","inheritable":null,"readonly":null,"tagname":"property","files":[{"linenr":100,"filename":"/Users/yshibukawa/personal/ext-4.2.1.883/src/dd/DragDropManager.js"}],"private":null,"static":null,"name":"stopPropagation","properties":null,"doc":"<p>Flag to determine if we should stop the propagation of the events\nwe generate. This is true by default but you may want to set it to\nfalse if the html element contains other features that require the\nmouse click.</p>\n","inheritdoc":null,"id":"property-stopPropagation","html_type":"Boolean","linenr":null},{"autodetected":{"default":true,"inheritable":true,"readonly":true,"static":true,"private":true,"inheritdoc":true,"linenr":true},"type":"Boolean","short_doc":"Set useCache to false if you want to force object the lookup of each\ndrag and drop linked element constantly during a...","default":"true","owner":"Ext.dd.DragDropManager","inheritable":null,"readonly":null,"tagname":"property","files":[{"linenr":238,"filename":"/Users/yshibukawa/personal/ext-4.2.1.883/src/dd/DragDropManager.js"}],"private":null,"static":null,"name":"useCache","properties":null,"doc":"<p>Set useCache to false if you want to force object the lookup of each\ndrag and drop linked element constantly during a drag.</p>\n","inheritdoc":null,"id":"property-useCache","html_type":"Boolean","linenr":null},{"autodetected":{"type":true,"default":true,"readonly":true,"inheritdoc":true,"linenr":true},"type":"Array","short_doc":" ...","default":"[]","owner":"Ext.Base","inheritable":true,"readonly":null,"tagname":"property","files":[{"linenr":133,"filename":"/Users/yshibukawa/personal/ext-4.2.1.883/src/class/Base.js"}],"private":true,"static":true,"name":"$onExtended","doc":"\n","inheritdoc":null,"id":"static-property-S-onExtended","html_type":"Array","linenr":null},{"autodetected":{"method_calls":true,"inheritable":true,"params":true,"static":true,"chainable":true,"inheritdoc":true,"linenr":true,"fires":true},"short_doc":"Runs method on all drag and drop objects ...","method_calls":["isTypeOfDD"],"owner":"Ext.dd.DragDropManager","inheritable":null,"params":[{"type":"Object","name":"sMethod","html_type":"Object"},{"type":"Object","name":"args","html_type":"Object"}],"tagname":"method","files":[{"linenr":172,"filename":"/Users/yshibukawa/personal/ext-4.2.1.883/src/dd/DragDropManager.js"}],"private":true,"static":null,"name":"_execOnAll","doc":"<p>Runs method on all drag and drop objects</p>\n","chainable":false,"inheritdoc":null,"id":"method-_execOnAll","fires":[],"linenr":null},{"autodetected":{"method_calls":true,"inheritable":true,"params":true,"static":true,"chainable":true,"inheritdoc":true,"linenr":true,"fires":true},"short_doc":"Drag and drop initialization. ...","method_calls":["init"],"owner":"Ext.dd.DragDropManager","inheritable":null,"params":[],"tagname":"method","files":[{"linenr":189,"filename":"/Users/yshibukawa/personal/ext-4.2.1.883/src/dd/DragDropManager.js"}],"private":true,"static":null,"name":"_onLoad","doc":"<p>Drag and drop initialization.  Sets up the global event handlers</p>\n","chainable":false,"inheritdoc":null,"id":"method-_onLoad","fires":[],"linenr":null},{"autodetected":{"method_calls":true,"inheritable":true,"params":true,"static":true,"chainable":true,"inheritdoc":true,"linenr":true,"fires":true},"short_doc":"Reset constraints on all drag and drop objs ...","method_calls":["_execOnAll"],"owner":"Ext.dd.DragDropManager","inheritable":null,"params":[{"type":"Object","name":"e","html_type":"Object"}],"tagname":"method","files":[{"linenr":206,"filename":"/Users/yshibukawa/personal/ext-4.2.1.883/src/dd/DragDropManager.js"}],"private":true,"static":null,"name":"_onResize","doc":"<p>Reset constraints on all drag and drop objs</p>\n","chainable":false,"inheritdoc":null,"id":"method-_onResize","fires":[],"linenr":null},{"autodetected":{"method_calls":true,"inheritable":true,"params":true,"static":true,"chainable":true,"inheritdoc":true,"linenr":true,"fires":true},"short_doc":"unload event handler ...","method_calls":null,"owner":"Ext.dd.DragDropManager","inheritable":null,"params":[{"type":"Object","name":"e","html_type":"Object"},{"type":"Object","name":"me","html_type":"Object"}],"tagname":"method","files":[{"linenr":1106,"filename":"/Users/yshibukawa/personal/ext-4.2.1.883/src/dd/DragDropManager.js"}],"private":true,"static":null,"name":"_onUnload","doc":"<p>unload event handler</p>\n","chainable":false,"inheritdoc":null,"id":"method-_onUnload","fires":null,"linenr":null},{"autodetected":{"method_calls":true,"inheritable":true,"params":true,"static":true,"chainable":true,"inheritdoc":true,"linenr":true,"fires":true},"short_doc":"Unregisters a drag and drop item. ...","method_calls":null,"owner":"Ext.dd.DragDropManager","inheritable":null,"params":[{"type":"Object","name":"oDD","html_type":"Object"}],"tagname":"method","files":[{"linenr":321,"filename":"/Users/yshibukawa/personal/ext-4.2.1.883/src/dd/DragDropManager.js"}],"private":true,"static":null,"name":"_remove","doc":"<p>Unregisters a drag and drop item.  This is executed in\nDragDrop.unreg, use that method instead of calling this directly.</p>\n","chainable":false,"inheritdoc":null,"id":"method-_remove","fires":null,"linenr":null},{"autodetected":{"method_calls":true,"inheritable":true,"params":true,"static":true,"chainable":true,"inheritdoc":true,"linenr":true,"fires":true},"short_doc":"Utility method to pass to Ext.Array.sort when sorting potential drop targets by z-index. ...","method_calls":null,"owner":"Ext.dd.DragDropManager","inheritable":null,"params":[{"type":"Object","name":"d1","html_type":"Object"},{"type":"Object","name":"d2","html_type":"Object"}],"tagname":"method","files":[{"linenr":879,"filename":"/Users/yshibukawa/personal/ext-4.2.1.883/src/dd/DragDropManager.js"}],"private":true,"static":null,"name":"byZIndex","doc":"<p>Utility method to pass to <a href=\"#!/api/Ext.Array-method-sort\" rel=\"Ext.Array-method-sort\" class=\"docClass\">Ext.Array.sort</a> when sorting potential drop targets by z-index.</p>\n","chainable":false,"inheritdoc":null,"id":"method-byZIndex","fires":null,"linenr":null},{"autodetected":{"method_calls":true,"inheritable":true,"static":true,"private":true,"chainable":true,"inheritdoc":true,"linenr":true,"fires":true},"short_doc":"Call the original method that was previously overridden with override\n\nExt.define('My.Cat', {\n    constructor: functi...","method_calls":null,"owner":"Ext.Base","inheritable":null,"params":[{"type":"Array/Arguments","tagname":"params","doc":"<p>The arguments, either an array or the <code>arguments</code> object\nfrom the current method, for example: <code>this.callOverridden(arguments)</code></p>\n","name":"args","html_type":"Array/Arguments"}],"tagname":"method","files":[{"linenr":1269,"filename":"/Users/yshibukawa/personal/ext-4.2.1.883/src/class/Base.js"}],"protected":true,"return":{"type":"Object","properties":null,"doc":"<p>Returns the result of calling the overridden method</p>\n","name":"return","html_type":"Object"},"private":null,"static":null,"name":"callOverridden","doc":"<p>Call the original method that was previously overridden with <a href=\"#!/api/Ext.Base-static-method-override\" rel=\"Ext.Base-static-method-override\" class=\"docClass\">override</a></p>\n\n<pre><code><a href=\"#!/api/Ext-method-define\" rel=\"Ext-method-define\" class=\"docClass\">Ext.define</a>('My.Cat', {\n    constructor: function() {\n        alert(\"I'm a cat!\");\n    }\n});\n\nMy.Cat.override({\n    constructor: function() {\n        alert(\"I'm going to be a cat!\");\n\n        this.callOverridden();\n\n        alert(\"Meeeeoooowwww\");\n    }\n});\n\nvar kitty = new My.Cat(); // alerts \"I'm going to be a cat!\"\n                          // alerts \"I'm a cat!\"\n                          // alerts \"Meeeeoooowwww\"\n</code></pre>\n","chainable":null,"inheritdoc":null,"id":"method-callOverridden","deprecated":{"text":"<p>as of 4.1. Use <a href=\"#!/api/Ext.Base-method-callParent\" rel=\"Ext.Base-method-callParent\" class=\"docClass\">callParent</a> instead.</p>\n"},"fires":null,"linenr":null},{"autodetected":{"method_calls":true,"inheritable":true,"static":true,"private":true,"chainable":true,"inheritdoc":true,"linenr":true,"fires":true},"short_doc":"Call the \"parent\" method of the current method. ...","method_calls":null,"owner":"Ext.Base","inheritable":null,"params":[{"type":"Array/Arguments","tagname":"params","doc":"<p>The arguments, either an array or the <code>arguments</code> object\nfrom the current method, for example: <code>this.callParent(arguments)</code></p>\n","name":"args","html_type":"Array/Arguments"}],"tagname":"method","files":[{"linenr":846,"filename":"/Users/yshibukawa/personal/ext-4.2.1.883/src/class/Base.js"}],"protected":true,"return":{"type":"Object","properties":null,"doc":"<p>Returns the result of calling the parent method</p>\n","name":"return","html_type":"Object"},"private":null,"static":null,"name":"callParent","doc":"<p>Call the \"parent\" method of the current method. That is the method previously\noverridden by derivation or by an override (see <a href=\"#!/api/Ext-method-define\" rel=\"Ext-method-define\" class=\"docClass\">Ext.define</a>).</p>\n\n<pre><code> <a href=\"#!/api/Ext-method-define\" rel=\"Ext-method-define\" class=\"docClass\">Ext.define</a>('My.Base', {\n     constructor: function (x) {\n         this.x = x;\n     },\n\n     statics: {\n         method: function (x) {\n             return x;\n         }\n     }\n });\n\n <a href=\"#!/api/Ext-method-define\" rel=\"Ext-method-define\" class=\"docClass\">Ext.define</a>('My.Derived', {\n     extend: 'My.Base',\n\n     constructor: function () {\n         this.callParent([21]);\n     }\n });\n\n var obj = new My.Derived();\n\n alert(obj.x);  // alerts 21\n</code></pre>\n\n<p>This can be used with an override as follows:</p>\n\n<pre><code> <a href=\"#!/api/Ext-method-define\" rel=\"Ext-method-define\" class=\"docClass\">Ext.define</a>('My.DerivedOverride', {\n     override: 'My.Derived',\n\n     constructor: function (x) {\n         this.callParent([x*2]); // calls original My.Derived constructor\n     }\n });\n\n var obj = new My.Derived();\n\n alert(obj.x);  // now alerts 42\n</code></pre>\n\n<p>This also works with static methods.</p>\n\n<pre><code> <a href=\"#!/api/Ext-method-define\" rel=\"Ext-method-define\" class=\"docClass\">Ext.define</a>('My.Derived2', {\n     extend: 'My.Base',\n\n     statics: {\n         method: function (x) {\n             return this.callParent([x*2]); // calls My.Base.method\n         }\n     }\n });\n\n alert(My.Base.method(10);     // alerts 10\n alert(My.Derived2.method(10); // alerts 20\n</code></pre>\n\n<p>Lastly, it also works with overridden static methods.</p>\n\n<pre><code> <a href=\"#!/api/Ext-method-define\" rel=\"Ext-method-define\" class=\"docClass\">Ext.define</a>('My.Derived2Override', {\n     override: 'My.Derived2',\n\n     statics: {\n         method: function (x) {\n             return this.callParent([x*2]); // calls My.Derived2.method\n         }\n     }\n });\n\n alert(My.Derived2.method(10); // now alerts 40\n</code></pre>\n\n<p>To override a method and replace it and also call the superclass method, use\n<a href=\"#!/api/Ext.Base-method-callSuper\" rel=\"Ext.Base-method-callSuper\" class=\"docClass\">callSuper</a>. This is often done to patch a method to fix a bug.</p>\n","chainable":false,"inheritdoc":null,"id":"method-callParent","fires":null,"linenr":null},{"autodetected":{"method_calls":true,"inheritable":true,"static":true,"private":true,"chainable":true,"inheritdoc":true,"linenr":true,"fires":true},"short_doc":"This method is used by an override to call the superclass method but bypass any\noverridden method. ...","method_calls":null,"owner":"Ext.Base","inheritable":null,"params":[{"type":"Array/Arguments","tagname":"params","doc":"<p>The arguments, either an array or the <code>arguments</code> object\nfrom the current method, for example: <code>this.callSuper(arguments)</code></p>\n","name":"args","html_type":"Array/Arguments"}],"tagname":"method","files":[{"linenr":961,"filename":"/Users/yshibukawa/personal/ext-4.2.1.883/src/class/Base.js"}],"protected":true,"return":{"type":"Object","properties":null,"doc":"<p>Returns the result of calling the superclass method</p>\n","name":"return","html_type":"Object"},"private":null,"static":null,"name":"callSuper","doc":"<p>This method is used by an override to call the superclass method but bypass any\noverridden method. This is often done to \"patch\" a method that contains a bug\nbut for whatever reason cannot be fixed directly.</p>\n\n<p>Consider:</p>\n\n<pre><code> <a href=\"#!/api/Ext-method-define\" rel=\"Ext-method-define\" class=\"docClass\">Ext.define</a>('Ext.some.Class', {\n     method: function () {\n         console.log('Good');\n     }\n });\n\n <a href=\"#!/api/Ext-method-define\" rel=\"Ext-method-define\" class=\"docClass\">Ext.define</a>('Ext.some.DerivedClass', {\n     method: function () {\n         console.log('Bad');\n\n         // ... logic but with a bug ...\n\n         this.callParent();\n     }\n });\n</code></pre>\n\n<p>To patch the bug in <code>DerivedClass.method</code>, the typical solution is to create an\noverride:</p>\n\n<pre><code> <a href=\"#!/api/Ext-method-define\" rel=\"Ext-method-define\" class=\"docClass\">Ext.define</a>('App.paches.DerivedClass', {\n     override: 'Ext.some.DerivedClass',\n\n     method: function () {\n         console.log('Fixed');\n\n         // ... logic but with bug fixed ...\n\n         this.callSuper();\n     }\n });\n</code></pre>\n\n<p>The patch method cannot use <code>callParent</code> to call the superclass <code>method</code> since\nthat would call the overridden method containing the bug. In other words, the\nabove patch would only produce \"Fixed\" then \"Good\" in the console log, whereas,\nusing <code>callParent</code> would produce \"Fixed\" then \"Bad\" then \"Good\".</p>\n","chainable":false,"inheritdoc":null,"id":"method-callSuper","fires":null,"linenr":null},{"autodetected":{"method_calls":true,"inheritable":true,"params":true,"static":true,"chainable":true,"inheritdoc":true,"linenr":true,"fires":true},"short_doc":" ...","method_calls":null,"owner":"Ext.Base","inheritable":null,"params":[],"tagname":"method","files":[{"linenr":766,"filename":"/Users/yshibukawa/personal/ext-4.2.1.883/src/class/Base.js"}],"private":true,"static":null,"name":"configClass","doc":"\n","chainable":null,"inheritdoc":null,"id":"method-configClass","fires":null,"linenr":null},{"overrides":[{"owner":"Ext.state.Stateful","link":"<a href=\"#!/api/Ext.state.Stateful-method-destroy\" rel=\"Ext.state.Stateful-method-destroy\" class=\"docClass\">Ext.state.Stateful.destroy</a>","name":"destroy"},{"owner":"Ext.AbstractComponent","link":"<a href=\"#!/api/Ext.AbstractComponent-method-destroy\" rel=\"Ext.AbstractComponent-method-destroy\" class=\"docClass\">Ext.AbstractComponent.destroy</a>","name":"destroy"},{"owner":"Ext.AbstractPlugin","link":"<a href=\"#!/api/Ext.AbstractPlugin-method-destroy\" rel=\"Ext.AbstractPlugin-method-destroy\" class=\"docClass\">Ext.AbstractPlugin.destroy</a>","name":"destroy"}],"autodetected":{"method_calls":true,"inheritable":true,"params":true,"static":true,"chainable":true,"inheritdoc":true,"linenr":true,"fires":true},"short_doc":" ...","method_calls":null,"owner":"Ext.Base","inheritable":null,"params":[],"tagname":"method","files":[{"linenr":1261,"filename":"/Users/yshibukawa/personal/ext-4.2.1.883/src/class/Base.js"}],"private":true,"static":null,"name":"destroy","doc":"\n","chainable":false,"inheritdoc":null,"id":"method-destroy","fires":null,"linenr":null},{"autodetected":{"method_calls":true,"inheritable":true,"static":true,"chainable":true,"inheritdoc":true,"linenr":true,"fires":true},"short_doc":"Iterates over all of the DragDrop elements to find ones we are\nhovering over or dropping on ...","method_calls":["getZIndex","isOverTarget","isTypeOfDD"],"owner":"Ext.dd.DragDropManager","inheritable":null,"params":[{"type":"Event","tagname":"params","doc":"<p>the event</p>\n","name":"e","html_type":"Event"},{"type":"Boolean","tagname":"params","doc":"<p>is this a drop op or a mouseover op?</p>\n","name":"isDrop","html_type":"Boolean"}],"tagname":"method","files":[{"linenr":644,"filename":"/Users/yshibukawa/personal/ext-4.2.1.883/src/dd/DragDropManager.js"}],"private":true,"static":null,"name":"fireEvents","doc":"<p>Iterates over all of the DragDrop elements to find ones we are\nhovering over or dropping on</p>\n","chainable":false,"inheritdoc":null,"id":"method-fireEvents","fires":[],"linenr":null},{"autodetected":{"method_calls":true,"inheritable":true,"static":true,"private":true,"chainable":true,"inheritdoc":true,"linenr":true,"fires":true},"short_doc":"Helper function for getting the best match from the list of drag\nand drop objects returned by the drag and drop event...","method_calls":null,"owner":"Ext.dd.DragDropManager","inheritable":null,"params":[{"type":"Ext.dd.DragDrop[]","tagname":"params","doc":"<p>The array of drag and drop objects\ntargeted</p>\n","name":"dds","html_type":"<a href=\"#!/api/Ext.dd.DragDrop\" rel=\"Ext.dd.DragDrop\" class=\"docClass\">Ext.dd.DragDrop</a>[]"}],"tagname":"method","files":[{"linenr":887,"filename":"/Users/yshibukawa/personal/ext-4.2.1.883/src/dd/DragDropManager.js"}],"return":{"type":"Ext.dd.DragDrop","properties":null,"doc":"<p>The best single match</p>\n","name":"return","html_type":"<a href=\"#!/api/Ext.dd.DragDrop\" rel=\"Ext.dd.DragDrop\" class=\"docClass\">Ext.dd.DragDrop</a>"},"private":null,"static":null,"name":"getBestMatch","doc":"<p>Helper function for getting the best match from the list of drag\nand drop objects returned by the drag and drop events when we are\nin INTERSECT mode.  It returns either the first object that the\ncursor is over, or the object that has the greatest overlap with\nthe dragged element.</p>\n","chainable":false,"inheritdoc":null,"id":"method-getBestMatch","fires":null,"linenr":null},{"autodetected":{"method_calls":true,"inheritable":true,"static":true,"chainable":true,"inheritdoc":true,"linenr":true,"fires":true},"short_doc":" ...","method_calls":null,"owner":"Ext.Base","inheritable":null,"params":[{"type":"Object","tagname":"params","doc":"\n","name":"name","html_type":"Object"}],"tagname":"method","files":[{"linenr":1196,"filename":"/Users/yshibukawa/personal/ext-4.2.1.883/src/class/Base.js"}],"private":true,"static":null,"name":"getConfig","doc":"\n","chainable":false,"inheritdoc":null,"id":"method-getConfig","fires":null,"linenr":null},{"autodetected":{"method_calls":true,"inheritable":true,"static":true,"private":true,"chainable":true,"inheritdoc":true,"linenr":true,"fires":true},"short_doc":"Returns the style property for the DOM element (i.e.,\ndocument.getElById(id).style) ...","method_calls":null,"owner":"Ext.dd.DragDropManager","inheritable":null,"params":[{"type":"String","tagname":"params","doc":"<p>the id of the elment to get</p>\n","name":"id","html_type":"String"}],"tagname":"method","files":[{"linenr":1168,"filename":"/Users/yshibukawa/personal/ext-4.2.1.883/src/dd/DragDropManager.js"}],"return":{"type":"Object","properties":null,"doc":"<p>The style property of the element</p>\n","name":"return","html_type":"Object"},"private":null,"static":null,"name":"getCss","doc":"<p>Returns the style property for the DOM element (i.e.,\ndocument.getElById(id).style)</p>\n","chainable":false,"inheritdoc":null,"id":"method-getCss","fires":null,"linenr":null},{"autodetected":{"method_calls":true,"inheritable":true,"static":true,"private":true,"chainable":true,"inheritdoc":true,"linenr":true,"fires":true},"short_doc":"Returns the DragDrop instance for a given id ...","method_calls":null,"owner":"Ext.dd.DragDropManager","inheritable":null,"params":[{"type":"String","tagname":"params","doc":"<p>the id of the DragDrop object</p>\n","name":"id","html_type":"String"}],"tagname":"method","files":[{"linenr":430,"filename":"/Users/yshibukawa/personal/ext-4.2.1.883/src/dd/DragDropManager.js"}],"return":{"type":"Ext.dd.DragDrop","properties":null,"doc":"<p>the drag drop object, null if it is not found</p>\n","name":"return","html_type":"<a href=\"#!/api/Ext.dd.DragDrop\" rel=\"Ext.dd.DragDrop\" class=\"docClass\">Ext.dd.DragDrop</a>"},"private":null,"static":null,"name":"getDDById","doc":"<p>Returns the DragDrop instance for a given id</p>\n","chainable":false,"inheritdoc":null,"id":"method-getDDById","fires":null,"linenr":null},{"autodetected":{"method_calls":true,"inheritable":true,"static":true,"chainable":true,"inheritdoc":true,"linenr":true,"fires":true},"short_doc":"Get the wrapper for the DOM element specified ...","method_calls":null,"owner":"Ext.dd.DragDropManager","inheritable":null,"params":[{"type":"String","tagname":"params","doc":"<p>the id of the element to get</p>\n","name":"id","html_type":"String"}],"tagname":"method","files":[{"linenr":1142,"filename":"/Users/yshibukawa/personal/ext-4.2.1.883/src/dd/DragDropManager.js"}],"return":{"type":"Ext.dd.DragDropManager.ElementWrapper","properties":null,"doc":"<p>the wrapped element</p>\n","name":"return","html_type":"<a href=\"#!/api/Ext.dd.DragDropManager.ElementWrapper\" rel=\"Ext.dd.DragDropManager.ElementWrapper\" class=\"docClass\">Ext.dd.DragDropManager.ElementWrapper</a>"},"private":true,"static":null,"name":"getElWrapper","doc":"<p>Get the wrapper for the DOM element specified</p>\n","chainable":false,"inheritdoc":null,"id":"method-getElWrapper","deprecated":{"text":"<p>This wrapper isn't that useful</p>\n"},"fires":null,"linenr":null},{"autodetected":{"method_calls":true,"inheritable":true,"static":true,"private":true,"chainable":true,"inheritdoc":true,"linenr":true,"fires":true},"short_doc":"Returns the actual DOM element ...","method_calls":null,"owner":"Ext.dd.DragDropManager","inheritable":null,"params":[{"type":"String","tagname":"params","doc":"<p>the id of the elment to get</p>\n","name":"id","html_type":"String"}],"tagname":"method","files":[{"linenr":1158,"filename":"/Users/yshibukawa/personal/ext-4.2.1.883/src/dd/DragDropManager.js"}],"return":{"type":"Object","properties":null,"doc":"<p>The element</p>\n","name":"return","html_type":"Object"},"private":null,"static":null,"name":"getElement","doc":"<p>Returns the actual DOM element</p>\n","chainable":false,"inheritdoc":null,"id":"method-getElement","deprecated":{"text":"<p>use Ext.lib.Ext.getDom instead</p>\n"},"fires":null,"linenr":null},{"autodetected":{"method_calls":true,"inheritable":true,"static":true,"private":true,"chainable":true,"inheritdoc":true,"linenr":true,"fires":true},"short_doc":"Returns the initial configuration passed to constructor when instantiating\nthis class. ...","method_calls":null,"owner":"Ext.Base","inheritable":null,"params":[{"type":"String","tagname":"params","doc":"<p>Name of the config option to return.</p>\n","name":"name","optional":true,"html_type":"String"}],"tagname":"method","files":[{"linenr":1206,"filename":"/Users/yshibukawa/personal/ext-4.2.1.883/src/class/Base.js"}],"return":{"type":"Object/Mixed","properties":null,"doc":"<p>The full config object or a single config value\nwhen <code>name</code> parameter specified.</p>\n","name":"return","html_type":"Object/Mixed"},"private":null,"static":null,"name":"getInitialConfig","doc":"<p>Returns the initial configuration passed to constructor when instantiating\nthis class.</p>\n","chainable":false,"inheritdoc":null,"id":"method-getInitialConfig","fires":null,"linenr":null},{"autodetected":{"method_calls":true,"inheritable":true,"static":true,"private":true,"chainable":true,"inheritdoc":true,"linenr":true,"fires":true},"short_doc":"Returns a Region object containing the drag and drop element's position\nand size, including the padding configured fo...","method_calls":["isTypeOfDD"],"owner":"Ext.dd.DragDropManager","inheritable":null,"params":[{"type":"Ext.dd.DragDrop","tagname":"params","doc":"<p>the drag and drop object to get the location for.</p>\n","name":"oDD","html_type":"<a href=\"#!/api/Ext.dd.DragDrop\" rel=\"Ext.dd.DragDrop\" class=\"docClass\">Ext.dd.DragDrop</a>"}],"tagname":"method","files":[{"linenr":1001,"filename":"/Users/yshibukawa/personal/ext-4.2.1.883/src/dd/DragDropManager.js"}],"return":{"type":"Ext.util.Region","properties":null,"doc":"<p>a Region object representing the total area\nthe element occupies, including any padding\nthe instance is configured for.</p>\n","name":"return","html_type":"<a href=\"#!/api/Ext.util.Region\" rel=\"Ext.util.Region\" class=\"docClass\">Ext.util.Region</a>"},"private":null,"static":null,"name":"getLocation","doc":"<p>Returns a Region object containing the drag and drop element's position\nand size, including the padding configured for it</p>\n","chainable":false,"inheritdoc":null,"id":"method-getLocation","fires":[],"linenr":null},{"autodetected":{"method_calls":true,"inheritable":true,"static":true,"private":true,"chainable":true,"inheritdoc":true,"linenr":true,"fires":true},"short_doc":"Returns the drag and drop instances that are in all groups the\npassed in instance belongs to. ...","method_calls":["isTypeOfDD"],"owner":"Ext.dd.DragDropManager","inheritable":null,"params":[{"type":"Ext.dd.DragDrop","tagname":"params","doc":"<p>the obj to get related data for</p>\n","name":"p_oDD","html_type":"<a href=\"#!/api/Ext.dd.DragDrop\" rel=\"Ext.dd.DragDrop\" class=\"docClass\">Ext.dd.DragDrop</a>"},{"type":"Boolean","tagname":"params","doc":"<p>if true, only return targetable objs</p>\n","name":"bTargetsOnly","html_type":"Boolean"}],"tagname":"method","files":[{"linenr":360,"filename":"/Users/yshibukawa/personal/ext-4.2.1.883/src/dd/DragDropManager.js"}],"return":{"type":"Ext.dd.DragDrop[]","properties":null,"doc":"<p>the related instances</p>\n","name":"return","html_type":"<a href=\"#!/api/Ext.dd.DragDrop\" rel=\"Ext.dd.DragDrop\" class=\"docClass\">Ext.dd.DragDrop</a>[]"},"private":null,"static":null,"name":"getRelated","doc":"<p>Returns the drag and drop instances that are in all groups the\npassed in instance belongs to.</p>\n","chainable":false,"inheritdoc":null,"id":"method-getRelated","fires":[],"linenr":null},{"autodetected":{"method_calls":true,"inheritable":true,"params":true,"static":true,"chainable":true,"inheritdoc":true,"linenr":true,"fires":true},"short_doc":"Collects the z-index of the passed element, looking up the parentNode axis to find an absolutely positioned ancestor\n...","method_calls":null,"owner":"Ext.dd.DragDropManager","inheritable":null,"params":[{"type":"Object","name":"element","html_type":"Object"}],"tagname":"method","files":[{"linenr":854,"filename":"/Users/yshibukawa/personal/ext-4.2.1.883/src/dd/DragDropManager.js"}],"return":{"type":"Number","properties":null,"doc":"<p>The z-index of the element, or of its topmost absolutely positioned ancestor. Returns -1 if the element is not\nabsolutely positioned.</p>\n","name":"return","html_type":"Number"},"private":true,"static":null,"name":"getZIndex","doc":"<p>Collects the z-index of the passed element, looking up the parentNode axis to find an absolutely positioned ancestor\nwhich is able to yield a z-index. If found to be not absolutely positionedm returns -1.</p>\n\n<p>This is used when sorting potential drop targets into z-index order so that only the topmost receives <code>over</code> and <code>drop</code> events.</p>\n","chainable":false,"inheritdoc":null,"id":"method-getZIndex","fires":null,"linenr":null},{"autodetected":{"method_calls":true,"inheritable":true,"static":true,"chainable":true,"inheritdoc":true,"linenr":true,"fires":true},"short_doc":"Fired after a registered DragDrop object gets the mousedown event. ...","method_calls":["handleMouseUp","startDrag"],"owner":"Ext.dd.DragDropManager","inheritable":null,"params":[{"type":"Event","tagname":"params","doc":"<p>the event</p>\n","name":"e","html_type":"Event"},{"type":"Ext.dd.DragDrop","tagname":"params","doc":"<p>the DragDrop object being dragged</p>\n","name":"oDD","html_type":"<a href=\"#!/api/Ext.dd.DragDrop\" rel=\"Ext.dd.DragDrop\" class=\"docClass\">Ext.dd.DragDrop</a>"}],"tagname":"method","files":[{"linenr":446,"filename":"/Users/yshibukawa/personal/ext-4.2.1.883/src/dd/DragDropManager.js"}],"private":true,"static":null,"name":"handleMouseDown","doc":"<p>Fired after a registered DragDrop object gets the mousedown event.\nSets up the events required to track the object being dragged</p>\n","chainable":false,"inheritdoc":null,"id":"method-handleMouseDown","fires":[],"linenr":null},{"autodetected":{"method_calls":true,"inheritable":true,"static":true,"chainable":true,"inheritdoc":true,"linenr":true,"fires":true},"short_doc":"Internal function to handle the mousemove event. ...","method_calls":["fireEvents","startDrag","stopEvent"],"owner":"Ext.dd.DragDropManager","inheritable":null,"params":[{"type":"Event","tagname":"params","doc":"<p>the event</p>\n","name":"e","html_type":"Event"}],"tagname":"method","files":[{"linenr":600,"filename":"/Users/yshibukawa/personal/ext-4.2.1.883/src/dd/DragDropManager.js"}],"private":true,"static":null,"name":"handleMouseMove","doc":"<p>Internal function to handle the mousemove event.  Will be invoked\nfrom the context of the html element.</p>\n\n<p>TODO: figure out what we can do about mouse events lost when the\nuser drags objects beyond the window boundary.  Currently we can\ndetect this in internet explorer by verifying that the mouse is\ndown during the mousemove event.  Firefox doesn't give us the\nbutton state on the mousemove event.</p>\n","chainable":false,"inheritdoc":null,"id":"method-handleMouseMove","fires":[],"linenr":null},{"autodetected":{"method_calls":true,"inheritable":true,"static":true,"chainable":true,"inheritdoc":true,"linenr":true,"fires":true},"short_doc":"Internal function to handle the mouseup event. ...","method_calls":["fireEvents","stopDrag","stopEvent"],"owner":"Ext.dd.DragDropManager","inheritable":null,"params":[{"type":"Event","tagname":"params","doc":"<p>the event</p>\n","name":"e","html_type":"Event"}],"tagname":"method","files":[{"linenr":521,"filename":"/Users/yshibukawa/personal/ext-4.2.1.883/src/dd/DragDropManager.js"}],"private":true,"static":null,"name":"handleMouseUp","doc":"<p>Internal function to handle the mouseup event.  Will be invoked\nfrom the context of the document.</p>\n","chainable":false,"inheritdoc":null,"id":"method-handleMouseUp","fires":[],"linenr":null},{"autodetected":{"method_calls":true,"inheritable":true,"static":true,"chainable":true,"inheritdoc":true,"linenr":true,"fires":true},"short_doc":" ...","method_calls":null,"owner":"Ext.Base","inheritable":null,"params":[{"type":"Object","tagname":"params","doc":"\n","name":"config","html_type":"Object"}],"tagname":"method","files":[{"linenr":1156,"filename":"/Users/yshibukawa/personal/ext-4.2.1.883/src/class/Base.js"}],"private":true,"static":null,"name":"hasConfig","doc":"\n","chainable":false,"inheritdoc":null,"id":"method-hasConfig","fires":null,"linenr":null},{"autodetected":{"method_calls":true,"inheritable":true,"params":true,"static":true,"chainable":true,"inheritdoc":true,"linenr":true,"fires":true},"short_doc":"Called the first time an element is registered. ...","method_calls":null,"owner":"Ext.dd.DragDropManager","inheritable":null,"params":[],"tagname":"method","files":[{"linenr":124,"filename":"/Users/yshibukawa/personal/ext-4.2.1.883/src/dd/DragDropManager.js"}],"private":true,"static":null,"name":"init","doc":"<p>Called the first time an element is registered.</p>\n","chainable":false,"inheritdoc":null,"id":"method-init","fires":null,"linenr":null},{"autodetected":{"method_calls":true,"inheritable":true,"static":true,"private":true,"chainable":true,"inheritdoc":true,"linenr":true,"fires":true},"short_doc":"Initialize configuration for this class. ...","method_calls":null,"owner":"Ext.Base","inheritable":null,"params":[{"type":"Object","tagname":"params","doc":"\n","name":"config","html_type":"Object"}],"tagname":"method","files":[{"linenr":1090,"filename":"/Users/yshibukawa/personal/ext-4.2.1.883/src/class/Base.js"}],"protected":true,"return":{"type":"Ext.Base","properties":null,"doc":"<p>this</p>\n","name":"return","html_type":"<a href=\"#!/api/Ext.Base\" rel=\"Ext.Base\" class=\"docClass\">Ext.Base</a>"},"private":null,"static":null,"name":"initConfig","doc":"<p>Initialize configuration for this class. a typical example:</p>\n\n<pre><code><a href=\"#!/api/Ext-method-define\" rel=\"Ext-method-define\" class=\"docClass\">Ext.define</a>('My.awesome.Class', {\n    // The default config\n    config: {\n        name: 'Awesome',\n        isAwesome: true\n    },\n\n    constructor: function(config) {\n        this.initConfig(config);\n    }\n});\n\nvar awesome = new My.awesome.Class({\n    name: 'Super Awesome'\n});\n\nalert(awesome.getName()); // 'Super Awesome'\n</code></pre>\n","chainable":true,"inheritdoc":null,"id":"method-initConfig","fires":null,"linenr":null},{"autodetected":{"method_calls":true,"inheritable":true,"static":true,"private":true,"chainable":true,"inheritdoc":true,"linenr":true,"fires":true},"short_doc":"Utility function to determine if a given element has been\nregistered as a drag drop item. ...","method_calls":["getDDById"],"owner":"Ext.dd.DragDropManager","inheritable":null,"params":[{"type":"String","tagname":"params","doc":"<p>the element id to check</p>\n","name":"id","html_type":"String"}],"tagname":"method","files":[{"linenr":349,"filename":"/Users/yshibukawa/personal/ext-4.2.1.883/src/dd/DragDropManager.js"}],"return":{"type":"Boolean","properties":null,"doc":"<p>true if this element is a DragDrop item,\nfalse otherwise</p>\n","name":"return","html_type":"Boolean"},"private":null,"static":null,"name":"isDragDrop","doc":"<p>Utility function to determine if a given element has been\nregistered as a drag drop item.</p>\n","chainable":false,"inheritdoc":null,"id":"method-isDragDrop","fires":[],"linenr":null},{"autodetected":{"method_calls":true,"inheritable":true,"static":true,"private":true,"chainable":true,"inheritdoc":true,"linenr":true,"fires":true},"short_doc":"Utility function to determine if a given element has been\nregistered as a drag drop handle for the given Drag Drop ob...","method_calls":null,"owner":"Ext.dd.DragDropManager","inheritable":null,"params":[{"type":"String","tagname":"params","doc":"<p>the element id to check</p>\n","name":"id","html_type":"String"}],"tagname":"method","files":[{"linenr":418,"filename":"/Users/yshibukawa/personal/ext-4.2.1.883/src/dd/DragDropManager.js"}],"return":{"type":"Boolean","properties":null,"doc":"<p>true if this element is a DragDrop handle, false\notherwise</p>\n","name":"return","html_type":"Boolean"},"private":null,"static":null,"name":"isHandle","doc":"<p>Utility function to determine if a given element has been\nregistered as a drag drop handle for the given Drag Drop object.</p>\n","chainable":false,"inheritdoc":null,"id":"method-isHandle","fires":null,"linenr":null},{"autodetected":{"method_calls":true,"inheritable":true,"static":true,"private":true,"chainable":true,"inheritdoc":true,"linenr":true,"fires":true},"short_doc":"Returns true if the specified dd target is a legal target for\nthe specifice drag obj ...","method_calls":["getRelated"],"owner":"Ext.dd.DragDropManager","inheritable":null,"params":[{"type":"Ext.dd.DragDrop","tagname":"params","doc":"<p>the drag obj</p>\n","name":"oDD","html_type":"<a href=\"#!/api/Ext.dd.DragDrop\" rel=\"Ext.dd.DragDrop\" class=\"docClass\">Ext.dd.DragDrop</a>"},{"type":"Ext.dd.DragDrop","tagname":"params","doc":"<p>the target</p>\n","name":"oTargetDD","html_type":"<a href=\"#!/api/Ext.dd.DragDrop\" rel=\"Ext.dd.DragDrop\" class=\"docClass\">Ext.dd.DragDrop</a>"}],"tagname":"method","files":[{"linenr":385,"filename":"/Users/yshibukawa/personal/ext-4.2.1.883/src/dd/DragDropManager.js"}],"return":{"type":"Boolean","properties":null,"doc":"<p>true if the target is a legal target for the\ndd obj</p>\n","name":"return","html_type":"Boolean"},"private":null,"static":null,"name":"isLegalTarget","doc":"<p>Returns true if the specified dd target is a legal target for\nthe specifice drag obj</p>\n","chainable":false,"inheritdoc":null,"id":"method-isLegalTarget","fires":[],"linenr":null},{"autodetected":{"method_calls":true,"inheritable":true,"params":true,"static":true,"private":true,"chainable":true,"inheritdoc":true,"linenr":true,"fires":true},"short_doc":"Is drag and drop locked? ...","method_calls":null,"owner":"Ext.dd.DragDropManager","inheritable":null,"params":[],"tagname":"method","files":[{"linenr":224,"filename":"/Users/yshibukawa/personal/ext-4.2.1.883/src/dd/DragDropManager.js"}],"return":{"type":"Boolean","properties":null,"doc":"<p>True if drag and drop is locked, false otherwise.</p>\n","name":"return","html_type":"Boolean"},"private":null,"static":null,"name":"isLocked","doc":"<p>Is drag and drop locked?</p>\n","chainable":false,"inheritdoc":null,"id":"method-isLocked","fires":null,"linenr":null},{"autodetected":{"method_calls":true,"inheritable":true,"static":true,"chainable":true,"inheritdoc":true,"linenr":true,"fires":true},"short_doc":"Checks the cursor location to see if it over the target ...","method_calls":["getLocation"],"owner":"Ext.dd.DragDropManager","inheritable":null,"params":[{"type":"Ext.util.Point","tagname":"params","doc":"<p>The point to evaluate</p>\n","name":"pt","html_type":"<a href=\"#!/api/Ext.util.Point\" rel=\"Ext.util.Point\" class=\"docClass\">Ext.util.Point</a>"},{"type":"Ext.dd.DragDrop","tagname":"params","doc":"<p>the DragDrop object we are inspecting</p>\n","name":"oTarget","html_type":"<a href=\"#!/api/Ext.dd.DragDrop\" rel=\"Ext.dd.DragDrop\" class=\"docClass\">Ext.dd.DragDrop</a>"}],"tagname":"method","files":[{"linenr":1043,"filename":"/Users/yshibukawa/personal/ext-4.2.1.883/src/dd/DragDropManager.js"}],"return":{"type":"Boolean","properties":null,"doc":"<p>true if the mouse is over the target</p>\n","name":"return","html_type":"Boolean"},"private":true,"static":null,"name":"isOverTarget","doc":"<p>Checks the cursor location to see if it over the target</p>\n","chainable":false,"inheritdoc":null,"id":"method-isOverTarget","fires":[],"linenr":null},{"autodetected":{"method_calls":true,"inheritable":true,"static":true,"private":true,"chainable":true,"inheritdoc":true,"linenr":true,"fires":true},"short_doc":"My goal is to be able to transparently determine if an object is\ntypeof DragDrop, and the exact subclass of DragDrop. ...","method_calls":null,"owner":"Ext.dd.DragDropManager","inheritable":null,"params":[{"type":"Object","tagname":"params","doc":"<p>object to evaluate</p>\n","name":"the","html_type":"Object"}],"tagname":"method","files":[{"linenr":405,"filename":"/Users/yshibukawa/personal/ext-4.2.1.883/src/dd/DragDropManager.js"}],"return":{"type":"Boolean","properties":null,"doc":"<p>true if typeof oDD = DragDrop</p>\n","name":"return","html_type":"Boolean"},"private":null,"static":null,"name":"isTypeOfDD","doc":"<p>My goal is to be able to transparently determine if an object is\ntypeof DragDrop, and the exact subclass of DragDrop.  typeof\nreturns \"object\", oDD.constructor.toString() always returns\n\"DragDrop\" and not the name of the subclass.  So for now it just\nevaluates a well-known variable in DragDrop.</p>\n","chainable":false,"inheritdoc":null,"id":"method-isTypeOfDD","fires":null,"linenr":null},{"autodetected":{"method_calls":true,"inheritable":true,"params":true,"static":true,"private":true,"chainable":true,"inheritdoc":true,"linenr":true,"fires":true},"short_doc":"Lock all drag and drop functionality ...","method_calls":null,"owner":"Ext.dd.DragDropManager","inheritable":null,"params":[],"tagname":"method","files":[{"linenr":214,"filename":"/Users/yshibukawa/personal/ext-4.2.1.883/src/dd/DragDropManager.js"}],"private":null,"static":null,"name":"lock","doc":"<p>Lock all drag and drop functionality</p>\n","chainable":false,"inheritdoc":null,"id":"method-lock","fires":null,"linenr":null},{"autodetected":{"method_calls":true,"inheritable":true,"static":true,"chainable":true,"inheritdoc":true,"linenr":true,"fires":true},"short_doc":" ...","method_calls":null,"owner":"Ext.Base","inheritable":null,"params":[{"type":"Object","tagname":"params","doc":"\n","name":"names","html_type":"Object"},{"type":"Object","tagname":"params","doc":"\n","name":"callback","html_type":"Object"},{"type":"Object","tagname":"params","doc":"\n","name":"scope","html_type":"Object"}],"tagname":"method","files":[{"linenr":1224,"filename":"/Users/yshibukawa/personal/ext-4.2.1.883/src/class/Base.js"}],"private":true,"static":null,"name":"onConfigUpdate","doc":"\n","chainable":false,"inheritdoc":null,"id":"method-onConfigUpdate","fires":null,"linenr":null},{"autodetected":{"method_calls":true,"inheritable":true,"static":true,"private":true,"chainable":true,"inheritdoc":true,"linenr":true,"fires":true},"short_doc":"Refreshes the cache of the top-left and bottom-right points of the\ndrag and drop objects in the specified group(s). ...","method_calls":["getLocation","isTypeOfDD"],"owner":"Ext.dd.DragDropManager","inheritable":null,"params":[{"type":"Object","tagname":"params","doc":"<p>an associative array of groups to refresh</p>\n","name":"groups","html_type":"Object"}],"tagname":"method","files":[{"linenr":933,"filename":"/Users/yshibukawa/personal/ext-4.2.1.883/src/dd/DragDropManager.js"}],"private":null,"static":null,"name":"refreshCache","doc":"<p>Refreshes the cache of the top-left and bottom-right points of the\ndrag and drop objects in the specified group(s).  This is in the\nformat that is stored in the drag and drop instance, so typical\nusage is:</p>\n\n<pre><code><a href=\"#!/api/Ext.dd.DragDropManager-method-refreshCache\" rel=\"Ext.dd.DragDropManager-method-refreshCache\" class=\"docClass\">Ext.dd.DragDropManager.refreshCache</a>(ddinstance.groups);\n</code></pre>\n\n<p>Alternatively:</p>\n\n<pre><code><a href=\"#!/api/Ext.dd.DragDropManager-method-refreshCache\" rel=\"Ext.dd.DragDropManager-method-refreshCache\" class=\"docClass\">Ext.dd.DragDropManager.refreshCache</a>({group1:true, group2:true});\n</code></pre>\n\n<p>TODO: this really should be an indexed array.  Alternatively this\nmethod could accept both.</p>\n","chainable":false,"inheritdoc":null,"id":"method-refreshCache","fires":[],"linenr":null},{"autodetected":{"method_calls":true,"inheritable":true,"static":true,"private":true,"chainable":true,"inheritdoc":true,"linenr":true,"fires":true},"short_doc":"Each DragDrop instance must be registered with the DragDropManager. ...","method_calls":["init"],"owner":"Ext.dd.DragDropManager","inheritable":null,"params":[{"type":"Ext.dd.DragDrop","tagname":"params","doc":"<p>the DragDrop object to register</p>\n","name":"oDD","html_type":"<a href=\"#!/api/Ext.dd.DragDrop\" rel=\"Ext.dd.DragDrop\" class=\"docClass\">Ext.dd.DragDrop</a>"},{"type":"String","tagname":"params","doc":"<p>the name of the group this element belongs to</p>\n","name":"sGroup","html_type":"String"}],"tagname":"method","files":[{"linenr":290,"filename":"/Users/yshibukawa/personal/ext-4.2.1.883/src/dd/DragDropManager.js"}],"private":null,"static":null,"name":"regDragDrop","doc":"<p>Each DragDrop instance must be registered with the DragDropManager.\nThis is executed in DragDrop.init()</p>\n","chainable":false,"inheritdoc":null,"id":"method-regDragDrop","fires":[],"linenr":null},{"autodetected":{"method_calls":true,"inheritable":true,"static":true,"private":true,"chainable":true,"inheritdoc":true,"linenr":true,"fires":true},"short_doc":"Each DragDrop handle element must be registered. ...","method_calls":null,"owner":"Ext.dd.DragDropManager","inheritable":null,"params":[{"type":"String","tagname":"params","doc":"<p>the DragDrop id this element is a handle for</p>\n","name":"sDDId","html_type":"String"},{"type":"String","tagname":"params","doc":"<p>the id of the element that is the drag\nhandle</p>\n","name":"sHandleId","html_type":"String"}],"tagname":"method","files":[{"linenr":335,"filename":"/Users/yshibukawa/personal/ext-4.2.1.883/src/dd/DragDropManager.js"}],"private":null,"static":null,"name":"regHandle","doc":"<p>Each DragDrop handle element must be registered.  This is done\nautomatically when executing DragDrop.setHandleElId()</p>\n","chainable":false,"inheritdoc":null,"id":"method-regHandle","fires":null,"linenr":null},{"autodetected":{"method_calls":true,"inheritable":true,"params":true,"static":true,"chainable":true,"inheritdoc":true,"linenr":true,"fires":true},"short_doc":"Removes the supplied dd instance from the supplied group. ...","method_calls":null,"owner":"Ext.dd.DragDropManager","inheritable":null,"params":[{"type":"Object","name":"oDD","html_type":"Object"},{"type":"Object","name":"sGroup","html_type":"Object"}],"tagname":"method","files":[{"linenr":305,"filename":"/Users/yshibukawa/personal/ext-4.2.1.883/src/dd/DragDropManager.js"}],"private":true,"static":null,"name":"removeDDFromGroup","doc":"<p>Removes the supplied dd instance from the supplied group. Executed\nby DragDrop.removeFromGroup, so don't call this function directly.</p>\n","chainable":false,"inheritdoc":null,"id":"method-removeDDFromGroup","fires":null,"linenr":null},{"autodetected":{"method_calls":true,"inheritable":true,"params":true,"static":true,"chainable":true,"inheritdoc":true,"linenr":true,"fires":true},"short_doc":" ...","method_calls":null,"owner":"Ext.Base","inheritable":null,"params":[{"type":"Object","name":"config","html_type":"Object"},{"type":"Object","name":"applyIfNotSet","html_type":"Object"}],"tagname":"method","files":[{"linenr":1164,"filename":"/Users/yshibukawa/personal/ext-4.2.1.883/src/class/Base.js"}],"return":{"type":"Ext.Base","doc":"<p>this</p>\n","html_type":"<a href=\"#!/api/Ext.Base\" rel=\"Ext.Base\" class=\"docClass\">Ext.Base</a>"},"private":true,"static":null,"name":"setConfig","doc":"\n","chainable":true,"inheritdoc":null,"id":"method-setConfig","fires":null,"linenr":null},{"autodetected":{"method_calls":true,"inheritable":true,"static":true,"private":true,"chainable":true,"inheritdoc":true,"linenr":true,"fires":true},"short_doc":"Fired when either the drag pixel threshold or the mousedown hold\ntime threshold has been met. ...","method_calls":null,"owner":"Ext.dd.DragDropManager","inheritable":null,"params":[{"type":"Number","tagname":"params","doc":"<p>the X position of the original mousedown</p>\n","name":"x","html_type":"Number"},{"type":"Number","tagname":"params","doc":"<p>the Y position of the original mousedown</p>\n","name":"y","html_type":"Number"}],"tagname":"method","files":[{"linenr":496,"filename":"/Users/yshibukawa/personal/ext-4.2.1.883/src/dd/DragDropManager.js"}],"private":null,"static":null,"name":"startDrag","doc":"<p>Fired when either the drag pixel threshold or the mousedown hold\ntime threshold has been met.</p>\n","chainable":false,"inheritdoc":null,"id":"method-startDrag","fires":null,"linenr":null},{"autodetected":{"method_calls":true,"inheritable":true,"params":true,"static":true,"private":true,"chainable":true,"inheritdoc":true,"linenr":true,"fires":true},"short_doc":"Get the reference to the class from which this object was instantiated. ...","method_calls":null,"owner":"Ext.Base","inheritable":null,"params":[],"tagname":"method","files":[{"linenr":778,"filename":"/Users/yshibukawa/personal/ext-4.2.1.883/src/class/Base.js"}],"protected":true,"return":{"type":"Ext.Class","properties":null,"doc":"\n","name":"return","html_type":"<a href=\"#!/api/Ext.Class\" rel=\"Ext.Class\" class=\"docClass\">Ext.Class</a>"},"private":null,"static":null,"name":"statics","doc":"<p>Get the reference to the class from which this object was instantiated. Note that unlike <a href=\"#!/api/Ext.Base-property-self\" rel=\"Ext.Base-property-self\" class=\"docClass\">self</a>,\n<code>this.statics()</code> is scope-independent and it always returns the class from which it was called, regardless of what\n<code>this</code> points to during run-time</p>\n\n<pre><code><a href=\"#!/api/Ext-method-define\" rel=\"Ext-method-define\" class=\"docClass\">Ext.define</a>('My.Cat', {\n    statics: {\n        totalCreated: 0,\n        speciesName: 'Cat' // My.Cat.speciesName = 'Cat'\n    },\n\n    constructor: function() {\n        var statics = this.statics();\n\n        alert(statics.speciesName);     // always equals to 'Cat' no matter what 'this' refers to\n                                        // equivalent to: My.Cat.speciesName\n\n        alert(this.self.speciesName);   // dependent on 'this'\n\n        statics.totalCreated++;\n    },\n\n    clone: function() {\n        var cloned = new this.self;                      // dependent on 'this'\n\n        cloned.groupName = this.statics().speciesName;   // equivalent to: My.Cat.speciesName\n\n        return cloned;\n    }\n});\n\n\n<a href=\"#!/api/Ext-method-define\" rel=\"Ext-method-define\" class=\"docClass\">Ext.define</a>('My.SnowLeopard', {\n    extend: 'My.Cat',\n\n    statics: {\n        speciesName: 'Snow Leopard'     // My.SnowLeopard.speciesName = 'Snow Leopard'\n    },\n\n    constructor: function() {\n        this.callParent();\n    }\n});\n\nvar cat = new My.Cat();                 // alerts 'Cat', then alerts 'Cat'\n\nvar snowLeopard = new My.SnowLeopard(); // alerts 'Cat', then alerts 'Snow Leopard'\n\nvar clone = snowLeopard.clone();\nalert(<a href=\"#!/api/Ext-method-getClassName\" rel=\"Ext-method-getClassName\" class=\"docClass\">Ext.getClassName</a>(clone));         // alerts 'My.SnowLeopard'\nalert(clone.groupName);                 // alerts 'Cat'\n\nalert(My.Cat.totalCreated);             // alerts 3\n</code></pre>\n","chainable":false,"inheritdoc":null,"id":"method-statics","fires":null,"linenr":null},{"autodetected":{"method_calls":true,"inheritable":true,"static":true,"chainable":true,"inheritdoc":true,"linenr":true,"fires":true},"short_doc":"Internal function to clean up event handlers after the drag\noperation is complete ...","method_calls":null,"owner":"Ext.dd.DragDropManager","inheritable":null,"params":[{"type":"Event","tagname":"params","doc":"<p>the event</p>\n","name":"e","html_type":"Event"}],"tagname":"method","files":[{"linenr":568,"filename":"/Users/yshibukawa/personal/ext-4.2.1.883/src/dd/DragDropManager.js"}],"private":true,"static":null,"name":"stopDrag","doc":"<p>Internal function to clean up event handlers after the drag\noperation is complete</p>\n","chainable":false,"inheritdoc":null,"id":"method-stopDrag","fires":null,"linenr":null},{"autodetected":{"method_calls":true,"inheritable":true,"static":true,"private":true,"chainable":true,"inheritdoc":true,"linenr":true,"fires":true},"short_doc":"Utility to stop event propagation and event default, if these\nfeatures are turned on. ...","method_calls":null,"owner":"Ext.dd.DragDropManager","inheritable":null,"params":[{"type":"Event","tagname":"params","doc":"<p>the event as returned by this.getEvent()</p>\n","name":"e","html_type":"Event"}],"tagname":"method","files":[{"linenr":553,"filename":"/Users/yshibukawa/personal/ext-4.2.1.883/src/dd/DragDropManager.js"}],"private":null,"static":null,"name":"stopEvent","doc":"<p>Utility to stop event propagation and event default, if these\nfeatures are turned on.</p>\n","chainable":false,"inheritdoc":null,"id":"method-stopEvent","fires":null,"linenr":null},{"autodetected":{"method_calls":true,"inheritable":true,"params":true,"static":true,"private":true,"chainable":true,"inheritdoc":true,"linenr":true,"fires":true},"short_doc":"Unlock all drag and drop functionality ...","method_calls":null,"owner":"Ext.dd.DragDropManager","inheritable":null,"params":[],"tagname":"method","files":[{"linenr":219,"filename":"/Users/yshibukawa/personal/ext-4.2.1.883/src/dd/DragDropManager.js"}],"private":null,"static":null,"name":"unlock","doc":"<p>Unlock all drag and drop functionality</p>\n","chainable":false,"inheritdoc":null,"id":"method-unlock","fires":null,"linenr":null},{"autodetected":{"method_calls":true,"inheritable":true,"params":true,"static":true,"chainable":true,"inheritdoc":true,"linenr":true,"fires":true},"short_doc":"Cleans up the drag and drop events and objects. ...","method_calls":["_execOnAll","stopDrag"],"owner":"Ext.dd.DragDropManager","inheritable":null,"params":[],"tagname":"method","files":[{"linenr":1114,"filename":"/Users/yshibukawa/personal/ext-4.2.1.883/src/dd/DragDropManager.js"}],"private":true,"static":null,"name":"unregAll","doc":"<p>Cleans up the drag and drop events and objects.</p>\n","chainable":false,"inheritdoc":null,"id":"method-unregAll","fires":[],"linenr":null},{"autodetected":{"method_calls":true,"inheritable":true,"static":true,"private":true,"chainable":true,"inheritdoc":true,"linenr":true,"fires":true},"short_doc":"This checks to make sure an element exists and is in the DOM. ...","method_calls":null,"owner":"Ext.dd.DragDropManager","inheritable":null,"params":[{"type":"HTMLElement","tagname":"params","doc":"<p>the element to check</p>\n","name":"el","html_type":"HTMLElement"}],"tagname":"method","files":[{"linenr":975,"filename":"/Users/yshibukawa/personal/ext-4.2.1.883/src/dd/DragDropManager.js"}],"return":{"type":"Boolean","properties":null,"doc":"<p>true if the element looks usable</p>\n","name":"return","html_type":"Boolean"},"private":null,"static":null,"name":"verifyEl","doc":"<p>This checks to make sure an element exists and is in the DOM.  The\nmain purpose is to handle cases where innerHTML is used to remove\ndrag and drop objects from the DOM.  IE provides an 'unspecified\nerror' when trying to access the offsetParent of such an element</p>\n","chainable":false,"inheritdoc":null,"id":"method-verifyEl","fires":null,"linenr":null},{"autodetected":{"method_calls":true,"chainable":true,"inheritdoc":true,"linenr":true,"fires":true},"short_doc":" ...","method_calls":null,"owner":"Ext.Base","inheritable":true,"params":[{"type":"Object","tagname":"params","doc":"\n","name":"config","html_type":"Object"}],"tagname":"method","files":[{"linenr":176,"filename":"/Users/yshibukawa/personal/ext-4.2.1.883/src/class/Base.js"}],"private":true,"static":true,"name":"addConfig","doc":"\n","chainable":false,"inheritdoc":null,"id":"static-method-addConfig","fires":null,"linenr":null},{"autodetected":{"method_calls":true,"chainable":true,"inheritdoc":true,"linenr":true,"fires":true},"short_doc":" ...","method_calls":null,"owner":"Ext.Base","inheritable":true,"params":[{"type":"Object","tagname":"params","doc":"\n","name":"members","html_type":"Object"}],"tagname":"method","files":[{"linenr":256,"filename":"/Users/yshibukawa/personal/ext-4.2.1.883/src/class/Base.js"}],"private":true,"static":true,"name":"addInheritableStatics","doc":"\n","chainable":true,"inheritdoc":null,"id":"static-method-addInheritableStatics","fires":null,"linenr":null},{"autodetected":{"method_calls":true,"chainable":true,"inheritdoc":true,"linenr":true,"fires":true},"short_doc":" ...","method_calls":null,"owner":"Ext.Base","inheritable":true,"params":[{"type":"Object","tagname":"params","doc":"\n","name":"name","html_type":"Object"},{"type":"Object","tagname":"params","doc":"\n","name":"member","html_type":"Object"}],"tagname":"method","files":[{"linenr":353,"filename":"/Users/yshibukawa/personal/ext-4.2.1.883/src/class/Base.js"}],"private":true,"static":true,"name":"addMember","doc":"\n","chainable":true,"inheritdoc":null,"id":"static-method-addMember","fires":null,"linenr":null},{"autodetected":{"method_calls":true,"private":true,"chainable":true,"inheritdoc":true,"linenr":true,"fires":true},"short_doc":"Add methods / properties to the prototype of this class. ...","method_calls":null,"owner":"Ext.Base","inheritable":true,"params":[{"type":"Object","tagname":"params","doc":"\n","name":"members","html_type":"Object"}],"tagname":"method","files":[{"linenr":296,"filename":"/Users/yshibukawa/personal/ext-4.2.1.883/src/class/Base.js"}],"static":true,"private":null,"name":"addMembers","doc":"<p>Add methods / properties to the prototype of this class.</p>\n\n<pre><code><a href=\"#!/api/Ext-method-define\" rel=\"Ext-method-define\" class=\"docClass\">Ext.define</a>('My.awesome.Cat', {\n    constructor: function() {\n        ...\n    }\n});\n\n My.awesome.Cat.addMembers({\n     meow: function() {\n        alert('Meowww...');\n     }\n });\n\n var kitty = new My.awesome.Cat;\n kitty.meow();\n</code></pre>\n","chainable":true,"inheritdoc":null,"id":"static-method-addMembers","fires":null,"linenr":null},{"autodetected":{"method_calls":true,"private":true,"chainable":true,"inheritdoc":true,"linenr":true,"fires":true},"short_doc":"Add / override static properties of this class. ...","method_calls":null,"owner":"Ext.Base","inheritable":true,"params":[{"type":"Object","tagname":"params","doc":"\n","name":"members","html_type":"Object"}],"tagname":"method","files":[{"linenr":218,"filename":"/Users/yshibukawa/personal/ext-4.2.1.883/src/class/Base.js"}],"return":{"type":"Ext.Base","properties":null,"doc":"<p>this</p>\n","name":"return","html_type":"<a href=\"#!/api/Ext.Base\" rel=\"Ext.Base\" class=\"docClass\">Ext.Base</a>"},"static":true,"private":null,"name":"addStatics","doc":"<p>Add / override static properties of this class.</p>\n\n<pre><code><a href=\"#!/api/Ext-method-define\" rel=\"Ext-method-define\" class=\"docClass\">Ext.define</a>('My.cool.Class', {\n    ...\n});\n\nMy.cool.Class.addStatics({\n    someProperty: 'someValue',      // My.cool.Class.someProperty = 'someValue'\n    method1: function() { ... },    // My.cool.Class.method1 = function() { ... };\n    method2: function() { ... }     // My.cool.Class.method2 = function() { ... };\n});\n</code></pre>\n","chainable":true,"inheritdoc":null,"id":"static-method-addStatics","fires":null,"linenr":null},{"autodetected":{"method_calls":true,"params":true,"chainable":true,"inheritdoc":true,"linenr":true,"fires":true},"short_doc":" ...","method_calls":null,"owner":"Ext.Base","inheritable":true,"params":[{"type":"Object","name":"xtype","html_type":"Object"}],"tagname":"method","files":[{"linenr":730,"filename":"/Users/yshibukawa/personal/ext-4.2.1.883/src/class/Base.js"}],"private":true,"static":true,"name":"addXtype","doc":"\n","chainable":true,"inheritdoc":null,"id":"static-method-addXtype","fires":null,"linenr":null},{"autodetected":{"method_calls":true,"chainable":true,"inheritdoc":true,"linenr":true,"fires":true},"short_doc":"Borrow another class' members to the prototype of this class. ...","method_calls":null,"owner":"Ext.Base","inheritable":true,"params":[{"type":"Ext.Base","tagname":"params","doc":"<p>The class to borrow members from</p>\n","name":"fromClass","html_type":"<a href=\"#!/api/Ext.Base\" rel=\"Ext.Base\" class=\"docClass\">Ext.Base</a>"},{"type":"Array/String","tagname":"params","doc":"<p>The names of the members to borrow</p>\n","name":"members","html_type":"Array/String"}],"tagname":"method","files":[{"linenr":383,"filename":"/Users/yshibukawa/personal/ext-4.2.1.883/src/class/Base.js"}],"return":{"type":"Ext.Base","properties":null,"doc":"<p>this</p>\n","name":"return","html_type":"<a href=\"#!/api/Ext.Base\" rel=\"Ext.Base\" class=\"docClass\">Ext.Base</a>"},"static":true,"private":true,"name":"borrow","doc":"<p>Borrow another class' members to the prototype of this class.</p>\n\n<pre><code><a href=\"#!/api/Ext-method-define\" rel=\"Ext-method-define\" class=\"docClass\">Ext.define</a>('Bank', {\n    money: '$$$',\n    printMoney: function() {\n        alert('$$$$$$$');\n    }\n});\n\n<a href=\"#!/api/Ext-method-define\" rel=\"Ext-method-define\" class=\"docClass\">Ext.define</a>('Thief', {\n    ...\n});\n\nThief.borrow(Bank, ['money', 'printMoney']);\n\nvar steve = new Thief();\n\nalert(steve.money); // alerts '$$$'\nsteve.printMoney(); // alerts '$$$$$$$'\n</code></pre>\n","chainable":true,"inheritdoc":null,"id":"static-method-borrow","fires":null,"linenr":null},{"overrides":[{"owner":"Ext.layout.Layout","link":"<a href=\"#!/api/Ext.layout.Layout-static-method-create\" rel=\"Ext.layout.Layout-static-method-create\" class=\"docClass\">Ext.layout.Layout.create</a>","name":"create"}],"autodetected":{"method_calls":true,"params":true,"private":true,"chainable":true,"inheritdoc":true,"linenr":true,"fires":true},"short_doc":"Create a new instance of this Class. ...","method_calls":null,"owner":"Ext.Base","inheritable":true,"params":[],"tagname":"method","files":[{"linenr":60,"filename":"/Users/yshibukawa/personal/ext-4.2.1.883/src/class/Base.js"}],"return":{"type":"Object","properties":null,"doc":"<p>the created instance.</p>\n","name":"return","html_type":"Object"},"static":true,"private":null,"name":"create","doc":"<p>Create a new instance of this Class.</p>\n\n<pre><code><a href=\"#!/api/Ext-method-define\" rel=\"Ext-method-define\" class=\"docClass\">Ext.define</a>('My.cool.Class', {\n    ...\n});\n\nMy.cool.Class.create({\n    someConfig: true\n});\n</code></pre>\n\n<p>All parameters are passed to the constructor of the class.</p>\n","chainable":false,"inheritdoc":null,"id":"static-method-create","fires":null,"linenr":null},{"autodetected":{"method_calls":true,"private":true,"chainable":true,"inheritdoc":true,"linenr":true,"fires":true},"short_doc":"Create aliases for existing prototype methods. ...","method_calls":null,"owner":"Ext.Base","inheritable":true,"params":[{"type":"String/Object","tagname":"params","doc":"<p>The new method name, or an object to set multiple aliases. See\n<a href=\"#!/api/Ext.Function-method-flexSetter\" rel=\"Ext.Function-method-flexSetter\" class=\"docClass\">flexSetter</a></p>\n","name":"alias","html_type":"String/Object"},{"type":"String/Object","tagname":"params","doc":"<p>The original method name</p>\n","name":"origin","html_type":"String/Object"}],"tagname":"method","files":[{"linenr":696,"filename":"/Users/yshibukawa/personal/ext-4.2.1.883/src/class/Base.js"}],"static":true,"private":null,"name":"createAlias","doc":"<p>Create aliases for existing prototype methods. Example:</p>\n\n<pre><code><a href=\"#!/api/Ext-method-define\" rel=\"Ext-method-define\" class=\"docClass\">Ext.define</a>('My.cool.Class', {\n    method1: function() { ... },\n    method2: function() { ... }\n});\n\nvar test = new My.cool.Class();\n\nMy.cool.Class.createAlias({\n    method3: 'method1',\n    method4: 'method2'\n});\n\ntest.method3(); // test.method1()\n\nMy.cool.Class.createAlias('method5', 'method3');\n\ntest.method5(); // test.method3() -&gt; test.method1()\n</code></pre>\n","chainable":null,"inheritdoc":null,"id":"static-method-createAlias","fires":null,"linenr":null},{"autodetected":{"method_calls":true,"chainable":true,"inheritdoc":true,"linenr":true,"fires":true},"short_doc":" ...","method_calls":["hasOwnProperty"],"owner":"Ext.Base","inheritable":true,"params":[{"type":"Object","tagname":"params","doc":"\n","name":"config","html_type":"Object"}],"tagname":"method","files":[{"linenr":81,"filename":"/Users/yshibukawa/personal/ext-4.2.1.883/src/class/Base.js"}],"private":true,"static":true,"name":"extend","doc":"\n","chainable":false,"inheritdoc":null,"id":"static-method-extend","fires":null,"linenr":null},{"autodetected":{"method_calls":true,"params":true,"private":true,"chainable":true,"inheritdoc":true,"linenr":true,"fires":true},"short_doc":"Get the current class' name in string format. ...","method_calls":null,"owner":"Ext.Base","inheritable":true,"params":[],"tagname":"method","files":[{"linenr":677,"filename":"/Users/yshibukawa/personal/ext-4.2.1.883/src/class/Base.js"}],"return":{"type":"String","properties":null,"doc":"<p>className</p>\n","name":"return","html_type":"String"},"static":true,"private":null,"name":"getName","doc":"<p>Get the current class' name in string format.</p>\n\n<pre><code><a href=\"#!/api/Ext-method-define\" rel=\"Ext-method-define\" class=\"docClass\">Ext.define</a>('My.cool.Class', {\n    constructor: function() {\n        alert(this.self.getName()); // alerts 'My.cool.Class'\n    }\n});\n\nMy.cool.Class.getName(); // 'My.cool.Class'\n</code></pre>\n","chainable":false,"inheritdoc":null,"id":"static-method-getName","fires":null,"linenr":null},{"autodetected":{"method_calls":true,"params":true,"private":true,"chainable":true,"inheritdoc":true,"linenr":true,"fires":true},"short_doc":"Adds members to class. ...","method_calls":null,"owner":"Ext.Base","inheritable":true,"params":[],"tagname":"method","files":[{"linenr":373,"filename":"/Users/yshibukawa/personal/ext-4.2.1.883/src/class/Base.js"}],"static":true,"private":null,"name":"implement","doc":"<p>Adds members to class.</p>\n","chainable":false,"inheritdoc":null,"id":"static-method-implement","deprecated":{"text":"<p>Use <a href=\"#!/api/Ext.Base-static-method-addMembers\" rel=\"Ext.Base-static-method-addMembers\" class=\"docClass\">addMembers</a> instead.</p>\n","version":"4.1"},"fires":null,"linenr":null},{"autodetected":{"method_calls":true,"params":true,"chainable":true,"inheritdoc":true,"linenr":true,"fires":true},"short_doc":"Used internally by the mixins pre-processor ...","method_calls":["addConfig","hasOwnProperty"],"owner":"Ext.Base","inheritable":true,"params":[{"type":"Object","name":"name","html_type":"Object"},{"type":"Object","name":"mixinClass","html_type":"Object"}],"tagname":"method","files":[{"linenr":595,"filename":"/Users/yshibukawa/personal/ext-4.2.1.883/src/class/Base.js"}],"private":true,"static":true,"name":"mixin","doc":"<p>Used internally by the mixins pre-processor</p>\n","chainable":false,"inheritdoc":null,"id":"static-method-mixin","fires":null,"linenr":null},{"autodetected":{"method_calls":true,"params":true,"chainable":true,"inheritdoc":true,"linenr":true,"fires":true},"short_doc":" ...","method_calls":null,"owner":"Ext.Base","inheritable":true,"params":[{"type":"Object","name":"fn","html_type":"Object"},{"type":"Object","name":"scope","html_type":"Object"}],"tagname":"method","files":[{"linenr":162,"filename":"/Users/yshibukawa/personal/ext-4.2.1.883/src/class/Base.js"}],"private":true,"static":true,"name":"onExtended","doc":"\n","chainable":true,"inheritdoc":null,"id":"static-method-onExtended","fires":null,"linenr":null},{"autodetected":{"method_calls":true,"private":true,"chainable":true,"inheritdoc":true,"linenr":true,"fires":true},"short_doc":"Override members of this class. ...","method_calls":["addConfig","addInheritableStatics"],"owner":"Ext.Base","inheritable":true,"params":[{"type":"Object","tagname":"params","doc":"<p>The properties to add to this class. This should be\nspecified as an object literal containing one or more properties.</p>\n","name":"members","html_type":"Object"}],"tagname":"method","files":[{"linenr":452,"filename":"/Users/yshibukawa/personal/ext-4.2.1.883/src/class/Base.js"}],"return":{"type":"Ext.Base","properties":null,"doc":"<p>this class</p>\n","name":"return","html_type":"<a href=\"#!/api/Ext.Base\" rel=\"Ext.Base\" class=\"docClass\">Ext.Base</a>"},"static":true,"private":null,"name":"override","doc":"<p>Override members of this class. Overridden methods can be invoked via\n<a href=\"#!/api/Ext.Base-method-callParent\" rel=\"Ext.Base-method-callParent\" class=\"docClass\">callParent</a>.</p>\n\n<pre><code><a href=\"#!/api/Ext-method-define\" rel=\"Ext-method-define\" class=\"docClass\">Ext.define</a>('My.Cat', {\n    constructor: function() {\n        alert(\"I'm a cat!\");\n    }\n});\n\nMy.Cat.override({\n    constructor: function() {\n        alert(\"I'm going to be a cat!\");\n\n        this.callParent(arguments);\n\n        alert(\"Meeeeoooowwww\");\n    }\n});\n\nvar kitty = new My.Cat(); // alerts \"I'm going to be a cat!\"\n                          // alerts \"I'm a cat!\"\n                          // alerts \"Meeeeoooowwww\"\n</code></pre>\n\n<p>As of 4.1, direct use of this method is deprecated. Use <a href=\"#!/api/Ext-method-define\" rel=\"Ext-method-define\" class=\"docClass\">Ext.define</a>\ninstead:</p>\n\n<pre><code><a href=\"#!/api/Ext-method-define\" rel=\"Ext-method-define\" class=\"docClass\">Ext.define</a>('My.CatOverride', {\n    override: 'My.Cat',\n    constructor: function() {\n        alert(\"I'm going to be a cat!\");\n\n        this.callParent(arguments);\n\n        alert(\"Meeeeoooowwww\");\n    }\n});\n</code></pre>\n\n<p>The above accomplishes the same result but can be managed by the <a href=\"#!/api/Ext.Loader\" rel=\"Ext.Loader\" class=\"docClass\">Ext.Loader</a>\nwhich can properly order the override and its target class and the build process\ncan determine whether the override is needed based on the required state of the\ntarget class (My.Cat).</p>\n","chainable":true,"inheritdoc":null,"id":"static-method-override","deprecated":{"text":"<p>Use <a href=\"#!/api/Ext-method-define\" rel=\"Ext-method-define\" class=\"docClass\">Ext.define</a> instead</p>\n","version":"4.1.0"},"fires":null,"linenr":null},{"autodetected":{"method_calls":true,"params":true,"chainable":true,"inheritdoc":true,"linenr":true,"fires":true},"short_doc":" ...","method_calls":null,"owner":"Ext.Base","inheritable":true,"params":[],"tagname":"method","files":[{"linenr":140,"filename":"/Users/yshibukawa/personal/ext-4.2.1.883/src/class/Base.js"}],"private":true,"static":true,"name":"triggerExtended","doc":"\n","chainable":false,"inheritdoc":null,"id":"static-method-triggerExtended","fires":null,"linenr":null}],"alternateClassNames":["Ext.dd.DragDropMgr","Ext.dd.DDM"],"code_type":"ext_define","mixins":[],"doc":"<p>DragDropManager is a singleton that tracks the element interaction for\nall DragDrop items in the window.  Generally, you will not call\nthis class directly, but it does have helper methods that could\nbe useful in your DragDrop implementations.</p>\n","name":"Ext.dd.DragDropManager","id":"class-Ext.dd.DragDropManager"}