/**
 * sencha2jsx
 *
 * Sencha JSDuck comment to JSX
 *
 * License: MIT
 */

import "console.jsx";
import "js/nodejs.jsx";
import "../node_modules/getopt.jsx/lib/getopt.jsx";
import "namespace.jsx";
import "classinfo.jsx";
import "typeinfo.jsx";


class JSDuck2JSX {
    var global : Namespace;

    function read(source : string, filterString : string, typeinfo : TypeInfo) : void
    {
        this.global = new Namespace();
        var filter = new RegExp(filterString.replace(/\./g, "\\.").replace(/\?/g, ".").replace(/\*/g, ".*"));
        var dirs = node.fs.readdirSync(source);
        var jsons = [] : variant[]; 
        for (var i = 0; i < dirs.length; i++)
        {
            if (dirs[i].match(filter))
            {
                console.log("reading...", dirs[i]);
                var sourceFilePath = node.path.resolve(source, dirs[i]);
                var jsonSource = node.fs.readFileSync(sourceFilePath, 'utf8');
                var json : variant = null;
                try
                {
                    json = JSON.parse(jsonSource);
                }
                catch (e : Error)
                {
                    console.log('parse fail');
                }
                if (json)
                {
                    jsons.push(json);
                }
            }
        }
        for (var i = 0; i < typeinfo.extraItems.length; i++)
        {
            jsons.push(typeinfo.extraItems[i]);
        }
        for (var i = 0; i < jsons.length; i++)
        {
            typeinfo.searchAltNames(jsons[i]);
        }
        for (var i = 0; i < jsons.length; i++)
        {
            var classinfo = new ClassInfo(jsons[i], typeinfo);
            this.global.defineClass(classinfo);
        }
    }

    function write(dest : string, imports : string[], typeinfo : TypeInfo) : void
    {
        console.log("\nwriting to", dest);
        var license = '''/*
GNU General Public License Usage
This file may be used under the terms of the GNU General Public License version 3.0 as
published by the Free Software Foundation and appearing in the file LICENSE included in the
packaging of this file.

Please review the following information to ensure the GNU General Public License version 3.0
requirements will be met: http://www.gnu.org/copyleft/gpl.html.

This code is generated by sencha2jsx command created by @shibukawa
*/
''';
        var result = [license, ''];
        for (var i = 0; i < imports.length; i++)
        {
            result.push('import "' + imports[i] + '";');
        }
        if (imports.length > 0)
        {
            result.push('');
        }
        this.global.write(result, typeinfo);
        node.fs.writeFileSync(dest, result.join('\n'), 'utf8');
    }
}

class _Main {
    static function main(argv : string[]) : void
    {
        var parser = new BasicParser('i:(import)c:(converter)f:(filter)o:(output)h(help)e(extjs)s(senchatouch)', argv);
        var help = false;
        var output = '';
        var source = '';
        var filter = '';
        var typeinfo = '';
        var imports = [] : string[];
        var dir = node.__dirname;
        var opt = parser.getopt();
        while (opt)
        {
            switch (opt.option)
            {
            case 'o':
                output = opt.optarg;
                break;
            case 'f':
                filter = opt.optarg;
                break;
            case 't':
                typeinfo = opt.optarg;
                break;
            case 'h':
                help = true;
                break;
            case 'i':
                imports.push(opt.optarg);
                break;
            case 'e':
                source = node.path.resolve(dir, '../share/json/extjs');
                filter = "Ext*";
                imports.push("js/web.jsx");
                typeinfo = node.path.resolve(dir, '../share/extjs_type.json');
                output = node.path.resolve(dir, '../output/ext.jsx');
                break;
            case 's':
                source = node.path.resolve(dir, '../share/json/senchatouch');
                filter = "Ext*";
                imports.push("js/web.jsx", "googlemaps.jsx");
                typeinfo = node.path.resolve(dir, '../share/senchatouch_type.json');
                output = node.path.resolve(dir, '../output/sencha-touch.jsx');
                break;
            default:
                source = opt.option;
                break;
            }
            opt = parser.getopt();
            break;
        }
        if (help || !source || !node.fs.existsSync(source) || !output || (typeinfo && !node.fs.existsSync(typeinfo)))
        {
            if (!source)
            {
                console.log('source directory is not specified');
            }
            if (!node.fs.existsSync(source))
            {
                console.log("source directory doesn't exist");
            }
            if (!output)
            {
                console.log('output file is not specified');
            }
            if (typeinfo && !node.fs.existsSync(typeinfo))
            {
                console.log("convert information file doesn't exist");
            }
            console.log('''
$ jsduck2jsx [options] source

options:
  -o file, --output=file           : set output file.
  -f filter, --filter=filter       : set filter to file like "JSX*" 
  -t jsonfile, --typeinfo=jsonfile : extra type info file.
  -h, --help                       : show this message.
            ''');
        }
        else
        {
            var typeinfoObj = new TypeInfo(typeinfo);
            var generator = new JSDuck2JSX();
            generator.read(source, filter, typeinfoObj);
            generator.write(output, imports, typeinfoObj);
        }
    }
}
